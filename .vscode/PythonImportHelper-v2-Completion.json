[
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "trunc",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "playsound",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "playsound",
        "description": "playsound",
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "moeda",
        "importPath": "aula022.exer107",
        "description": "aula022.exer107",
        "isExtraImport": true,
        "detail": "aula022.exer107",
        "documentation": {}
    },
    {
        "label": "moeda",
        "importPath": "aula022.exer108",
        "description": "aula022.exer108",
        "isExtraImport": true,
        "detail": "aula022.exer108",
        "documentation": {}
    },
    {
        "label": "moeda",
        "importPath": "aula022.exer109",
        "description": "aula022.exer109",
        "isExtraImport": true,
        "detail": "aula022.exer109",
        "documentation": {}
    },
    {
        "label": "moeda",
        "importPath": "aula022.exer110",
        "description": "aula022.exer110",
        "isExtraImport": true,
        "detail": "aula022.exer110",
        "documentation": {}
    },
    {
        "label": "moeda",
        "importPath": "aula022.exer111.utilidadeCeV",
        "description": "aula022.exer111.utilidadeCeV",
        "isExtraImport": true,
        "detail": "aula022.exer111.utilidadeCeV",
        "documentation": {}
    },
    {
        "label": "dado",
        "importPath": "aula022.exer112.utilidadeCeV",
        "description": "aula022.exer112.utilidadeCeV",
        "isExtraImport": true,
        "detail": "aula022.exer112.utilidadeCeV",
        "documentation": {}
    },
    {
        "label": "moeda",
        "importPath": "aula022.exer112.utilidadeCeV",
        "description": "aula022.exer112.utilidadeCeV",
        "isExtraImport": true,
        "detail": "aula022.exer112.utilidadeCeV",
        "documentation": {}
    },
    {
        "label": "auxilio",
        "importPath": "aula023.exer113",
        "description": "aula023.exer113",
        "isExtraImport": true,
        "detail": "aula023.exer113",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "auxiliar",
        "importPath": "aula023.exer115",
        "description": "aula023.exer115",
        "isExtraImport": true,
        "detail": "aula023.exer115",
        "documentation": {}
    },
    {
        "label": "arquivo",
        "importPath": "aula023.exer115",
        "description": "aula023.exer115",
        "isExtraImport": true,
        "detail": "aula023.exer115",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Video",
        "importPath": "IPython.display",
        "description": "IPython.display",
        "isExtraImport": true,
        "detail": "IPython.display",
        "documentation": {}
    },
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "laser",
        "description": "laser",
        "isExtraImport": true,
        "detail": "laser",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "laser",
        "description": "laser",
        "isExtraImport": true,
        "detail": "laser",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "laser",
        "description": "laser",
        "isExtraImport": true,
        "detail": "laser",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "laser",
        "description": "laser",
        "isExtraImport": true,
        "detail": "laser",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "obstacle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "obstacle",
        "description": "obstacle",
        "detail": "obstacle",
        "documentation": {}
    },
    {
        "label": "Alien",
        "importPath": "alien",
        "description": "alien",
        "isExtraImport": true,
        "detail": "alien",
        "documentation": {}
    },
    {
        "label": "Extra",
        "importPath": "alien",
        "description": "alien",
        "isExtraImport": true,
        "detail": "alien",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "z3",
        "description": "z3",
        "isExtraImport": true,
        "detail": "z3",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "sympy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sympy",
        "description": "sympy",
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "mens",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula005.exer001",
        "description": "aprendendo Python.python básico.aula005.exer001",
        "peekOfCode": "mens = 'Hello World, '\nnome = 'felipe !'\nprint(mens+nome)",
        "detail": "aprendendo Python.python básico.aula005.exer001",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula005.exer001",
        "description": "aprendendo Python.python básico.aula005.exer001",
        "peekOfCode": "nome = 'felipe !'\nprint(mens+nome)",
        "detail": "aprendendo Python.python básico.aula005.exer001",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula005.exer002",
        "description": "aprendendo Python.python básico.aula005.exer002",
        "peekOfCode": "nome = input('What\\'s your name:')\n#mens = 'Welcome to the world '\nprint('Welcome to the world, {}!'.format(nome))",
        "detail": "aprendendo Python.python básico.aula005.exer002",
        "documentation": {}
    },
    {
        "label": "#mens",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula005.exer002",
        "description": "aprendendo Python.python básico.aula005.exer002",
        "peekOfCode": "#mens = 'Welcome to the world '\nprint('Welcome to the world, {}!'.format(nome))",
        "detail": "aprendendo Python.python básico.aula005.exer002",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula006.exer003",
        "description": "aprendendo Python.python básico.aula006.exer003",
        "peekOfCode": "n1 = int(input('type a number:'))\nn2 = int(input('type a number:'))\ns = n1 + n2\nprint(f'the sum of {n1} and {n2} equals {s}')",
        "detail": "aprendendo Python.python básico.aula006.exer003",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula006.exer003",
        "description": "aprendendo Python.python básico.aula006.exer003",
        "peekOfCode": "n2 = int(input('type a number:'))\ns = n1 + n2\nprint(f'the sum of {n1} and {n2} equals {s}')",
        "detail": "aprendendo Python.python básico.aula006.exer003",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula006.exer003",
        "description": "aprendendo Python.python básico.aula006.exer003",
        "peekOfCode": "s = n1 + n2\nprint(f'the sum of {n1} and {n2} equals {s}')",
        "detail": "aprendendo Python.python básico.aula006.exer003",
        "documentation": {}
    },
    {
        "label": "mens",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula006.exer004",
        "description": "aprendendo Python.python básico.aula006.exer004",
        "peekOfCode": "mens = input('Type something:')\nprint(f'the data type of {mens} is {type(mens)}')\nprint(f'the text is space: {mens.isspace()}')\nprint(f'the text is number: {mens.isnumeric()}')\nprint(f'the text is letter: {mens.isalpha()}')\nprint(f'the text is alphanumeric: {mens.isalnum()}')\nprint(f'the text is lower case: {mens.islower()}')\nprint(f'the text is upper case: {mens.isupper()}')\nprint(f'the text is capital letter: {mens.istitle()}')",
        "detail": "aprendendo Python.python básico.aula006.exer004",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer005",
        "description": "aprendendo Python.python básico.aula007.exer005",
        "peekOfCode": "num1 = int(input('type a number:'))\nprint('previous number = {} \\nnumber = {}\\nlater number = {}\\n'.format(num1-1, num1, num1+1))",
        "detail": "aprendendo Python.python básico.aula007.exer005",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer006",
        "description": "aprendendo Python.python básico.aula007.exer006",
        "peekOfCode": "num = int(input('type a number:'))\nroot = num**(1/2)\nprint('double number = {}\\ntriple number = {}\\nnumber root = {:.2f}\\n'.format(num*2, num*3, root))",
        "detail": "aprendendo Python.python básico.aula007.exer006",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer006",
        "description": "aprendendo Python.python básico.aula007.exer006",
        "peekOfCode": "root = num**(1/2)\nprint('double number = {}\\ntriple number = {}\\nnumber root = {:.2f}\\n'.format(num*2, num*3, root))",
        "detail": "aprendendo Python.python básico.aula007.exer006",
        "documentation": {}
    },
    {
        "label": "scoreTest1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer007",
        "description": "aprendendo Python.python básico.aula007.exer007",
        "peekOfCode": "scoreTest1 = float(input('type the grade of the first exam:'))\nscoreTest2 = float(input('type the grade of the second exam:'))\naverage = (scoreTest1 + scoreTest2)/2\nprint(('average of the test = {:.2f}'.format(average)))",
        "detail": "aprendendo Python.python básico.aula007.exer007",
        "documentation": {}
    },
    {
        "label": "scoreTest2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer007",
        "description": "aprendendo Python.python básico.aula007.exer007",
        "peekOfCode": "scoreTest2 = float(input('type the grade of the second exam:'))\naverage = (scoreTest1 + scoreTest2)/2\nprint(('average of the test = {:.2f}'.format(average)))",
        "detail": "aprendendo Python.python básico.aula007.exer007",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer007",
        "description": "aprendendo Python.python básico.aula007.exer007",
        "peekOfCode": "average = (scoreTest1 + scoreTest2)/2\nprint(('average of the test = {:.2f}'.format(average)))",
        "detail": "aprendendo Python.python básico.aula007.exer007",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer008",
        "description": "aprendendo Python.python básico.aula007.exer008",
        "peekOfCode": "width = float(input('type the measurement in meters:'))\nprint('width = {}km, width = {}qm and width = {}dam'.format(width/1000, width/100, width/10))\nprint('width = {}dm, width = {}cm and width = {}mm'.format(width*10, width*100, width*1000))",
        "detail": "aprendendo Python.python básico.aula007.exer008",
        "documentation": {}
    },
    {
        "label": "print('width",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer008",
        "description": "aprendendo Python.python básico.aula007.exer008",
        "peekOfCode": "print('width = {}km, width = {}qm and width = {}dam'.format(width/1000, width/100, width/10))\nprint('width = {}dm, width = {}cm and width = {}mm'.format(width*10, width*100, width*1000))",
        "detail": "aprendendo Python.python básico.aula007.exer008",
        "documentation": {}
    },
    {
        "label": "print('width",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer008",
        "description": "aprendendo Python.python básico.aula007.exer008",
        "peekOfCode": "print('width = {}dm, width = {}cm and width = {}mm'.format(width*10, width*100, width*1000))",
        "detail": "aprendendo Python.python básico.aula007.exer008",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer009",
        "description": "aprendendo Python.python básico.aula007.exer009",
        "peekOfCode": "num = int(input(\"type a number:\"))\nprint('-'*20)\nprint('number {} table'.format(num))\nprint('{} x  0\\t= {}'.format(num, num*0))\nprint('{} x  1\\t= {}'.format(num, num*1))\nprint('{} x  2\\t= {}'.format(num, num*2))\nprint('{} x  3\\t= {}'.format(num, num*3))\nprint('{} x  4\\t= {}'.format(num, num*4))\nprint('{} x  5\\t= {}'.format(num, num*5))\nprint('{} x  6\\t= {}'.format(num, num*6))",
        "detail": "aprendendo Python.python básico.aula007.exer009",
        "documentation": {}
    },
    {
        "label": "moneyReais",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer010",
        "description": "aprendendo Python.python básico.aula007.exer010",
        "peekOfCode": "moneyReais = float(input('type the amount in reais:'))\ntime = moneyReais/3.27\nprint('{:.2f} dolares'.format(time))",
        "detail": "aprendendo Python.python básico.aula007.exer010",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer010",
        "description": "aprendendo Python.python básico.aula007.exer010",
        "peekOfCode": "time = moneyReais/3.27\nprint('{:.2f} dolares'.format(time))",
        "detail": "aprendendo Python.python básico.aula007.exer010",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer011",
        "description": "aprendendo Python.python básico.aula007.exer011",
        "peekOfCode": "width = float(input('type the width in meters:'))\nheight = float(input('type the height in meters:'))\narea = width * height\nlitersPaint = area/2\nprint('area = {:.2f} square meters'.format(area))\nprint('{:.2f} liters of paint'.format(litersPaint))",
        "detail": "aprendendo Python.python básico.aula007.exer011",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer011",
        "description": "aprendendo Python.python básico.aula007.exer011",
        "peekOfCode": "height = float(input('type the height in meters:'))\narea = width * height\nlitersPaint = area/2\nprint('area = {:.2f} square meters'.format(area))\nprint('{:.2f} liters of paint'.format(litersPaint))",
        "detail": "aprendendo Python.python básico.aula007.exer011",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer011",
        "description": "aprendendo Python.python básico.aula007.exer011",
        "peekOfCode": "area = width * height\nlitersPaint = area/2\nprint('area = {:.2f} square meters'.format(area))\nprint('{:.2f} liters of paint'.format(litersPaint))",
        "detail": "aprendendo Python.python básico.aula007.exer011",
        "documentation": {}
    },
    {
        "label": "litersPaint",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer011",
        "description": "aprendendo Python.python básico.aula007.exer011",
        "peekOfCode": "litersPaint = area/2\nprint('area = {:.2f} square meters'.format(area))\nprint('{:.2f} liters of paint'.format(litersPaint))",
        "detail": "aprendendo Python.python básico.aula007.exer011",
        "documentation": {}
    },
    {
        "label": "print('area",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer011",
        "description": "aprendendo Python.python básico.aula007.exer011",
        "peekOfCode": "print('area = {:.2f} square meters'.format(area))\nprint('{:.2f} liters of paint'.format(litersPaint))",
        "detail": "aprendendo Python.python básico.aula007.exer011",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer012",
        "description": "aprendendo Python.python básico.aula007.exer012",
        "peekOfCode": "price = float(input('type the price:'))\ndiscountPrice = price * 0.95\nprint('5% discount price = {:.2f}'.format(discountPrice))",
        "detail": "aprendendo Python.python básico.aula007.exer012",
        "documentation": {}
    },
    {
        "label": "discountPrice",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer012",
        "description": "aprendendo Python.python básico.aula007.exer012",
        "peekOfCode": "discountPrice = price * 0.95\nprint('5% discount price = {:.2f}'.format(discountPrice))",
        "detail": "aprendendo Python.python básico.aula007.exer012",
        "documentation": {}
    },
    {
        "label": "salary",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer013",
        "description": "aprendendo Python.python básico.aula007.exer013",
        "peekOfCode": "salary = float(input('type the salary:'))\nsalary = salary * 1.15\nprint('new salary: {:.2f}'.format(salary))",
        "detail": "aprendendo Python.python básico.aula007.exer013",
        "documentation": {}
    },
    {
        "label": "salary",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer013",
        "description": "aprendendo Python.python básico.aula007.exer013",
        "peekOfCode": "salary = salary * 1.15\nprint('new salary: {:.2f}'.format(salary))",
        "detail": "aprendendo Python.python básico.aula007.exer013",
        "documentation": {}
    },
    {
        "label": "temperature",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer014",
        "description": "aprendendo Python.python básico.aula007.exer014",
        "peekOfCode": "temperature = float(input('type the temperature in celso:'))\ntemperature = ((9*temperature)+160)/5\nprint('temperature: {}°F'.format(temperature))",
        "detail": "aprendendo Python.python básico.aula007.exer014",
        "documentation": {}
    },
    {
        "label": "temperature",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer014",
        "description": "aprendendo Python.python básico.aula007.exer014",
        "peekOfCode": "temperature = ((9*temperature)+160)/5\nprint('temperature: {}°F'.format(temperature))",
        "detail": "aprendendo Python.python básico.aula007.exer014",
        "documentation": {}
    },
    {
        "label": "days",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer015",
        "description": "aprendendo Python.python básico.aula007.exer015",
        "peekOfCode": "days = int(input('type the amount of days:'))\nkilometers = float(input('type the amount of kilometers:'))\ncost = (60 * days) + (0.15*kilometers)\nprint('car cost: ${:.2f}'.format(cost))",
        "detail": "aprendendo Python.python básico.aula007.exer015",
        "documentation": {}
    },
    {
        "label": "kilometers",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer015",
        "description": "aprendendo Python.python básico.aula007.exer015",
        "peekOfCode": "kilometers = float(input('type the amount of kilometers:'))\ncost = (60 * days) + (0.15*kilometers)\nprint('car cost: ${:.2f}'.format(cost))",
        "detail": "aprendendo Python.python básico.aula007.exer015",
        "documentation": {}
    },
    {
        "label": "cost",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula007.exer015",
        "description": "aprendendo Python.python básico.aula007.exer015",
        "peekOfCode": "cost = (60 * days) + (0.15*kilometers)\nprint('car cost: ${:.2f}'.format(cost))",
        "detail": "aprendendo Python.python básico.aula007.exer015",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer016",
        "description": "aprendendo Python.python básico.aula008.exer016",
        "peekOfCode": "num = float(input('type a number: '))\nprint('truncated number = {}'.format(trunc(num)))",
        "detail": "aprendendo Python.python básico.aula008.exer016",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer017",
        "description": "aprendendo Python.python básico.aula008.exer017",
        "peekOfCode": "base = float(input('type the base of triangle:'))\naltitude = float(input('type the altitude of triangle:'))\n# math.hypot(base, altitude)\nhypotenuse = sqrt((base ** 2) + (altitude ** 2))\nprint('the hypotenuse of triangle = {:.3f}'.format(hypotenuse))",
        "detail": "aprendendo Python.python básico.aula008.exer017",
        "documentation": {}
    },
    {
        "label": "altitude",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer017",
        "description": "aprendendo Python.python básico.aula008.exer017",
        "peekOfCode": "altitude = float(input('type the altitude of triangle:'))\n# math.hypot(base, altitude)\nhypotenuse = sqrt((base ** 2) + (altitude ** 2))\nprint('the hypotenuse of triangle = {:.3f}'.format(hypotenuse))",
        "detail": "aprendendo Python.python básico.aula008.exer017",
        "documentation": {}
    },
    {
        "label": "hypotenuse",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer017",
        "description": "aprendendo Python.python básico.aula008.exer017",
        "peekOfCode": "hypotenuse = sqrt((base ** 2) + (altitude ** 2))\nprint('the hypotenuse of triangle = {:.3f}'.format(hypotenuse))",
        "detail": "aprendendo Python.python básico.aula008.exer017",
        "documentation": {}
    },
    {
        "label": "angle",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer018",
        "description": "aprendendo Python.python básico.aula008.exer018",
        "peekOfCode": "angle = float(input('type the angle of triangle:'))\n# math.radians(angle)\nangleRadian = (math.pi * angle)/180\nsin = math.sin(angleRadian)\ncos = math.cos(angleRadian)\ntan = math.tan(angleRadian)\nprint('angle = {}\\nsin = {:.2f}\\ncos = {:.2f}\\ntan = {:.2f}'.format(angle, sin, cos, tan))",
        "detail": "aprendendo Python.python básico.aula008.exer018",
        "documentation": {}
    },
    {
        "label": "angleRadian",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer018",
        "description": "aprendendo Python.python básico.aula008.exer018",
        "peekOfCode": "angleRadian = (math.pi * angle)/180\nsin = math.sin(angleRadian)\ncos = math.cos(angleRadian)\ntan = math.tan(angleRadian)\nprint('angle = {}\\nsin = {:.2f}\\ncos = {:.2f}\\ntan = {:.2f}'.format(angle, sin, cos, tan))",
        "detail": "aprendendo Python.python básico.aula008.exer018",
        "documentation": {}
    },
    {
        "label": "sin",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer018",
        "description": "aprendendo Python.python básico.aula008.exer018",
        "peekOfCode": "sin = math.sin(angleRadian)\ncos = math.cos(angleRadian)\ntan = math.tan(angleRadian)\nprint('angle = {}\\nsin = {:.2f}\\ncos = {:.2f}\\ntan = {:.2f}'.format(angle, sin, cos, tan))",
        "detail": "aprendendo Python.python básico.aula008.exer018",
        "documentation": {}
    },
    {
        "label": "cos",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer018",
        "description": "aprendendo Python.python básico.aula008.exer018",
        "peekOfCode": "cos = math.cos(angleRadian)\ntan = math.tan(angleRadian)\nprint('angle = {}\\nsin = {:.2f}\\ncos = {:.2f}\\ntan = {:.2f}'.format(angle, sin, cos, tan))",
        "detail": "aprendendo Python.python básico.aula008.exer018",
        "documentation": {}
    },
    {
        "label": "tan",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer018",
        "description": "aprendendo Python.python básico.aula008.exer018",
        "peekOfCode": "tan = math.tan(angleRadian)\nprint('angle = {}\\nsin = {:.2f}\\ncos = {:.2f}\\ntan = {:.2f}'.format(angle, sin, cos, tan))",
        "detail": "aprendendo Python.python básico.aula008.exer018",
        "documentation": {}
    },
    {
        "label": "print('angle",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer018",
        "description": "aprendendo Python.python básico.aula008.exer018",
        "peekOfCode": "print('angle = {}\\nsin = {:.2f}\\ncos = {:.2f}\\ntan = {:.2f}'.format(angle, sin, cos, tan))",
        "detail": "aprendendo Python.python básico.aula008.exer018",
        "documentation": {}
    },
    {
        "label": "name1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer019",
        "description": "aprendendo Python.python básico.aula008.exer019",
        "peekOfCode": "name1 = input('What\\'s your name: ')\nname2 = input('What\\'s your name: ')\nname3 = input('What\\'s your name: ')\nname4 = input('What\\'s your name: ')\nprint('chosen student: {}'.format(random.choice([name1, name2, name3, name4])))",
        "detail": "aprendendo Python.python básico.aula008.exer019",
        "documentation": {}
    },
    {
        "label": "name2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer019",
        "description": "aprendendo Python.python básico.aula008.exer019",
        "peekOfCode": "name2 = input('What\\'s your name: ')\nname3 = input('What\\'s your name: ')\nname4 = input('What\\'s your name: ')\nprint('chosen student: {}'.format(random.choice([name1, name2, name3, name4])))",
        "detail": "aprendendo Python.python básico.aula008.exer019",
        "documentation": {}
    },
    {
        "label": "name3",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer019",
        "description": "aprendendo Python.python básico.aula008.exer019",
        "peekOfCode": "name3 = input('What\\'s your name: ')\nname4 = input('What\\'s your name: ')\nprint('chosen student: {}'.format(random.choice([name1, name2, name3, name4])))",
        "detail": "aprendendo Python.python básico.aula008.exer019",
        "documentation": {}
    },
    {
        "label": "name4",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer019",
        "description": "aprendendo Python.python básico.aula008.exer019",
        "peekOfCode": "name4 = input('What\\'s your name: ')\nprint('chosen student: {}'.format(random.choice([name1, name2, name3, name4])))",
        "detail": "aprendendo Python.python básico.aula008.exer019",
        "documentation": {}
    },
    {
        "label": "name1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer020",
        "description": "aprendendo Python.python básico.aula008.exer020",
        "peekOfCode": "name1 = input('What\\'s your name: ')\nname2 = input('What\\'s your name: ')\nname3 = input('What\\'s your name: ')\nname4 = input('What\\'s your name: ')\n# list = [name1, name2, name3, name4]\n# random.shuffle(list)\n# print(list)\ns = random.sample([name1, name2, name3, name4], k=4)\nprint(s)",
        "detail": "aprendendo Python.python básico.aula008.exer020",
        "documentation": {}
    },
    {
        "label": "name2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer020",
        "description": "aprendendo Python.python básico.aula008.exer020",
        "peekOfCode": "name2 = input('What\\'s your name: ')\nname3 = input('What\\'s your name: ')\nname4 = input('What\\'s your name: ')\n# list = [name1, name2, name3, name4]\n# random.shuffle(list)\n# print(list)\ns = random.sample([name1, name2, name3, name4], k=4)\nprint(s)",
        "detail": "aprendendo Python.python básico.aula008.exer020",
        "documentation": {}
    },
    {
        "label": "name3",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer020",
        "description": "aprendendo Python.python básico.aula008.exer020",
        "peekOfCode": "name3 = input('What\\'s your name: ')\nname4 = input('What\\'s your name: ')\n# list = [name1, name2, name3, name4]\n# random.shuffle(list)\n# print(list)\ns = random.sample([name1, name2, name3, name4], k=4)\nprint(s)",
        "detail": "aprendendo Python.python básico.aula008.exer020",
        "documentation": {}
    },
    {
        "label": "name4",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer020",
        "description": "aprendendo Python.python básico.aula008.exer020",
        "peekOfCode": "name4 = input('What\\'s your name: ')\n# list = [name1, name2, name3, name4]\n# random.shuffle(list)\n# print(list)\ns = random.sample([name1, name2, name3, name4], k=4)\nprint(s)",
        "detail": "aprendendo Python.python básico.aula008.exer020",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula008.exer020",
        "description": "aprendendo Python.python básico.aula008.exer020",
        "peekOfCode": "s = random.sample([name1, name2, name3, name4], k=4)\nprint(s)",
        "detail": "aprendendo Python.python básico.aula008.exer020",
        "documentation": {}
    },
    {
        "label": "nameFull",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer022",
        "description": "aprendendo Python.python básico.aula009.exer022",
        "peekOfCode": "nameFull = str(input('What\\'s your full name: '))\nnameFull = nameFull.strip()\nprint(nameFull.upper())\nprint(nameFull.lower())\nprint(nameFull.replace(' ', '').__len__())\nnameList = nameFull.split(\" \")\nprint(nameList[0].__len__())",
        "detail": "aprendendo Python.python básico.aula009.exer022",
        "documentation": {}
    },
    {
        "label": "nameFull",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer022",
        "description": "aprendendo Python.python básico.aula009.exer022",
        "peekOfCode": "nameFull = nameFull.strip()\nprint(nameFull.upper())\nprint(nameFull.lower())\nprint(nameFull.replace(' ', '').__len__())\nnameList = nameFull.split(\" \")\nprint(nameList[0].__len__())",
        "detail": "aprendendo Python.python básico.aula009.exer022",
        "documentation": {}
    },
    {
        "label": "nameList",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer022",
        "description": "aprendendo Python.python básico.aula009.exer022",
        "peekOfCode": "nameList = nameFull.split(\" \")\nprint(nameList[0].__len__())",
        "detail": "aprendendo Python.python básico.aula009.exer022",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer023",
        "description": "aprendendo Python.python básico.aula009.exer023",
        "peekOfCode": "number = int(input('type a number: '))\nthousands = number//1000\nnumber = number % 1000\nhundreds = number//100\nnumber = number % 100\ntens = number // 10\nones = number % 10\nprint('thousands = {}\\nhundreds = {}\\ntens = {}\\nones = {}'.format(thousands, hundreds, tens, ones))",
        "detail": "aprendendo Python.python básico.aula009.exer023",
        "documentation": {}
    },
    {
        "label": "thousands",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer023",
        "description": "aprendendo Python.python básico.aula009.exer023",
        "peekOfCode": "thousands = number//1000\nnumber = number % 1000\nhundreds = number//100\nnumber = number % 100\ntens = number // 10\nones = number % 10\nprint('thousands = {}\\nhundreds = {}\\ntens = {}\\nones = {}'.format(thousands, hundreds, tens, ones))",
        "detail": "aprendendo Python.python básico.aula009.exer023",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer023",
        "description": "aprendendo Python.python básico.aula009.exer023",
        "peekOfCode": "number = number % 1000\nhundreds = number//100\nnumber = number % 100\ntens = number // 10\nones = number % 10\nprint('thousands = {}\\nhundreds = {}\\ntens = {}\\nones = {}'.format(thousands, hundreds, tens, ones))",
        "detail": "aprendendo Python.python básico.aula009.exer023",
        "documentation": {}
    },
    {
        "label": "hundreds",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer023",
        "description": "aprendendo Python.python básico.aula009.exer023",
        "peekOfCode": "hundreds = number//100\nnumber = number % 100\ntens = number // 10\nones = number % 10\nprint('thousands = {}\\nhundreds = {}\\ntens = {}\\nones = {}'.format(thousands, hundreds, tens, ones))",
        "detail": "aprendendo Python.python básico.aula009.exer023",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer023",
        "description": "aprendendo Python.python básico.aula009.exer023",
        "peekOfCode": "number = number % 100\ntens = number // 10\nones = number % 10\nprint('thousands = {}\\nhundreds = {}\\ntens = {}\\nones = {}'.format(thousands, hundreds, tens, ones))",
        "detail": "aprendendo Python.python básico.aula009.exer023",
        "documentation": {}
    },
    {
        "label": "tens",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer023",
        "description": "aprendendo Python.python básico.aula009.exer023",
        "peekOfCode": "tens = number // 10\nones = number % 10\nprint('thousands = {}\\nhundreds = {}\\ntens = {}\\nones = {}'.format(thousands, hundreds, tens, ones))",
        "detail": "aprendendo Python.python básico.aula009.exer023",
        "documentation": {}
    },
    {
        "label": "ones",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer023",
        "description": "aprendendo Python.python básico.aula009.exer023",
        "peekOfCode": "ones = number % 10\nprint('thousands = {}\\nhundreds = {}\\ntens = {}\\nones = {}'.format(thousands, hundreds, tens, ones))",
        "detail": "aprendendo Python.python básico.aula009.exer023",
        "documentation": {}
    },
    {
        "label": "print('thousands",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer023",
        "description": "aprendendo Python.python básico.aula009.exer023",
        "peekOfCode": "print('thousands = {}\\nhundreds = {}\\ntens = {}\\nones = {}'.format(thousands, hundreds, tens, ones))",
        "detail": "aprendendo Python.python básico.aula009.exer023",
        "documentation": {}
    },
    {
        "label": "town",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer024",
        "description": "aprendendo Python.python básico.aula009.exer024",
        "peekOfCode": "town = str(input('What\\'s your town: '))\ntown = town.strip()\ntown = town.upper()\nprint('A cidade começa com SANTO: {}'.format('SANTO' in town[0:5]))",
        "detail": "aprendendo Python.python básico.aula009.exer024",
        "documentation": {}
    },
    {
        "label": "town",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer024",
        "description": "aprendendo Python.python básico.aula009.exer024",
        "peekOfCode": "town = town.strip()\ntown = town.upper()\nprint('A cidade começa com SANTO: {}'.format('SANTO' in town[0:5]))",
        "detail": "aprendendo Python.python básico.aula009.exer024",
        "documentation": {}
    },
    {
        "label": "town",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer024",
        "description": "aprendendo Python.python básico.aula009.exer024",
        "peekOfCode": "town = town.upper()\nprint('A cidade começa com SANTO: {}'.format('SANTO' in town[0:5]))",
        "detail": "aprendendo Python.python básico.aula009.exer024",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer025",
        "description": "aprendendo Python.python básico.aula009.exer025",
        "peekOfCode": "name = str(input('What\\'s your name:'))\nname = name.strip()\nprint('SILVA' in name.upper())",
        "detail": "aprendendo Python.python básico.aula009.exer025",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer025",
        "description": "aprendendo Python.python básico.aula009.exer025",
        "peekOfCode": "name = name.strip()\nprint('SILVA' in name.upper())",
        "detail": "aprendendo Python.python básico.aula009.exer025",
        "documentation": {}
    },
    {
        "label": "frase",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer026",
        "description": "aprendendo Python.python básico.aula009.exer026",
        "peekOfCode": "frase = str(input('Digite uma frase: '))\nfrase = frase.strip()\ntamanhoFrase = frase.__len__()\nprint('O A aparece {} vezes'.format(frase.upper().count('A')))\nprint('Primeira vez na posicao {}'.format(frase.upper().find('A')+1))\nprint('Ultima vez na posicao {}'.format(frase.upper().rfind('A')+1))",
        "detail": "aprendendo Python.python básico.aula009.exer026",
        "documentation": {}
    },
    {
        "label": "frase",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer026",
        "description": "aprendendo Python.python básico.aula009.exer026",
        "peekOfCode": "frase = frase.strip()\ntamanhoFrase = frase.__len__()\nprint('O A aparece {} vezes'.format(frase.upper().count('A')))\nprint('Primeira vez na posicao {}'.format(frase.upper().find('A')+1))\nprint('Ultima vez na posicao {}'.format(frase.upper().rfind('A')+1))",
        "detail": "aprendendo Python.python básico.aula009.exer026",
        "documentation": {}
    },
    {
        "label": "tamanhoFrase",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer026",
        "description": "aprendendo Python.python básico.aula009.exer026",
        "peekOfCode": "tamanhoFrase = frase.__len__()\nprint('O A aparece {} vezes'.format(frase.upper().count('A')))\nprint('Primeira vez na posicao {}'.format(frase.upper().find('A')+1))\nprint('Ultima vez na posicao {}'.format(frase.upper().rfind('A')+1))",
        "detail": "aprendendo Python.python básico.aula009.exer026",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer027",
        "description": "aprendendo Python.python básico.aula009.exer027",
        "peekOfCode": "name = str(input('What\\'s your name: '))\nnameList = name.split()\nquantidadeDePalavrasNoNome = nameList.__len__()\nprint('first name: {}'.format(nameList[0]))\nprint('last name: {}'.format(nameList[quantidadeDePalavrasNoNome-1]))",
        "detail": "aprendendo Python.python básico.aula009.exer027",
        "documentation": {}
    },
    {
        "label": "nameList",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer027",
        "description": "aprendendo Python.python básico.aula009.exer027",
        "peekOfCode": "nameList = name.split()\nquantidadeDePalavrasNoNome = nameList.__len__()\nprint('first name: {}'.format(nameList[0]))\nprint('last name: {}'.format(nameList[quantidadeDePalavrasNoNome-1]))",
        "detail": "aprendendo Python.python básico.aula009.exer027",
        "documentation": {}
    },
    {
        "label": "quantidadeDePalavrasNoNome",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula009.exer027",
        "description": "aprendendo Python.python básico.aula009.exer027",
        "peekOfCode": "quantidadeDePalavrasNoNome = nameList.__len__()\nprint('first name: {}'.format(nameList[0]))\nprint('last name: {}'.format(nameList[quantidadeDePalavrasNoNome-1]))",
        "detail": "aprendendo Python.python básico.aula009.exer027",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer028",
        "description": "aprendendo Python.python básico.aula010.exer028",
        "peekOfCode": "number = random.randint(0, 5)\nnumberUser = int(input('try to guess the number between 0 and 5: '))\nif number == numberUser:\n    print('User win, number was {}'.format(number))\nelse:\n    print('user lose, number was {}'.format(number))",
        "detail": "aprendendo Python.python básico.aula010.exer028",
        "documentation": {}
    },
    {
        "label": "numberUser",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer028",
        "description": "aprendendo Python.python básico.aula010.exer028",
        "peekOfCode": "numberUser = int(input('try to guess the number between 0 and 5: '))\nif number == numberUser:\n    print('User win, number was {}'.format(number))\nelse:\n    print('user lose, number was {}'.format(number))",
        "detail": "aprendendo Python.python básico.aula010.exer028",
        "documentation": {}
    },
    {
        "label": "kilometers",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer029",
        "description": "aprendendo Python.python básico.aula010.exer029",
        "peekOfCode": "kilometers = float(input('type the speed of car in kilometers: '))\nif kilometers > 80:\n    trafficTicket = (kilometers-80) * 7\n    print('Driver was fined and the fine is ${:.2f}'.format(trafficTicket))\nelse:\n    print('Driver was not fined')",
        "detail": "aprendendo Python.python básico.aula010.exer029",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer030",
        "description": "aprendendo Python.python básico.aula010.exer030",
        "peekOfCode": "number = int(input('type a number integer: '))\nif (number % 2) == 0:\n    print('Number is even')\nelse:\n    print('Number is odd')",
        "detail": "aprendendo Python.python básico.aula010.exer030",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer031",
        "description": "aprendendo Python.python básico.aula010.exer031",
        "peekOfCode": "distance = float(input('type travel distance in kilometers: '))\nif distance > 200:\n    cost = distance * 0.45\nelse:\n    cost = distance * 0.5\nprint('the ticket price is ${}'.format(cost))",
        "detail": "aprendendo Python.python básico.aula010.exer031",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer032",
        "description": "aprendendo Python.python básico.aula010.exer032",
        "peekOfCode": "year = int(input('type a year: '))\nif (year % 100) != 0 and (year % 4) == 0:\n    print('{} is a leap year'.format(year))\nelif (year % 400) == 0:\n    print('{} is a leap year'.format(year))\nelse:\n    print('{} not is a leap year'.format(year))\nfrom time import sleep\nsleep(2)",
        "detail": "aprendendo Python.python básico.aula010.exer032",
        "documentation": {}
    },
    {
        "label": "firstNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer033",
        "description": "aprendendo Python.python básico.aula010.exer033",
        "peekOfCode": "firstNumber = float(input('type the first number: '))\nsecondNumber = float(input('type the second number: '))\nthirdNumber = float(input('type the third number: '))\nif firstNumber >= secondNumber and firstNumber >= thirdNumber:\n    higherNumber = firstNumber\n    if secondNumber >= thirdNumber:\n        smallerNumber = thirdNumber\n    else:\n        smallerNumber = secondNumber\nelif secondNumber >= firstNumber and secondNumber >= thirdNumber:",
        "detail": "aprendendo Python.python básico.aula010.exer033",
        "documentation": {}
    },
    {
        "label": "secondNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer033",
        "description": "aprendendo Python.python básico.aula010.exer033",
        "peekOfCode": "secondNumber = float(input('type the second number: '))\nthirdNumber = float(input('type the third number: '))\nif firstNumber >= secondNumber and firstNumber >= thirdNumber:\n    higherNumber = firstNumber\n    if secondNumber >= thirdNumber:\n        smallerNumber = thirdNumber\n    else:\n        smallerNumber = secondNumber\nelif secondNumber >= firstNumber and secondNumber >= thirdNumber:\n    higherNumber = secondNumber",
        "detail": "aprendendo Python.python básico.aula010.exer033",
        "documentation": {}
    },
    {
        "label": "thirdNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer033",
        "description": "aprendendo Python.python básico.aula010.exer033",
        "peekOfCode": "thirdNumber = float(input('type the third number: '))\nif firstNumber >= secondNumber and firstNumber >= thirdNumber:\n    higherNumber = firstNumber\n    if secondNumber >= thirdNumber:\n        smallerNumber = thirdNumber\n    else:\n        smallerNumber = secondNumber\nelif secondNumber >= firstNumber and secondNumber >= thirdNumber:\n    higherNumber = secondNumber\n    if firstNumber >= thirdNumber:",
        "detail": "aprendendo Python.python básico.aula010.exer033",
        "documentation": {}
    },
    {
        "label": "salary",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer034",
        "description": "aprendendo Python.python básico.aula010.exer034",
        "peekOfCode": "salary = float(input('type the your salary: $'))\nif salary > 1250:\n    newSalary = salary * 1.1\nelse:\n    newSalary = salary * 1.15\nprint('Your new salary are ${}'.format(newSalary))",
        "detail": "aprendendo Python.python básico.aula010.exer034",
        "documentation": {}
    },
    {
        "label": "side1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer035",
        "description": "aprendendo Python.python básico.aula010.exer035",
        "peekOfCode": "side1 = float(input('type the length of one side of the triangle: '))\nside2 = float(input('type the length of one side of the triangle: '))\nside3 = float(input('type the length of one side of the triangle: '))\ncont = 0\nif abs(side2-side3) < side1 < side2 + side3:\n    if abs(side1-side3) < side2 < side1 + side3:\n        if abs(side1 - side2) < side3 < side1 + side2:\n            print('the sides form a triangle')\nelse:\n    print('the sides not form a triangle')",
        "detail": "aprendendo Python.python básico.aula010.exer035",
        "documentation": {}
    },
    {
        "label": "side2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer035",
        "description": "aprendendo Python.python básico.aula010.exer035",
        "peekOfCode": "side2 = float(input('type the length of one side of the triangle: '))\nside3 = float(input('type the length of one side of the triangle: '))\ncont = 0\nif abs(side2-side3) < side1 < side2 + side3:\n    if abs(side1-side3) < side2 < side1 + side3:\n        if abs(side1 - side2) < side3 < side1 + side2:\n            print('the sides form a triangle')\nelse:\n    print('the sides not form a triangle')",
        "detail": "aprendendo Python.python básico.aula010.exer035",
        "documentation": {}
    },
    {
        "label": "side3",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer035",
        "description": "aprendendo Python.python básico.aula010.exer035",
        "peekOfCode": "side3 = float(input('type the length of one side of the triangle: '))\ncont = 0\nif abs(side2-side3) < side1 < side2 + side3:\n    if abs(side1-side3) < side2 < side1 + side3:\n        if abs(side1 - side2) < side3 < side1 + side2:\n            print('the sides form a triangle')\nelse:\n    print('the sides not form a triangle')",
        "detail": "aprendendo Python.python básico.aula010.exer035",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula010.exer035",
        "description": "aprendendo Python.python básico.aula010.exer035",
        "peekOfCode": "cont = 0\nif abs(side2-side3) < side1 < side2 + side3:\n    if abs(side1-side3) < side2 < side1 + side3:\n        if abs(side1 - side2) < side3 < side1 + side2:\n            print('the sides form a triangle')\nelse:\n    print('the sides not form a triangle')",
        "detail": "aprendendo Python.python básico.aula010.exer035",
        "documentation": {}
    },
    {
        "label": "priceHouse",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer036",
        "description": "aprendendo Python.python básico.aula012.exer036",
        "peekOfCode": "priceHouse = float(input('Qual o valor da casa: '))\nsalary = float(input('Qual o seu salário: '))\nyearsToPay = float(input('Quantos anos para pagar: '))\ninstallment = priceHouse / (yearsToPay*12)\nprint('parcela R${:.2f}'.format(installment))\nif installment > (salary * 0.3):\n    print('funding denied')\nelse:\n    print('approved funding')",
        "detail": "aprendendo Python.python básico.aula012.exer036",
        "documentation": {}
    },
    {
        "label": "salary",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer036",
        "description": "aprendendo Python.python básico.aula012.exer036",
        "peekOfCode": "salary = float(input('Qual o seu salário: '))\nyearsToPay = float(input('Quantos anos para pagar: '))\ninstallment = priceHouse / (yearsToPay*12)\nprint('parcela R${:.2f}'.format(installment))\nif installment > (salary * 0.3):\n    print('funding denied')\nelse:\n    print('approved funding')",
        "detail": "aprendendo Python.python básico.aula012.exer036",
        "documentation": {}
    },
    {
        "label": "yearsToPay",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer036",
        "description": "aprendendo Python.python básico.aula012.exer036",
        "peekOfCode": "yearsToPay = float(input('Quantos anos para pagar: '))\ninstallment = priceHouse / (yearsToPay*12)\nprint('parcela R${:.2f}'.format(installment))\nif installment > (salary * 0.3):\n    print('funding denied')\nelse:\n    print('approved funding')",
        "detail": "aprendendo Python.python básico.aula012.exer036",
        "documentation": {}
    },
    {
        "label": "installment",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer036",
        "description": "aprendendo Python.python básico.aula012.exer036",
        "peekOfCode": "installment = priceHouse / (yearsToPay*12)\nprint('parcela R${:.2f}'.format(installment))\nif installment > (salary * 0.3):\n    print('funding denied')\nelse:\n    print('approved funding')",
        "detail": "aprendendo Python.python básico.aula012.exer036",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer037",
        "description": "aprendendo Python.python básico.aula012.exer037",
        "peekOfCode": "number = int(input('type a number integer: '))\nbase = int(input('1 - binario\\n2 - octal\\n3 - hexadecimal\\nbase: '))\nif base == 1:\n    number = str(bin(number))[2:]\n    print('binario é {}'.format(number))\nelif base == 2:\n    number = str(oct(number))[2:]\n    print('octal é {}'.format(number))\nelif base == 3:\n    number = str(hex(number))[2:]",
        "detail": "aprendendo Python.python básico.aula012.exer037",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer037",
        "description": "aprendendo Python.python básico.aula012.exer037",
        "peekOfCode": "base = int(input('1 - binario\\n2 - octal\\n3 - hexadecimal\\nbase: '))\nif base == 1:\n    number = str(bin(number))[2:]\n    print('binario é {}'.format(number))\nelif base == 2:\n    number = str(oct(number))[2:]\n    print('octal é {}'.format(number))\nelif base == 3:\n    number = str(hex(number))[2:]\n    print('hexadecimal é {}'.format(number))",
        "detail": "aprendendo Python.python básico.aula012.exer037",
        "documentation": {}
    },
    {
        "label": "number1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer038",
        "description": "aprendendo Python.python básico.aula012.exer038",
        "peekOfCode": "number1 = int(input('type a number integer: '))\nnumber2 = int(input('type a number integer: '))\nif number1 > number2:\n    print('first is the biggest')\nelif number2 > number1:\n    print('second is the biggest')\nelse:\n    print('there is no greater value, both are equal')",
        "detail": "aprendendo Python.python básico.aula012.exer038",
        "documentation": {}
    },
    {
        "label": "number2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer038",
        "description": "aprendendo Python.python básico.aula012.exer038",
        "peekOfCode": "number2 = int(input('type a number integer: '))\nif number1 > number2:\n    print('first is the biggest')\nelif number2 > number1:\n    print('second is the biggest')\nelse:\n    print('there is no greater value, both are equal')",
        "detail": "aprendendo Python.python básico.aula012.exer038",
        "documentation": {}
    },
    {
        "label": "yearOfBirth",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer039",
        "description": "aprendendo Python.python básico.aula012.exer039",
        "peekOfCode": "yearOfBirth = int(input('what year were you born: '))\n# currentYear = date.today().year\ncurrentYear = date.today()\ncurrentYear = str(currentYear)[0:4]\ndifference = (int(currentYear)) - yearOfBirth\nif difference < 18:\n    difference = 18 - difference\n    print('Você ainda vai se alistar no serviço militar em {} anos'.format(difference))\nelif difference == 18:\n    print('Está na hora de se alistar no serviço militar')",
        "detail": "aprendendo Python.python básico.aula012.exer039",
        "documentation": {}
    },
    {
        "label": "currentYear",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer039",
        "description": "aprendendo Python.python básico.aula012.exer039",
        "peekOfCode": "currentYear = date.today()\ncurrentYear = str(currentYear)[0:4]\ndifference = (int(currentYear)) - yearOfBirth\nif difference < 18:\n    difference = 18 - difference\n    print('Você ainda vai se alistar no serviço militar em {} anos'.format(difference))\nelif difference == 18:\n    print('Está na hora de se alistar no serviço militar')\nelse:\n    difference = difference - 18",
        "detail": "aprendendo Python.python básico.aula012.exer039",
        "documentation": {}
    },
    {
        "label": "currentYear",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer039",
        "description": "aprendendo Python.python básico.aula012.exer039",
        "peekOfCode": "currentYear = str(currentYear)[0:4]\ndifference = (int(currentYear)) - yearOfBirth\nif difference < 18:\n    difference = 18 - difference\n    print('Você ainda vai se alistar no serviço militar em {} anos'.format(difference))\nelif difference == 18:\n    print('Está na hora de se alistar no serviço militar')\nelse:\n    difference = difference - 18\n    print('Já passou do tempo do alistamento em {} anos'.format(difference))",
        "detail": "aprendendo Python.python básico.aula012.exer039",
        "documentation": {}
    },
    {
        "label": "difference",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer039",
        "description": "aprendendo Python.python básico.aula012.exer039",
        "peekOfCode": "difference = (int(currentYear)) - yearOfBirth\nif difference < 18:\n    difference = 18 - difference\n    print('Você ainda vai se alistar no serviço militar em {} anos'.format(difference))\nelif difference == 18:\n    print('Está na hora de se alistar no serviço militar')\nelse:\n    difference = difference - 18\n    print('Já passou do tempo do alistamento em {} anos'.format(difference))",
        "detail": "aprendendo Python.python básico.aula012.exer039",
        "documentation": {}
    },
    {
        "label": "scoreOfExam1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer040",
        "description": "aprendendo Python.python básico.aula012.exer040",
        "peekOfCode": "scoreOfExam1 = float(input('Score of exam 1: '))\nscoreOfExam2 = float(input('Score of exam 2: '))\naverage = (scoreOfExam1 + scoreOfExam2)/2\nif average < 5:\n    print('reprovado')\nelif average >= 7:\n    print('aprovado')\nelse:\n    print('recuperação')",
        "detail": "aprendendo Python.python básico.aula012.exer040",
        "documentation": {}
    },
    {
        "label": "scoreOfExam2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer040",
        "description": "aprendendo Python.python básico.aula012.exer040",
        "peekOfCode": "scoreOfExam2 = float(input('Score of exam 2: '))\naverage = (scoreOfExam1 + scoreOfExam2)/2\nif average < 5:\n    print('reprovado')\nelif average >= 7:\n    print('aprovado')\nelse:\n    print('recuperação')",
        "detail": "aprendendo Python.python básico.aula012.exer040",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer040",
        "description": "aprendendo Python.python básico.aula012.exer040",
        "peekOfCode": "average = (scoreOfExam1 + scoreOfExam2)/2\nif average < 5:\n    print('reprovado')\nelif average >= 7:\n    print('aprovado')\nelse:\n    print('recuperação')",
        "detail": "aprendendo Python.python básico.aula012.exer040",
        "documentation": {}
    },
    {
        "label": "currentYear",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer041",
        "description": "aprendendo Python.python básico.aula012.exer041",
        "peekOfCode": "currentYear = date.today()\ncurrentYear = str(currentYear)[0:4]\ncurrentYear = int(currentYear)\n# currentYear = date.today().year\nyearOfBirth = int(input('what year were you born: '))\ndifference = currentYear - yearOfBirth\nif difference <= 9:\n    print('Mirim')\nelif difference <= 14:\n    print('Infantil')",
        "detail": "aprendendo Python.python básico.aula012.exer041",
        "documentation": {}
    },
    {
        "label": "currentYear",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer041",
        "description": "aprendendo Python.python básico.aula012.exer041",
        "peekOfCode": "currentYear = str(currentYear)[0:4]\ncurrentYear = int(currentYear)\n# currentYear = date.today().year\nyearOfBirth = int(input('what year were you born: '))\ndifference = currentYear - yearOfBirth\nif difference <= 9:\n    print('Mirim')\nelif difference <= 14:\n    print('Infantil')\nelif difference <= 19:",
        "detail": "aprendendo Python.python básico.aula012.exer041",
        "documentation": {}
    },
    {
        "label": "currentYear",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer041",
        "description": "aprendendo Python.python básico.aula012.exer041",
        "peekOfCode": "currentYear = int(currentYear)\n# currentYear = date.today().year\nyearOfBirth = int(input('what year were you born: '))\ndifference = currentYear - yearOfBirth\nif difference <= 9:\n    print('Mirim')\nelif difference <= 14:\n    print('Infantil')\nelif difference <= 19:\n    print('Junior')",
        "detail": "aprendendo Python.python básico.aula012.exer041",
        "documentation": {}
    },
    {
        "label": "yearOfBirth",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer041",
        "description": "aprendendo Python.python básico.aula012.exer041",
        "peekOfCode": "yearOfBirth = int(input('what year were you born: '))\ndifference = currentYear - yearOfBirth\nif difference <= 9:\n    print('Mirim')\nelif difference <= 14:\n    print('Infantil')\nelif difference <= 19:\n    print('Junior')\nelif difference <= 20:\n    print('Sênior')",
        "detail": "aprendendo Python.python básico.aula012.exer041",
        "documentation": {}
    },
    {
        "label": "difference",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer041",
        "description": "aprendendo Python.python básico.aula012.exer041",
        "peekOfCode": "difference = currentYear - yearOfBirth\nif difference <= 9:\n    print('Mirim')\nelif difference <= 14:\n    print('Infantil')\nelif difference <= 19:\n    print('Junior')\nelif difference <= 20:\n    print('Sênior')\nelse:",
        "detail": "aprendendo Python.python básico.aula012.exer041",
        "documentation": {}
    },
    {
        "label": "side1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer042",
        "description": "aprendendo Python.python básico.aula012.exer042",
        "peekOfCode": "side1 = float(input('digite o primeiro lado do triangulo: '))\nside2 = float(input('digite o segundo lado do triangulo: '))\nside3 = float(input('digite o terceiro lado do triangulo: '))\nif abs(side2 - side3) < side1 < side2 + side3:\n    if abs(side1 - side3) < side2 < side1 + side3:\n        if abs(side1 - side2) < side3 < side1 + side2:\n            print('O triangulo existe')\n            triangle = 1\nelse:\n    print('O triangulo não existe')",
        "detail": "aprendendo Python.python básico.aula012.exer042",
        "documentation": {}
    },
    {
        "label": "side2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer042",
        "description": "aprendendo Python.python básico.aula012.exer042",
        "peekOfCode": "side2 = float(input('digite o segundo lado do triangulo: '))\nside3 = float(input('digite o terceiro lado do triangulo: '))\nif abs(side2 - side3) < side1 < side2 + side3:\n    if abs(side1 - side3) < side2 < side1 + side3:\n        if abs(side1 - side2) < side3 < side1 + side2:\n            print('O triangulo existe')\n            triangle = 1\nelse:\n    print('O triangulo não existe')\n    triangle = 0",
        "detail": "aprendendo Python.python básico.aula012.exer042",
        "documentation": {}
    },
    {
        "label": "side3",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer042",
        "description": "aprendendo Python.python básico.aula012.exer042",
        "peekOfCode": "side3 = float(input('digite o terceiro lado do triangulo: '))\nif abs(side2 - side3) < side1 < side2 + side3:\n    if abs(side1 - side3) < side2 < side1 + side3:\n        if abs(side1 - side2) < side3 < side1 + side2:\n            print('O triangulo existe')\n            triangle = 1\nelse:\n    print('O triangulo não existe')\n    triangle = 0\nif triangle == 1:",
        "detail": "aprendendo Python.python básico.aula012.exer042",
        "documentation": {}
    },
    {
        "label": "peso",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer043",
        "description": "aprendendo Python.python básico.aula012.exer043",
        "peekOfCode": "peso = float(input('digite o seu peso em kilo: '))\naltura = float(input('Digite a sua altura em metro: '))\nimc = peso / (altura * altura)\nprint('IMC = {}'.format(imc))\nif imc < 18.5:\n    print('Abaixo do peso')\nelif imc < 25:\n    print('peso ideal')\nelif imc < 30:\n    print('sobrepeso')",
        "detail": "aprendendo Python.python básico.aula012.exer043",
        "documentation": {}
    },
    {
        "label": "altura",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer043",
        "description": "aprendendo Python.python básico.aula012.exer043",
        "peekOfCode": "altura = float(input('Digite a sua altura em metro: '))\nimc = peso / (altura * altura)\nprint('IMC = {}'.format(imc))\nif imc < 18.5:\n    print('Abaixo do peso')\nelif imc < 25:\n    print('peso ideal')\nelif imc < 30:\n    print('sobrepeso')\nelif imc < 40:",
        "detail": "aprendendo Python.python básico.aula012.exer043",
        "documentation": {}
    },
    {
        "label": "imc",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer043",
        "description": "aprendendo Python.python básico.aula012.exer043",
        "peekOfCode": "imc = peso / (altura * altura)\nprint('IMC = {}'.format(imc))\nif imc < 18.5:\n    print('Abaixo do peso')\nelif imc < 25:\n    print('peso ideal')\nelif imc < 30:\n    print('sobrepeso')\nelif imc < 40:\n    print('Obesidade')",
        "detail": "aprendendo Python.python básico.aula012.exer043",
        "documentation": {}
    },
    {
        "label": "print('IMC",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer043",
        "description": "aprendendo Python.python básico.aula012.exer043",
        "peekOfCode": "print('IMC = {}'.format(imc))\nif imc < 18.5:\n    print('Abaixo do peso')\nelif imc < 25:\n    print('peso ideal')\nelif imc < 30:\n    print('sobrepeso')\nelif imc < 40:\n    print('Obesidade')\nelse:",
        "detail": "aprendendo Python.python básico.aula012.exer043",
        "documentation": {}
    },
    {
        "label": "precoNormal",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer044",
        "description": "aprendendo Python.python básico.aula012.exer044",
        "peekOfCode": "precoNormal = float(input('Digite o preço normal do produto: $'))\ncondicaoPagamento = float(input('1 - dinheiro/cheque\\n'\n                                '2 - à vista no cartão\\n'\n                                '3 - em 2x no cartão\\n'\n                                '4 - 3x ou mais no cartão\\n'\n                                'digite a opção de pagamento: '))\nif condicaoPagamento == 1:\n    print('valor do produto {:.2f}'.format(precoNormal * 0.9))\nelif condicaoPagamento == 2:\n    print('valor do produto {:.2f}'.format(precoNormal * 0.95))",
        "detail": "aprendendo Python.python básico.aula012.exer044",
        "documentation": {}
    },
    {
        "label": "condicaoPagamento",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer044",
        "description": "aprendendo Python.python básico.aula012.exer044",
        "peekOfCode": "condicaoPagamento = float(input('1 - dinheiro/cheque\\n'\n                                '2 - à vista no cartão\\n'\n                                '3 - em 2x no cartão\\n'\n                                '4 - 3x ou mais no cartão\\n'\n                                'digite a opção de pagamento: '))\nif condicaoPagamento == 1:\n    print('valor do produto {:.2f}'.format(precoNormal * 0.9))\nelif condicaoPagamento == 2:\n    print('valor do produto {:.2f}'.format(precoNormal * 0.95))\nelif condicaoPagamento == 3:",
        "detail": "aprendendo Python.python básico.aula012.exer044",
        "documentation": {}
    },
    {
        "label": "computerChooses",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer045",
        "description": "aprendendo Python.python básico.aula012.exer045",
        "peekOfCode": "computerChooses = random.choice(['pedra', 'papel', 'tesoura'])\ncomputerChooses = str(computerChooses).upper()\nprint('{:40}'.format('Jokenpô'))\nuserChooses = str(input('Escolha um: pedra - papel - tesoura: ')).upper()\nprint('computador escolhe {}'.format(computerChooses))\nif computerChooses == 'TESOURA' and userChooses == 'PEDRA':\n    print('\\033[32muser win')\nelif computerChooses == 'PEDRA' and userChooses == 'PAPEL':\n    print('\\033[32muser win')\nelif computerChooses == 'PAPEL' and userChooses == 'TESOURA':",
        "detail": "aprendendo Python.python básico.aula012.exer045",
        "documentation": {}
    },
    {
        "label": "computerChooses",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer045",
        "description": "aprendendo Python.python básico.aula012.exer045",
        "peekOfCode": "computerChooses = str(computerChooses).upper()\nprint('{:40}'.format('Jokenpô'))\nuserChooses = str(input('Escolha um: pedra - papel - tesoura: ')).upper()\nprint('computador escolhe {}'.format(computerChooses))\nif computerChooses == 'TESOURA' and userChooses == 'PEDRA':\n    print('\\033[32muser win')\nelif computerChooses == 'PEDRA' and userChooses == 'PAPEL':\n    print('\\033[32muser win')\nelif computerChooses == 'PAPEL' and userChooses == 'TESOURA':\n    print('\\033[32muser win')",
        "detail": "aprendendo Python.python básico.aula012.exer045",
        "documentation": {}
    },
    {
        "label": "userChooses",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula012.exer045",
        "description": "aprendendo Python.python básico.aula012.exer045",
        "peekOfCode": "userChooses = str(input('Escolha um: pedra - papel - tesoura: ')).upper()\nprint('computador escolhe {}'.format(computerChooses))\nif computerChooses == 'TESOURA' and userChooses == 'PEDRA':\n    print('\\033[32muser win')\nelif computerChooses == 'PEDRA' and userChooses == 'PAPEL':\n    print('\\033[32muser win')\nelif computerChooses == 'PAPEL' and userChooses == 'TESOURA':\n    print('\\033[32muser win')\nelif computerChooses == userChooses:\n    print('\\033[34mthe match draws')",
        "detail": "aprendendo Python.python básico.aula012.exer045",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer048",
        "description": "aprendendo Python.python básico.aula013.exer048",
        "peekOfCode": "s = 0\nfor i in range(1, 500, 2):\n    if i % 3 == 0:\n        s += i\nprint(s)",
        "detail": "aprendendo Python.python básico.aula013.exer048",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer049",
        "description": "aprendendo Python.python básico.aula013.exer049",
        "peekOfCode": "number = int(input('type a number: '))\nprint('{:-^13}'.format(' Tabuada '))\nfor i in range(0, 11, 1):\n    print('{} x {:>2} = {:>4}'.format(number, i, (number*i)))",
        "detail": "aprendendo Python.python básico.aula013.exer049",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer050",
        "description": "aprendendo Python.python básico.aula013.exer050",
        "peekOfCode": "s = 0\nfor i in range(0, 6, 1):\n    numbers = int(input('type a number integer: '))\n    if numbers % 2 == 0:\n        s += numbers\nprint('sum of the numbers even = {}'.format(s))",
        "detail": "aprendendo Python.python básico.aula013.exer050",
        "documentation": {}
    },
    {
        "label": "firstNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer051",
        "description": "aprendendo Python.python básico.aula013.exer051",
        "peekOfCode": "firstNumber = float(input('type the first term of an AP: '))\ncommonDifference = float(input('type the common difference of an AP: '))\nfor i in range(0, 10, 1):\n    print('{:2}° term = {}'.format(i+1, firstNumber + (i*commonDifference)))",
        "detail": "aprendendo Python.python básico.aula013.exer051",
        "documentation": {}
    },
    {
        "label": "commonDifference",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer051",
        "description": "aprendendo Python.python básico.aula013.exer051",
        "peekOfCode": "commonDifference = float(input('type the common difference of an AP: '))\nfor i in range(0, 10, 1):\n    print('{:2}° term = {}'.format(i+1, firstNumber + (i*commonDifference)))",
        "detail": "aprendendo Python.python básico.aula013.exer051",
        "documentation": {}
    },
    {
        "label": "primo",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer052",
        "description": "aprendendo Python.python básico.aula013.exer052",
        "peekOfCode": "primo = int(input('type a number: '))\ncont = 0\nfor i in range(primo, 0, -1):\n    if primo % i == 0:\n        cont += 1\nif cont == 2:\n    print('{}Esse número é primo{}'.format('\\033[0:32m', '\\033[m'))\nelse:\n    print('{}Esse número não é primo{}'.format('\\033[0:31m', '\\033[m'))",
        "detail": "aprendendo Python.python básico.aula013.exer052",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer052",
        "description": "aprendendo Python.python básico.aula013.exer052",
        "peekOfCode": "cont = 0\nfor i in range(primo, 0, -1):\n    if primo % i == 0:\n        cont += 1\nif cont == 2:\n    print('{}Esse número é primo{}'.format('\\033[0:32m', '\\033[m'))\nelse:\n    print('{}Esse número não é primo{}'.format('\\033[0:31m', '\\033[m'))",
        "detail": "aprendendo Python.python básico.aula013.exer052",
        "documentation": {}
    },
    {
        "label": "frase",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer053",
        "description": "aprendendo Python.python básico.aula013.exer053",
        "peekOfCode": "frase = str(input('Digite uma frase: ')).strip().upper().replace(' ', '')\nc = 0\ntamanho = len(frase)\nprint(frase[::-1])\nfor i in range(0, tamanho, 1):\n    if frase[i] == frase[(tamanho-1)-i]:\n        c += 1\nif tamanho == c:\n    print('{}A frase é um palindromo{}'.format('\\033[0:32m', '\\033[m'))\nelse:",
        "detail": "aprendendo Python.python básico.aula013.exer053",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer053",
        "description": "aprendendo Python.python básico.aula013.exer053",
        "peekOfCode": "c = 0\ntamanho = len(frase)\nprint(frase[::-1])\nfor i in range(0, tamanho, 1):\n    if frase[i] == frase[(tamanho-1)-i]:\n        c += 1\nif tamanho == c:\n    print('{}A frase é um palindromo{}'.format('\\033[0:32m', '\\033[m'))\nelse:\n    print('{}A frase não é um palindromo{}'.format('\\033[0:31m', '\\033[m'))",
        "detail": "aprendendo Python.python básico.aula013.exer053",
        "documentation": {}
    },
    {
        "label": "tamanho",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer053",
        "description": "aprendendo Python.python básico.aula013.exer053",
        "peekOfCode": "tamanho = len(frase)\nprint(frase[::-1])\nfor i in range(0, tamanho, 1):\n    if frase[i] == frase[(tamanho-1)-i]:\n        c += 1\nif tamanho == c:\n    print('{}A frase é um palindromo{}'.format('\\033[0:32m', '\\033[m'))\nelse:\n    print('{}A frase não é um palindromo{}'.format('\\033[0:31m', '\\033[m'))",
        "detail": "aprendendo Python.python básico.aula013.exer053",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer054",
        "description": "aprendendo Python.python básico.aula013.exer054",
        "peekOfCode": "year = date.today().year\nc = 0\nfor i in range(0, 7, 1):\n    yearBirth = int(input('type the your year of birth: '))\n    if (year - yearBirth) < 21:\n        c += 1\nprint('{} não atingiram a maioridade'.format(c))",
        "detail": "aprendendo Python.python básico.aula013.exer054",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer054",
        "description": "aprendendo Python.python básico.aula013.exer054",
        "peekOfCode": "c = 0\nfor i in range(0, 7, 1):\n    yearBirth = int(input('type the your year of birth: '))\n    if (year - yearBirth) < 21:\n        c += 1\nprint('{} não atingiram a maioridade'.format(c))",
        "detail": "aprendendo Python.python básico.aula013.exer054",
        "documentation": {}
    },
    {
        "label": "biggest",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer055",
        "description": "aprendendo Python.python básico.aula013.exer055",
        "peekOfCode": "biggest = 0\nsmaller = 1000\nfor i in range(0, 5, 1):\n    weight = float(input('Type the your weight: '))\n    if weight < 0 or weight > 1000:\n        print('peso inválido')\n    else:\n        if weight >= biggest:\n            biggest = weight\n        if weight <= smaller:",
        "detail": "aprendendo Python.python básico.aula013.exer055",
        "documentation": {}
    },
    {
        "label": "smaller",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer055",
        "description": "aprendendo Python.python básico.aula013.exer055",
        "peekOfCode": "smaller = 1000\nfor i in range(0, 5, 1):\n    weight = float(input('Type the your weight: '))\n    if weight < 0 or weight > 1000:\n        print('peso inválido')\n    else:\n        if weight >= biggest:\n            biggest = weight\n        if weight <= smaller:\n            smaller = weight",
        "detail": "aprendendo Python.python básico.aula013.exer055",
        "documentation": {}
    },
    {
        "label": "sumAge",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer056",
        "description": "aprendendo Python.python básico.aula013.exer056",
        "peekOfCode": "sumAge = 0\nbiggestAgeMan = 0\nnameOlderMan = 'xxx'\nwomanAgeUnder20 = 0\npeople = 4\nfor i in range(0, people, 1):\n    name = str(input('type your name: ')).strip()\n    age = int(input('type your age: '))\n    gender = str(input('type your gender, man or woman: ')).strip().upper()\n    sumAge += age",
        "detail": "aprendendo Python.python básico.aula013.exer056",
        "documentation": {}
    },
    {
        "label": "biggestAgeMan",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer056",
        "description": "aprendendo Python.python básico.aula013.exer056",
        "peekOfCode": "biggestAgeMan = 0\nnameOlderMan = 'xxx'\nwomanAgeUnder20 = 0\npeople = 4\nfor i in range(0, people, 1):\n    name = str(input('type your name: ')).strip()\n    age = int(input('type your age: '))\n    gender = str(input('type your gender, man or woman: ')).strip().upper()\n    sumAge += age\n    if gender == 'MAN' and age > biggestAgeMan:",
        "detail": "aprendendo Python.python básico.aula013.exer056",
        "documentation": {}
    },
    {
        "label": "nameOlderMan",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer056",
        "description": "aprendendo Python.python básico.aula013.exer056",
        "peekOfCode": "nameOlderMan = 'xxx'\nwomanAgeUnder20 = 0\npeople = 4\nfor i in range(0, people, 1):\n    name = str(input('type your name: ')).strip()\n    age = int(input('type your age: '))\n    gender = str(input('type your gender, man or woman: ')).strip().upper()\n    sumAge += age\n    if gender == 'MAN' and age > biggestAgeMan:\n        biggestAgeMan = age",
        "detail": "aprendendo Python.python básico.aula013.exer056",
        "documentation": {}
    },
    {
        "label": "womanAgeUnder20",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer056",
        "description": "aprendendo Python.python básico.aula013.exer056",
        "peekOfCode": "womanAgeUnder20 = 0\npeople = 4\nfor i in range(0, people, 1):\n    name = str(input('type your name: ')).strip()\n    age = int(input('type your age: '))\n    gender = str(input('type your gender, man or woman: ')).strip().upper()\n    sumAge += age\n    if gender == 'MAN' and age > biggestAgeMan:\n        biggestAgeMan = age\n        nameOlderMan = name",
        "detail": "aprendendo Python.python básico.aula013.exer056",
        "documentation": {}
    },
    {
        "label": "people",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula013.exer056",
        "description": "aprendendo Python.python básico.aula013.exer056",
        "peekOfCode": "people = 4\nfor i in range(0, people, 1):\n    name = str(input('type your name: ')).strip()\n    age = int(input('type your age: '))\n    gender = str(input('type your gender, man or woman: ')).strip().upper()\n    sumAge += age\n    if gender == 'MAN' and age > biggestAgeMan:\n        biggestAgeMan = age\n        nameOlderMan = name\n    if gender == 'WOMAN' and age < 20:",
        "detail": "aprendendo Python.python básico.aula013.exer056",
        "documentation": {}
    },
    {
        "label": "sexo",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer057",
        "description": "aprendendo Python.python básico.aula014.exer057",
        "peekOfCode": "sexo = 'xxx'\nwhile (sexo != 'F') and (sexo != 'M'):\n    sexo = str(input('Digite o seu sexo, F ou M: ')).strip().upper()[0]\nprint(sexo)",
        "detail": "aprendendo Python.python básico.aula014.exer057",
        "documentation": {}
    },
    {
        "label": "computerNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer058",
        "description": "aprendendo Python.python básico.aula014.exer058",
        "peekOfCode": "computerNumber = 1\nguess = 0\nuserNumber = 0\nwhile userNumber != computerNumber:\n    guess += 1\n    computerNumber = randint(0, 10)\n    userNumber = int(input('Type a number between 0 and 10: '))\n    print('O computador escolheu {}'.format(computerNumber))\nprint('foi necessário {} palpites para ganhar'.format(guess))",
        "detail": "aprendendo Python.python básico.aula014.exer058",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer058",
        "description": "aprendendo Python.python básico.aula014.exer058",
        "peekOfCode": "guess = 0\nuserNumber = 0\nwhile userNumber != computerNumber:\n    guess += 1\n    computerNumber = randint(0, 10)\n    userNumber = int(input('Type a number between 0 and 10: '))\n    print('O computador escolheu {}'.format(computerNumber))\nprint('foi necessário {} palpites para ganhar'.format(guess))",
        "detail": "aprendendo Python.python básico.aula014.exer058",
        "documentation": {}
    },
    {
        "label": "userNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer058",
        "description": "aprendendo Python.python básico.aula014.exer058",
        "peekOfCode": "userNumber = 0\nwhile userNumber != computerNumber:\n    guess += 1\n    computerNumber = randint(0, 10)\n    userNumber = int(input('Type a number between 0 and 10: '))\n    print('O computador escolheu {}'.format(computerNumber))\nprint('foi necessário {} palpites para ganhar'.format(guess))",
        "detail": "aprendendo Python.python básico.aula014.exer058",
        "documentation": {}
    },
    {
        "label": "number1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer059",
        "description": "aprendendo Python.python básico.aula014.exer059",
        "peekOfCode": "number1 = float(input('Type a number: '))\nnumber2 = float(input('Type a number: '))\noperation = 0\nwhile operation != 5:\n    print(\"\"\"Menu de operações: número 1 = {}, número 2 = {}\n             [1] Somar\n             [2] Multiplicar\n             [3] Maior\n             [4] Novos números\n             [5] Sair do programa\"\"\".format(number1, number2))",
        "detail": "aprendendo Python.python básico.aula014.exer059",
        "documentation": {}
    },
    {
        "label": "number2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer059",
        "description": "aprendendo Python.python básico.aula014.exer059",
        "peekOfCode": "number2 = float(input('Type a number: '))\noperation = 0\nwhile operation != 5:\n    print(\"\"\"Menu de operações: número 1 = {}, número 2 = {}\n             [1] Somar\n             [2] Multiplicar\n             [3] Maior\n             [4] Novos números\n             [5] Sair do programa\"\"\".format(number1, number2))\n    operation = int(input('Digite o número da operação escolhida: '))",
        "detail": "aprendendo Python.python básico.aula014.exer059",
        "documentation": {}
    },
    {
        "label": "operation",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer059",
        "description": "aprendendo Python.python básico.aula014.exer059",
        "peekOfCode": "operation = 0\nwhile operation != 5:\n    print(\"\"\"Menu de operações: número 1 = {}, número 2 = {}\n             [1] Somar\n             [2] Multiplicar\n             [3] Maior\n             [4] Novos números\n             [5] Sair do programa\"\"\".format(number1, number2))\n    operation = int(input('Digite o número da operação escolhida: '))\n    if operation == 1:",
        "detail": "aprendendo Python.python básico.aula014.exer059",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer060",
        "description": "aprendendo Python.python básico.aula014.exer060",
        "peekOfCode": "number = int(input('Type a number: '))\nfatorial = 1\nwhile number != 0:\n    fatorial *= number\n    number -= 1\nprint(fatorial)",
        "detail": "aprendendo Python.python básico.aula014.exer060",
        "documentation": {}
    },
    {
        "label": "fatorial",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer060",
        "description": "aprendendo Python.python básico.aula014.exer060",
        "peekOfCode": "fatorial = 1\nwhile number != 0:\n    fatorial *= number\n    number -= 1\nprint(fatorial)",
        "detail": "aprendendo Python.python básico.aula014.exer060",
        "documentation": {}
    },
    {
        "label": "firstTermAP",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer061",
        "description": "aprendendo Python.python básico.aula014.exer061",
        "peekOfCode": "firstTermAP = float(input('type the first term of AP: '))\ncommonDifference = float(input('type the common difference of AP: '))\ncont = 0\nwhile cont < 10:\n    print('{}° term: {}'.format((cont+1), firstTermAP + (commonDifference*cont)))\n    cont += 1",
        "detail": "aprendendo Python.python básico.aula014.exer061",
        "documentation": {}
    },
    {
        "label": "commonDifference",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer061",
        "description": "aprendendo Python.python básico.aula014.exer061",
        "peekOfCode": "commonDifference = float(input('type the common difference of AP: '))\ncont = 0\nwhile cont < 10:\n    print('{}° term: {}'.format((cont+1), firstTermAP + (commonDifference*cont)))\n    cont += 1",
        "detail": "aprendendo Python.python básico.aula014.exer061",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer061",
        "description": "aprendendo Python.python básico.aula014.exer061",
        "peekOfCode": "cont = 0\nwhile cont < 10:\n    print('{}° term: {}'.format((cont+1), firstTermAP + (commonDifference*cont)))\n    cont += 1",
        "detail": "aprendendo Python.python básico.aula014.exer061",
        "documentation": {}
    },
    {
        "label": "firstTermAP",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer062",
        "description": "aprendendo Python.python básico.aula014.exer062",
        "peekOfCode": "firstTermAP = float(input('type the first term of AP: '))\ncommonDifference = float(input('type the common difference of AP: '))\ncont = 0\nwhile cont < 10:\n    print('{}° term: {}'.format((cont+1), firstTermAP + (commonDifference*cont)))\n    cont += 1\nterm = 1\nwhile term != 0:\n    term = float(input('Quantos termos quer adicionar: '))\n    termsCounted = cont",
        "detail": "aprendendo Python.python básico.aula014.exer062",
        "documentation": {}
    },
    {
        "label": "commonDifference",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer062",
        "description": "aprendendo Python.python básico.aula014.exer062",
        "peekOfCode": "commonDifference = float(input('type the common difference of AP: '))\ncont = 0\nwhile cont < 10:\n    print('{}° term: {}'.format((cont+1), firstTermAP + (commonDifference*cont)))\n    cont += 1\nterm = 1\nwhile term != 0:\n    term = float(input('Quantos termos quer adicionar: '))\n    termsCounted = cont\n    while cont < (term+termsCounted):",
        "detail": "aprendendo Python.python básico.aula014.exer062",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer062",
        "description": "aprendendo Python.python básico.aula014.exer062",
        "peekOfCode": "cont = 0\nwhile cont < 10:\n    print('{}° term: {}'.format((cont+1), firstTermAP + (commonDifference*cont)))\n    cont += 1\nterm = 1\nwhile term != 0:\n    term = float(input('Quantos termos quer adicionar: '))\n    termsCounted = cont\n    while cont < (term+termsCounted):\n        print('{}° term: {}'.format((cont + 1), firstTermAP + (commonDifference * cont)))",
        "detail": "aprendendo Python.python básico.aula014.exer062",
        "documentation": {}
    },
    {
        "label": "term",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer062",
        "description": "aprendendo Python.python básico.aula014.exer062",
        "peekOfCode": "term = 1\nwhile term != 0:\n    term = float(input('Quantos termos quer adicionar: '))\n    termsCounted = cont\n    while cont < (term+termsCounted):\n        print('{}° term: {}'.format((cont + 1), firstTermAP + (commonDifference * cont)))\n        cont += 1\nprint('END')",
        "detail": "aprendendo Python.python básico.aula014.exer062",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer063",
        "description": "aprendendo Python.python básico.aula014.exer063",
        "peekOfCode": "number = int(input('digite a quantidade de elementos da sequência de fibonacci: '))\nif number == 0:\n    print('Sem números')\nelif number == 1:\n    print('0', end=' -> ')\nelif number == 2:\n    print('0', end=' -> ')\n    print('1', end=' -> ')\nelif number < 0:\n    print('Quantidade inválida')",
        "detail": "aprendendo Python.python básico.aula014.exer063",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer064",
        "description": "aprendendo Python.python básico.aula014.exer064",
        "peekOfCode": "number = 0\nsumNumber = 0\ncounter = -1\nwhile number != 999:\n    counter += 1\n    sumNumber += number\n    number = int(input('digite um número: '))\nprint('Sum of {} number = {}'.format(counter, sumNumber))",
        "detail": "aprendendo Python.python básico.aula014.exer064",
        "documentation": {}
    },
    {
        "label": "sumNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer064",
        "description": "aprendendo Python.python básico.aula014.exer064",
        "peekOfCode": "sumNumber = 0\ncounter = -1\nwhile number != 999:\n    counter += 1\n    sumNumber += number\n    number = int(input('digite um número: '))\nprint('Sum of {} number = {}'.format(counter, sumNumber))",
        "detail": "aprendendo Python.python básico.aula014.exer064",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer064",
        "description": "aprendendo Python.python básico.aula014.exer064",
        "peekOfCode": "counter = -1\nwhile number != 999:\n    counter += 1\n    sumNumber += number\n    number = int(input('digite um número: '))\nprint('Sum of {} number = {}'.format(counter, sumNumber))",
        "detail": "aprendendo Python.python básico.aula014.exer064",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer065",
        "description": "aprendendo Python.python básico.aula014.exer065",
        "peekOfCode": "counter = 0\nsumNumber = 0\ncont = 'xxx'\nwhile cont != 'N':\n    number = int(input('Type a number: '))\n    counter += 1\n    sumNumber += number\n    if counter == 1:\n        smaller = number\n        biggest = number",
        "detail": "aprendendo Python.python básico.aula014.exer065",
        "documentation": {}
    },
    {
        "label": "sumNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer065",
        "description": "aprendendo Python.python básico.aula014.exer065",
        "peekOfCode": "sumNumber = 0\ncont = 'xxx'\nwhile cont != 'N':\n    number = int(input('Type a number: '))\n    counter += 1\n    sumNumber += number\n    if counter == 1:\n        smaller = number\n        biggest = number\n    if number < smaller:",
        "detail": "aprendendo Python.python básico.aula014.exer065",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer065",
        "description": "aprendendo Python.python básico.aula014.exer065",
        "peekOfCode": "cont = 'xxx'\nwhile cont != 'N':\n    number = int(input('Type a number: '))\n    counter += 1\n    sumNumber += number\n    if counter == 1:\n        smaller = number\n        biggest = number\n    if number < smaller:\n        smaller = number",
        "detail": "aprendendo Python.python básico.aula014.exer065",
        "documentation": {}
    },
    {
        "label": "print('average",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer065",
        "description": "aprendendo Python.python básico.aula014.exer065",
        "peekOfCode": "print('average = {}'.format(sumNumber/counter))\nprint('biggest = {}'.format(biggest))\nprint('smaller = {}'.format(smaller))",
        "detail": "aprendendo Python.python básico.aula014.exer065",
        "documentation": {}
    },
    {
        "label": "print('biggest",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer065",
        "description": "aprendendo Python.python básico.aula014.exer065",
        "peekOfCode": "print('biggest = {}'.format(biggest))\nprint('smaller = {}'.format(smaller))",
        "detail": "aprendendo Python.python básico.aula014.exer065",
        "documentation": {}
    },
    {
        "label": "print('smaller",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula014.exer065",
        "description": "aprendendo Python.python básico.aula014.exer065",
        "peekOfCode": "print('smaller = {}'.format(smaller))",
        "detail": "aprendendo Python.python básico.aula014.exer065",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer066",
        "description": "aprendendo Python.python básico.aula015.exer066",
        "peekOfCode": "number = counter = sumNumber = 0\nwhile number != 999:\n    number = float(input('Type a number, stop at 999: '))\n    if number == 999:\n        break\n    counter += 1\n    sumNumber += number\nprint(f'Numbers typed = {counter}')\nprint(f'Sum = {sumNumber}')",
        "detail": "aprendendo Python.python básico.aula015.exer066",
        "documentation": {}
    },
    {
        "label": "print(f'Sum",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer066",
        "description": "aprendendo Python.python básico.aula015.exer066",
        "peekOfCode": "print(f'Sum = {sumNumber}')",
        "detail": "aprendendo Python.python básico.aula015.exer066",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer067",
        "description": "aprendendo Python.python básico.aula015.exer067",
        "peekOfCode": "number = 0\nwhile number >= 0:\n    number = int(input('Type a number: '))\n    if number < 0:\n        break\n    print('-' * 20)\n    print('--Tabuada--')\n    for i in range(0, 11):\n        print(f'{number} x {i:>2} = {number*i}')\n    print('-' * 20)",
        "detail": "aprendendo Python.python básico.aula015.exer067",
        "documentation": {}
    },
    {
        "label": "win",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer068",
        "description": "aprendendo Python.python básico.aula015.exer068",
        "peekOfCode": "win = True\ncounter = 0\nwhile win:\n    userChoice = 'xxx'\n    numberComputer = randint(1, 2)\n    while userChoice != 'EVEN' and userChoice != 'ODD':\n        userChoice = str(input('Choice between even and odd: ')).strip().upper()\n    numberUser = int(input('Type a number: '))\n    if userChoice == 'EVEN':\n        if (numberUser + numberComputer) % 2 == 0:",
        "detail": "aprendendo Python.python básico.aula015.exer068",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer068",
        "description": "aprendendo Python.python básico.aula015.exer068",
        "peekOfCode": "counter = 0\nwhile win:\n    userChoice = 'xxx'\n    numberComputer = randint(1, 2)\n    while userChoice != 'EVEN' and userChoice != 'ODD':\n        userChoice = str(input('Choice between even and odd: ')).strip().upper()\n    numberUser = int(input('Type a number: '))\n    if userChoice == 'EVEN':\n        if (numberUser + numberComputer) % 2 == 0:\n            print('Computer choice {}'.format(numberComputer))",
        "detail": "aprendendo Python.python básico.aula015.exer068",
        "documentation": {}
    },
    {
        "label": "sex",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer069",
        "description": "aprendendo Python.python básico.aula015.exer069",
        "peekOfCode": "sex = 'xxx'\nage = -1\ncounterPeopleOver18 = 0\ncounterMan = 0\ncounterWomanUnder20 = 0\nconfirmation = 'x'\nwhile confirmation != 'N':\n    while age < 0:\n        age = int(input('Type your age: '))\n    while sex not in 'WM':",
        "detail": "aprendendo Python.python básico.aula015.exer069",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer069",
        "description": "aprendendo Python.python básico.aula015.exer069",
        "peekOfCode": "age = -1\ncounterPeopleOver18 = 0\ncounterMan = 0\ncounterWomanUnder20 = 0\nconfirmation = 'x'\nwhile confirmation != 'N':\n    while age < 0:\n        age = int(input('Type your age: '))\n    while sex not in 'WM':\n        sex = str(input('Type your sex, W/M: ')).strip().upper()[0]",
        "detail": "aprendendo Python.python básico.aula015.exer069",
        "documentation": {}
    },
    {
        "label": "counterPeopleOver18",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer069",
        "description": "aprendendo Python.python básico.aula015.exer069",
        "peekOfCode": "counterPeopleOver18 = 0\ncounterMan = 0\ncounterWomanUnder20 = 0\nconfirmation = 'x'\nwhile confirmation != 'N':\n    while age < 0:\n        age = int(input('Type your age: '))\n    while sex not in 'WM':\n        sex = str(input('Type your sex, W/M: ')).strip().upper()[0]\n    if age > 18:",
        "detail": "aprendendo Python.python básico.aula015.exer069",
        "documentation": {}
    },
    {
        "label": "counterMan",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer069",
        "description": "aprendendo Python.python básico.aula015.exer069",
        "peekOfCode": "counterMan = 0\ncounterWomanUnder20 = 0\nconfirmation = 'x'\nwhile confirmation != 'N':\n    while age < 0:\n        age = int(input('Type your age: '))\n    while sex not in 'WM':\n        sex = str(input('Type your sex, W/M: ')).strip().upper()[0]\n    if age > 18:\n        counterPeopleOver18 += 1",
        "detail": "aprendendo Python.python básico.aula015.exer069",
        "documentation": {}
    },
    {
        "label": "counterWomanUnder20",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer069",
        "description": "aprendendo Python.python básico.aula015.exer069",
        "peekOfCode": "counterWomanUnder20 = 0\nconfirmation = 'x'\nwhile confirmation != 'N':\n    while age < 0:\n        age = int(input('Type your age: '))\n    while sex not in 'WM':\n        sex = str(input('Type your sex, W/M: ')).strip().upper()[0]\n    if age > 18:\n        counterPeopleOver18 += 1\n    if sex == 'M':",
        "detail": "aprendendo Python.python básico.aula015.exer069",
        "documentation": {}
    },
    {
        "label": "confirmation",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer069",
        "description": "aprendendo Python.python básico.aula015.exer069",
        "peekOfCode": "confirmation = 'x'\nwhile confirmation != 'N':\n    while age < 0:\n        age = int(input('Type your age: '))\n    while sex not in 'WM':\n        sex = str(input('Type your sex, W/M: ')).strip().upper()[0]\n    if age > 18:\n        counterPeopleOver18 += 1\n    if sex == 'M':\n        counterMan += 1",
        "detail": "aprendendo Python.python básico.aula015.exer069",
        "documentation": {}
    },
    {
        "label": "productSmaller",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer070",
        "description": "aprendendo Python.python básico.aula015.exer070",
        "peekOfCode": "productSmaller = 0\ncheapestProduct = 'x'\nconfirmation = 'x'\nprice = -1\ncounter = 0\nproductOver1000 = 0\ntotal = 0\nwhile confirmation != 'N':\n    nameProduct = str(input('Type product name: ')).strip().upper()\n    while price < 0:",
        "detail": "aprendendo Python.python básico.aula015.exer070",
        "documentation": {}
    },
    {
        "label": "cheapestProduct",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer070",
        "description": "aprendendo Python.python básico.aula015.exer070",
        "peekOfCode": "cheapestProduct = 'x'\nconfirmation = 'x'\nprice = -1\ncounter = 0\nproductOver1000 = 0\ntotal = 0\nwhile confirmation != 'N':\n    nameProduct = str(input('Type product name: ')).strip().upper()\n    while price < 0:\n        price = float(input('Type product price: '))",
        "detail": "aprendendo Python.python básico.aula015.exer070",
        "documentation": {}
    },
    {
        "label": "confirmation",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer070",
        "description": "aprendendo Python.python básico.aula015.exer070",
        "peekOfCode": "confirmation = 'x'\nprice = -1\ncounter = 0\nproductOver1000 = 0\ntotal = 0\nwhile confirmation != 'N':\n    nameProduct = str(input('Type product name: ')).strip().upper()\n    while price < 0:\n        price = float(input('Type product price: '))\n    total += price",
        "detail": "aprendendo Python.python básico.aula015.exer070",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer070",
        "description": "aprendendo Python.python básico.aula015.exer070",
        "peekOfCode": "price = -1\ncounter = 0\nproductOver1000 = 0\ntotal = 0\nwhile confirmation != 'N':\n    nameProduct = str(input('Type product name: ')).strip().upper()\n    while price < 0:\n        price = float(input('Type product price: '))\n    total += price\n    if price > 1000:",
        "detail": "aprendendo Python.python básico.aula015.exer070",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer070",
        "description": "aprendendo Python.python básico.aula015.exer070",
        "peekOfCode": "counter = 0\nproductOver1000 = 0\ntotal = 0\nwhile confirmation != 'N':\n    nameProduct = str(input('Type product name: ')).strip().upper()\n    while price < 0:\n        price = float(input('Type product price: '))\n    total += price\n    if price > 1000:\n        productOver1000 += 1",
        "detail": "aprendendo Python.python básico.aula015.exer070",
        "documentation": {}
    },
    {
        "label": "productOver1000",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer070",
        "description": "aprendendo Python.python básico.aula015.exer070",
        "peekOfCode": "productOver1000 = 0\ntotal = 0\nwhile confirmation != 'N':\n    nameProduct = str(input('Type product name: ')).strip().upper()\n    while price < 0:\n        price = float(input('Type product price: '))\n    total += price\n    if price > 1000:\n        productOver1000 += 1\n    if counter == 0:",
        "detail": "aprendendo Python.python básico.aula015.exer070",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer070",
        "description": "aprendendo Python.python básico.aula015.exer070",
        "peekOfCode": "total = 0\nwhile confirmation != 'N':\n    nameProduct = str(input('Type product name: ')).strip().upper()\n    while price < 0:\n        price = float(input('Type product price: '))\n    total += price\n    if price > 1000:\n        productOver1000 += 1\n    if counter == 0:\n        productSmaller = price",
        "detail": "aprendendo Python.python básico.aula015.exer070",
        "documentation": {}
    },
    {
        "label": "saque",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer071",
        "description": "aprendendo Python.python básico.aula015.exer071",
        "peekOfCode": "saque = int(input('Digite o valor do saque: '))\nnotas50 = saque // 50\nsaque = saque % 50\nnotas20 = saque // 20\nsaque = saque % 20\nnotas10 = saque // 10\nsaque = saque % 10\nnotas1 = saque // 1\nif notas50 != 0:\n    print(f'São {notas50} notas de 50')",
        "detail": "aprendendo Python.python básico.aula015.exer071",
        "documentation": {}
    },
    {
        "label": "notas50",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer071",
        "description": "aprendendo Python.python básico.aula015.exer071",
        "peekOfCode": "notas50 = saque // 50\nsaque = saque % 50\nnotas20 = saque // 20\nsaque = saque % 20\nnotas10 = saque // 10\nsaque = saque % 10\nnotas1 = saque // 1\nif notas50 != 0:\n    print(f'São {notas50} notas de 50')\nif notas20 != 0:",
        "detail": "aprendendo Python.python básico.aula015.exer071",
        "documentation": {}
    },
    {
        "label": "saque",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer071",
        "description": "aprendendo Python.python básico.aula015.exer071",
        "peekOfCode": "saque = saque % 50\nnotas20 = saque // 20\nsaque = saque % 20\nnotas10 = saque // 10\nsaque = saque % 10\nnotas1 = saque // 1\nif notas50 != 0:\n    print(f'São {notas50} notas de 50')\nif notas20 != 0:\n    print(f'São {notas20} notas de 20')",
        "detail": "aprendendo Python.python básico.aula015.exer071",
        "documentation": {}
    },
    {
        "label": "notas20",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer071",
        "description": "aprendendo Python.python básico.aula015.exer071",
        "peekOfCode": "notas20 = saque // 20\nsaque = saque % 20\nnotas10 = saque // 10\nsaque = saque % 10\nnotas1 = saque // 1\nif notas50 != 0:\n    print(f'São {notas50} notas de 50')\nif notas20 != 0:\n    print(f'São {notas20} notas de 20')\nif notas10 != 0:",
        "detail": "aprendendo Python.python básico.aula015.exer071",
        "documentation": {}
    },
    {
        "label": "saque",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer071",
        "description": "aprendendo Python.python básico.aula015.exer071",
        "peekOfCode": "saque = saque % 20\nnotas10 = saque // 10\nsaque = saque % 10\nnotas1 = saque // 1\nif notas50 != 0:\n    print(f'São {notas50} notas de 50')\nif notas20 != 0:\n    print(f'São {notas20} notas de 20')\nif notas10 != 0:\n    print(f'São {notas10} notas de 10')",
        "detail": "aprendendo Python.python básico.aula015.exer071",
        "documentation": {}
    },
    {
        "label": "notas10",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer071",
        "description": "aprendendo Python.python básico.aula015.exer071",
        "peekOfCode": "notas10 = saque // 10\nsaque = saque % 10\nnotas1 = saque // 1\nif notas50 != 0:\n    print(f'São {notas50} notas de 50')\nif notas20 != 0:\n    print(f'São {notas20} notas de 20')\nif notas10 != 0:\n    print(f'São {notas10} notas de 10')\nif notas1 != 0:",
        "detail": "aprendendo Python.python básico.aula015.exer071",
        "documentation": {}
    },
    {
        "label": "saque",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer071",
        "description": "aprendendo Python.python básico.aula015.exer071",
        "peekOfCode": "saque = saque % 10\nnotas1 = saque // 1\nif notas50 != 0:\n    print(f'São {notas50} notas de 50')\nif notas20 != 0:\n    print(f'São {notas20} notas de 20')\nif notas10 != 0:\n    print(f'São {notas10} notas de 10')\nif notas1 != 0:\n    print(f'São {notas1} notas de 1')",
        "detail": "aprendendo Python.python básico.aula015.exer071",
        "documentation": {}
    },
    {
        "label": "notas1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula015.exer071",
        "description": "aprendendo Python.python básico.aula015.exer071",
        "peekOfCode": "notas1 = saque // 1\nif notas50 != 0:\n    print(f'São {notas50} notas de 50')\nif notas20 != 0:\n    print(f'São {notas20} notas de 20')\nif notas10 != 0:\n    print(f'São {notas10} notas de 10')\nif notas1 != 0:\n    print(f'São {notas1} notas de 1')",
        "detail": "aprendendo Python.python básico.aula015.exer071",
        "documentation": {}
    },
    {
        "label": "numberExtenso",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer072",
        "description": "aprendendo Python.python básico.aula016.exer072",
        "peekOfCode": "numberExtenso = ('zero', 'um', 'dois', 'três', 'quatro', 'cinco', 'seis', 'sete', 'oito',\n          'nove', 'dez', 'onze', 'doze', 'treze', 'quatorze', 'quinze', 'dezesseis',\n          'dezessete', 'dezoito', 'dezenove', 'vinte')\nnumber = -1\nwhile number > 20 or number < 0:\n    number = int(input('Type a number between 0 and 20: '))\nprint('O número digitado é {}'.format(numberExtenso[number]))",
        "detail": "aprendendo Python.python básico.aula016.exer072",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer072",
        "description": "aprendendo Python.python básico.aula016.exer072",
        "peekOfCode": "number = -1\nwhile number > 20 or number < 0:\n    number = int(input('Type a number between 0 and 20: '))\nprint('O número digitado é {}'.format(numberExtenso[number]))",
        "detail": "aprendendo Python.python básico.aula016.exer072",
        "documentation": {}
    },
    {
        "label": "timeCapeonatoBrasileiro",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer073",
        "description": "aprendendo Python.python básico.aula016.exer073",
        "peekOfCode": "timeCapeonatoBrasileiro = ('Palmeiras', 'Internacional', 'Fluminense', 'Corinthians', 'Flamengo',\n                       'Athletico-PR', 'Atlético-MG', 'Fortaleza', 'São Paulo',\n                       'América-MG', 'Botafogo', 'Santos', 'Goiás', 'Bragantino',\n                       'Coritiba', 'Cuiabá', 'Ceará', 'Atlético-GO', 'Avaí', 'Juventude')\ntamanho = len(timeCapeonatoBrasileiro)\n# timeCapeonatoBrasileiro[0:5]\nfor i in range(0, 5):\n    print(f'{i + 1}° colocado: {timeCapeonatoBrasileiro[i]}')\nprint('')\n# timeCapeonatoBrasileiro[-4:]",
        "detail": "aprendendo Python.python básico.aula016.exer073",
        "documentation": {}
    },
    {
        "label": "tamanho",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer073",
        "description": "aprendendo Python.python básico.aula016.exer073",
        "peekOfCode": "tamanho = len(timeCapeonatoBrasileiro)\n# timeCapeonatoBrasileiro[0:5]\nfor i in range(0, 5):\n    print(f'{i + 1}° colocado: {timeCapeonatoBrasileiro[i]}')\nprint('')\n# timeCapeonatoBrasileiro[-4:]\nfor i in range(tamanho - 1, tamanho - 5, -1):\n    print(f'{i + 1}° colocado: {timeCapeonatoBrasileiro[i]}')\nprint('')\nprint(sorted(timeCapeonatoBrasileiro))",
        "detail": "aprendendo Python.python básico.aula016.exer073",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "num1 = int(random.random()*100)\nnum2 = int(random.random()*100)\nnum3 = int(random.random()*100)\nnum4 = int(random.random()*100)\nnum5 = int(random.random()*100)\nbiggest = smaller = 0\nnumber = (num1, num2, num3, num4, num5)\ntamanhoNumber = len(number)\nfor i in range(0, tamanhoNumber):\n    if i == 0:",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "num2 = int(random.random()*100)\nnum3 = int(random.random()*100)\nnum4 = int(random.random()*100)\nnum5 = int(random.random()*100)\nbiggest = smaller = 0\nnumber = (num1, num2, num3, num4, num5)\ntamanhoNumber = len(number)\nfor i in range(0, tamanhoNumber):\n    if i == 0:\n        smaller = number[i]",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "num3",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "num3 = int(random.random()*100)\nnum4 = int(random.random()*100)\nnum5 = int(random.random()*100)\nbiggest = smaller = 0\nnumber = (num1, num2, num3, num4, num5)\ntamanhoNumber = len(number)\nfor i in range(0, tamanhoNumber):\n    if i == 0:\n        smaller = number[i]\n        biggest = number[i]",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "num4",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "num4 = int(random.random()*100)\nnum5 = int(random.random()*100)\nbiggest = smaller = 0\nnumber = (num1, num2, num3, num4, num5)\ntamanhoNumber = len(number)\nfor i in range(0, tamanhoNumber):\n    if i == 0:\n        smaller = number[i]\n        biggest = number[i]\n    # print(max(number))",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "num5",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "num5 = int(random.random()*100)\nbiggest = smaller = 0\nnumber = (num1, num2, num3, num4, num5)\ntamanhoNumber = len(number)\nfor i in range(0, tamanhoNumber):\n    if i == 0:\n        smaller = number[i]\n        biggest = number[i]\n    # print(max(number))\n    if number[i] > biggest:",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "biggest",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "biggest = smaller = 0\nnumber = (num1, num2, num3, num4, num5)\ntamanhoNumber = len(number)\nfor i in range(0, tamanhoNumber):\n    if i == 0:\n        smaller = number[i]\n        biggest = number[i]\n    # print(max(number))\n    if number[i] > biggest:\n        biggest = number[i]",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "number = (num1, num2, num3, num4, num5)\ntamanhoNumber = len(number)\nfor i in range(0, tamanhoNumber):\n    if i == 0:\n        smaller = number[i]\n        biggest = number[i]\n    # print(max(number))\n    if number[i] > biggest:\n        biggest = number[i]\n    # print(min(number))",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "tamanhoNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "tamanhoNumber = len(number)\nfor i in range(0, tamanhoNumber):\n    if i == 0:\n        smaller = number[i]\n        biggest = number[i]\n    # print(max(number))\n    if number[i] > biggest:\n        biggest = number[i]\n    # print(min(number))\n    if number[i] < smaller:",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "print(f'biggest",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "print(f'biggest = {biggest}')\nprint(f'smaller = {smaller}')",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "print(f'smaller",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer074",
        "description": "aprendendo Python.python básico.aula016.exer074",
        "peekOfCode": "print(f'smaller = {smaller}')",
        "detail": "aprendendo Python.python básico.aula016.exer074",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer075",
        "description": "aprendendo Python.python básico.aula016.exer075",
        "peekOfCode": "num1 = int(input('Type a number: '))\nnum2 = int(input('Type a number: '))\nnum3 = int(input('Type a number: '))\nnum4 = int(input('Type a number: '))\nnumber = (num1, num2, num3, num4)\nprint(f'O 9 apareceu {number.count(9)} vezes')\ntry:\n    index3 = number.index(3)\n    print(f'Posição do primeiro 3: {index3 + 1}°')\nexcept ValueError:",
        "detail": "aprendendo Python.python básico.aula016.exer075",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer075",
        "description": "aprendendo Python.python básico.aula016.exer075",
        "peekOfCode": "num2 = int(input('Type a number: '))\nnum3 = int(input('Type a number: '))\nnum4 = int(input('Type a number: '))\nnumber = (num1, num2, num3, num4)\nprint(f'O 9 apareceu {number.count(9)} vezes')\ntry:\n    index3 = number.index(3)\n    print(f'Posição do primeiro 3: {index3 + 1}°')\nexcept ValueError:\n    print('Não encontrado o número 3')",
        "detail": "aprendendo Python.python básico.aula016.exer075",
        "documentation": {}
    },
    {
        "label": "num3",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer075",
        "description": "aprendendo Python.python básico.aula016.exer075",
        "peekOfCode": "num3 = int(input('Type a number: '))\nnum4 = int(input('Type a number: '))\nnumber = (num1, num2, num3, num4)\nprint(f'O 9 apareceu {number.count(9)} vezes')\ntry:\n    index3 = number.index(3)\n    print(f'Posição do primeiro 3: {index3 + 1}°')\nexcept ValueError:\n    print('Não encontrado o número 3')\nprint('Os pares digitado:', end='')",
        "detail": "aprendendo Python.python básico.aula016.exer075",
        "documentation": {}
    },
    {
        "label": "num4",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer075",
        "description": "aprendendo Python.python básico.aula016.exer075",
        "peekOfCode": "num4 = int(input('Type a number: '))\nnumber = (num1, num2, num3, num4)\nprint(f'O 9 apareceu {number.count(9)} vezes')\ntry:\n    index3 = number.index(3)\n    print(f'Posição do primeiro 3: {index3 + 1}°')\nexcept ValueError:\n    print('Não encontrado o número 3')\nprint('Os pares digitado:', end='')\nfor i in number:",
        "detail": "aprendendo Python.python básico.aula016.exer075",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer075",
        "description": "aprendendo Python.python básico.aula016.exer075",
        "peekOfCode": "number = (num1, num2, num3, num4)\nprint(f'O 9 apareceu {number.count(9)} vezes')\ntry:\n    index3 = number.index(3)\n    print(f'Posição do primeiro 3: {index3 + 1}°')\nexcept ValueError:\n    print('Não encontrado o número 3')\nprint('Os pares digitado:', end='')\nfor i in number:\n    if i % 2 == 0:",
        "detail": "aprendendo Python.python básico.aula016.exer075",
        "documentation": {}
    },
    {
        "label": "listProduct",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer076",
        "description": "aprendendo Python.python básico.aula016.exer076",
        "peekOfCode": "listProduct = ('pao', 2, 'leite', 4, 'cenora', 4, 'arroz', 3, 'carne', 15, 'linguiça', 14)\ntamanhoListProduct = len(listProduct)\nprint('-'*60, '\\nlista de produtos', '-'*20)\nfor i in range(0, tamanhoListProduct):\n    if i % 2 == 0:\n        print(f'{listProduct[i]:-<40}', end='')\n    else:\n        print(f'R$ {listProduct[i]:>5.2f}')",
        "detail": "aprendendo Python.python básico.aula016.exer076",
        "documentation": {}
    },
    {
        "label": "tamanhoListProduct",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer076",
        "description": "aprendendo Python.python básico.aula016.exer076",
        "peekOfCode": "tamanhoListProduct = len(listProduct)\nprint('-'*60, '\\nlista de produtos', '-'*20)\nfor i in range(0, tamanhoListProduct):\n    if i % 2 == 0:\n        print(f'{listProduct[i]:-<40}', end='')\n    else:\n        print(f'R$ {listProduct[i]:>5.2f}')",
        "detail": "aprendendo Python.python básico.aula016.exer076",
        "documentation": {}
    },
    {
        "label": "palavras",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula016.exer077",
        "description": "aprendendo Python.python básico.aula016.exer077",
        "peekOfCode": "palavras = ('pao', 'leite', 'cenora', 'batata', 'queijo', 'carne', 'frango', 'ovo')\nfor palavra in palavras:\n    tamanhoPalavra = len(palavra)\n    print(f'A palavra {palavra} tem as vogais: ', end='')\n    for i in range(0, tamanhoPalavra):\n        if palavra[i] in 'aeiouAEIOU':\n            print(f'{palavra[i]} ', end='')\n    print('')",
        "detail": "aprendendo Python.python básico.aula016.exer077",
        "documentation": {}
    },
    {
        "label": "listNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer078",
        "description": "aprendendo Python.python básico.aula017.exer078",
        "peekOfCode": "listNumber = []\nbiggest = smaller = 0\nfor i in range(0, 5):\n    listNumber.append(float(input('Type a number: ')))\n    if i == 0:\n        biggest = listNumber[i]\n        smaller = listNumber[i]\n    if biggest < listNumber[i]:\n        biggest = listNumber[i]\n    if smaller > listNumber[i]:",
        "detail": "aprendendo Python.python básico.aula017.exer078",
        "documentation": {}
    },
    {
        "label": "biggest",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer078",
        "description": "aprendendo Python.python básico.aula017.exer078",
        "peekOfCode": "biggest = smaller = 0\nfor i in range(0, 5):\n    listNumber.append(float(input('Type a number: ')))\n    if i == 0:\n        biggest = listNumber[i]\n        smaller = listNumber[i]\n    if biggest < listNumber[i]:\n        biggest = listNumber[i]\n    if smaller > listNumber[i]:\n        smaller = listNumber[i]",
        "detail": "aprendendo Python.python básico.aula017.exer078",
        "documentation": {}
    },
    {
        "label": "listRegister",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer079",
        "description": "aprendendo Python.python básico.aula017.exer079",
        "peekOfCode": "listRegister = []\nwhile True:\n    while True:\n        register = int(input('type a register: '))\n        if register not in listRegister:\n            break\n        else:\n            print('Invalid, ', end='')\n    listRegister.append(register)\n    while True:",
        "detail": "aprendendo Python.python básico.aula017.exer079",
        "documentation": {}
    },
    {
        "label": "listNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer080",
        "description": "aprendendo Python.python básico.aula017.exer080",
        "peekOfCode": "listNumber = []\nfor i in range(0, 5):\n    number = int(input('Type a number: '))\n    count = 0\n    if i == 0:\n        listNumber.append(number)\n    else:\n        maior = listNumber.index(max(listNumber))\n        if max(listNumber) > number:\n            for j in range(maior-1, -1, -1):",
        "detail": "aprendendo Python.python básico.aula017.exer080",
        "documentation": {}
    },
    {
        "label": "confirmation",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer081",
        "description": "aprendendo Python.python básico.aula017.exer081",
        "peekOfCode": "confirmation = ''\nlistNumber = []\ncount = 0\nwhile True:\n    listNumber.append(int(input('type a number: ')))\n    count += 1\n    while True:\n        confirmation = str(input('Would you like to continue, Y/N: ')).strip().upper()[0]\n        if confirmation in 'YN':\n            break",
        "detail": "aprendendo Python.python básico.aula017.exer081",
        "documentation": {}
    },
    {
        "label": "listNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer081",
        "description": "aprendendo Python.python básico.aula017.exer081",
        "peekOfCode": "listNumber = []\ncount = 0\nwhile True:\n    listNumber.append(int(input('type a number: ')))\n    count += 1\n    while True:\n        confirmation = str(input('Would you like to continue, Y/N: ')).strip().upper()[0]\n        if confirmation in 'YN':\n            break\n    if confirmation in 'N':",
        "detail": "aprendendo Python.python básico.aula017.exer081",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer081",
        "description": "aprendendo Python.python básico.aula017.exer081",
        "peekOfCode": "count = 0\nwhile True:\n    listNumber.append(int(input('type a number: ')))\n    count += 1\n    while True:\n        confirmation = str(input('Would you like to continue, Y/N: ')).strip().upper()[0]\n        if confirmation in 'YN':\n            break\n    if confirmation in 'N':\n        break",
        "detail": "aprendendo Python.python básico.aula017.exer081",
        "documentation": {}
    },
    {
        "label": "listNumber",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer082",
        "description": "aprendendo Python.python básico.aula017.exer082",
        "peekOfCode": "listNumber = []\nlistEven = []\nlistOdd = []\nconfirmation = ''\nwhile True:\n    listNumber.append(int(input('Type a number: ')))\n    while True:\n        confirmation = str(input('Would you like to continue, Y/N: ')).strip().upper()[0]\n        if confirmation in 'YN':\n            break",
        "detail": "aprendendo Python.python básico.aula017.exer082",
        "documentation": {}
    },
    {
        "label": "listEven",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer082",
        "description": "aprendendo Python.python básico.aula017.exer082",
        "peekOfCode": "listEven = []\nlistOdd = []\nconfirmation = ''\nwhile True:\n    listNumber.append(int(input('Type a number: ')))\n    while True:\n        confirmation = str(input('Would you like to continue, Y/N: ')).strip().upper()[0]\n        if confirmation in 'YN':\n            break\n    if confirmation == 'N':",
        "detail": "aprendendo Python.python básico.aula017.exer082",
        "documentation": {}
    },
    {
        "label": "listOdd",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer082",
        "description": "aprendendo Python.python básico.aula017.exer082",
        "peekOfCode": "listOdd = []\nconfirmation = ''\nwhile True:\n    listNumber.append(int(input('Type a number: ')))\n    while True:\n        confirmation = str(input('Would you like to continue, Y/N: ')).strip().upper()[0]\n        if confirmation in 'YN':\n            break\n    if confirmation == 'N':\n        break",
        "detail": "aprendendo Python.python básico.aula017.exer082",
        "documentation": {}
    },
    {
        "label": "confirmation",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer082",
        "description": "aprendendo Python.python básico.aula017.exer082",
        "peekOfCode": "confirmation = ''\nwhile True:\n    listNumber.append(int(input('Type a number: ')))\n    while True:\n        confirmation = str(input('Would you like to continue, Y/N: ')).strip().upper()[0]\n        if confirmation in 'YN':\n            break\n    if confirmation == 'N':\n        break\nfor number in listNumber:",
        "detail": "aprendendo Python.python básico.aula017.exer082",
        "documentation": {}
    },
    {
        "label": "expression",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer083",
        "description": "aprendendo Python.python básico.aula017.exer083",
        "peekOfCode": "expression = str(input('Type a expression: ')).strip()\n# parentesE = expression.count('(')\n# parentesD = expression.count(')')\n# if parentesE == parentesD:\n#     print(f'The expression -> {expression} <- is valid')\n# else:\n#     print(f'The expression {expression} isn\\'t valid')\npilha = []\nfor simb in expression:\n    if simb == '(':",
        "detail": "aprendendo Python.python básico.aula017.exer083",
        "documentation": {}
    },
    {
        "label": "pilha",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula017.exer083",
        "description": "aprendendo Python.python básico.aula017.exer083",
        "peekOfCode": "pilha = []\nfor simb in expression:\n    if simb == '(':\n        pilha.append('(')\n    elif simb == ')':\n        if len(pilha) > 0:\n            pilha.pop()\n        else:\n            pilha.append(')')\n            break # importante retirar esses casos -> )a+b(",
        "detail": "aprendendo Python.python básico.aula017.exer083",
        "documentation": {}
    },
    {
        "label": "confirmation",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer084",
        "description": "aprendendo Python.python básico.aula018.exer084",
        "peekOfCode": "confirmation = ''\ndata = []\npeople = []\ncount = 0\nwhile True:\n    data.append(str(input('type your name: ')).strip().upper())\n    data.append(float(input('type your weight: ')))\n    people.append(data[:])\n    count += 1\n    data.clear()",
        "detail": "aprendendo Python.python básico.aula018.exer084",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer084",
        "description": "aprendendo Python.python básico.aula018.exer084",
        "peekOfCode": "data = []\npeople = []\ncount = 0\nwhile True:\n    data.append(str(input('type your name: ')).strip().upper())\n    data.append(float(input('type your weight: ')))\n    people.append(data[:])\n    count += 1\n    data.clear()\n    confirmation = str(input('Would you like to continue, Y/N: '))",
        "detail": "aprendendo Python.python básico.aula018.exer084",
        "documentation": {}
    },
    {
        "label": "people",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer084",
        "description": "aprendendo Python.python básico.aula018.exer084",
        "peekOfCode": "people = []\ncount = 0\nwhile True:\n    data.append(str(input('type your name: ')).strip().upper())\n    data.append(float(input('type your weight: ')))\n    people.append(data[:])\n    count += 1\n    data.clear()\n    confirmation = str(input('Would you like to continue, Y/N: '))\n    if confirmation in 'Nn':",
        "detail": "aprendendo Python.python básico.aula018.exer084",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer084",
        "description": "aprendendo Python.python básico.aula018.exer084",
        "peekOfCode": "count = 0\nwhile True:\n    data.append(str(input('type your name: ')).strip().upper())\n    data.append(float(input('type your weight: ')))\n    people.append(data[:])\n    count += 1\n    data.clear()\n    confirmation = str(input('Would you like to continue, Y/N: '))\n    if confirmation in 'Nn':\n        break",
        "detail": "aprendendo Python.python básico.aula018.exer084",
        "documentation": {}
    },
    {
        "label": "biggest",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer084",
        "description": "aprendendo Python.python básico.aula018.exer084",
        "peekOfCode": "biggest = smaller = 0\nfor i in range(0, len(people)):\n    if i == 0:\n        biggest = people[i][1]\n        smaller = people[i][1]\n    if biggest < people[i][1]:\n        biggest = people[i][1]\n    if smaller > people[i][1]:\n        smaller = people[i][1]\nprint('-'*40)",
        "detail": "aprendendo Python.python básico.aula018.exer084",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer085",
        "description": "aprendendo Python.python básico.aula018.exer085",
        "peekOfCode": "numbers = [[], []]  # numbers[0] -> even, numbers[1] -> odd\nfor i in range(0, 7):\n    num = float(input('Type a number: '))\n    if num % 2 == 0:\n        numbers[0].append(num)\n    else:\n        numbers[1].append(num)\nnumbers[0].sort()\nprint(f'Even: {numbers[0]}')\nnumbers[1].sort()",
        "detail": "aprendendo Python.python básico.aula018.exer085",
        "documentation": {}
    },
    {
        "label": "matriz",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer086",
        "description": "aprendendo Python.python básico.aula018.exer086",
        "peekOfCode": "matriz = [[], [], []]\nfor i in range(0, 3):\n    for j in range(0, 3):\n        number = int(input('Type a number: '))\n        matriz[i].append(number)\nprint('-'*20)\nfor i in range(0, 3):\n    print(matriz[i])\nprint('-'*20)\nprint('END')",
        "detail": "aprendendo Python.python básico.aula018.exer086",
        "documentation": {}
    },
    {
        "label": "matriz",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer087",
        "description": "aprendendo Python.python básico.aula018.exer087",
        "peekOfCode": "matriz = [[], [], []]\nfor i in range(0, 3):\n    for j in range(0, 3):\n        number = int(input('Type a number: '))\n        matriz[i].append(number)\nprint('-'*20)\nfor i in range(0, 3):\n    print(matriz[i])\nsumEven = 0\nfor i in range(0, 3):",
        "detail": "aprendendo Python.python básico.aula018.exer087",
        "documentation": {}
    },
    {
        "label": "sumEven",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer087",
        "description": "aprendendo Python.python básico.aula018.exer087",
        "peekOfCode": "sumEven = 0\nfor i in range(0, 3):\n    for j in range(0, 3):\n        if matriz[i][j] % 2 == 0:\n            sumEven += matriz[i][j]\nprint(f'Even sum = {sumEven}')\nsum3 = 0\nfor i in range(0, 3):\n    sum3 += matriz[i][2]\nprint(f'3° column sum = {sum3}')",
        "detail": "aprendendo Python.python básico.aula018.exer087",
        "documentation": {}
    },
    {
        "label": "sum3",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer087",
        "description": "aprendendo Python.python básico.aula018.exer087",
        "peekOfCode": "sum3 = 0\nfor i in range(0, 3):\n    sum3 += matriz[i][2]\nprint(f'3° column sum = {sum3}')\nbiggest2column = 0\nfor j in range(0, 3):\n    if j == 0 or biggest2column < matriz[1][j]:\n        biggest2column = matriz[1][j]\nprint(f'Biggest of 2° column = {biggest2column}')\nprint('-'*20)",
        "detail": "aprendendo Python.python básico.aula018.exer087",
        "documentation": {}
    },
    {
        "label": "biggest2column",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer087",
        "description": "aprendendo Python.python básico.aula018.exer087",
        "peekOfCode": "biggest2column = 0\nfor j in range(0, 3):\n    if j == 0 or biggest2column < matriz[1][j]:\n        biggest2column = matriz[1][j]\nprint(f'Biggest of 2° column = {biggest2column}')\nprint('-'*20)\nprint('END')",
        "detail": "aprendendo Python.python básico.aula018.exer087",
        "documentation": {}
    },
    {
        "label": "guesses",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer088",
        "description": "aprendendo Python.python básico.aula018.exer088",
        "peekOfCode": "guesses = int(input('Type the number of guesses: '))\nnumbers = []\nprint('{} {:^35} {}'.format('\\033[0:32m', 'Prize draw', '\\033[m'))\nprint('-'*40)\nfor i in range(0, guesses):\n    sleep(1)\n    guess = []\n    count = 0\n    while True:\n        number = randint(1, 60)",
        "detail": "aprendendo Python.python básico.aula018.exer088",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer088",
        "description": "aprendendo Python.python básico.aula018.exer088",
        "peekOfCode": "numbers = []\nprint('{} {:^35} {}'.format('\\033[0:32m', 'Prize draw', '\\033[m'))\nprint('-'*40)\nfor i in range(0, guesses):\n    sleep(1)\n    guess = []\n    count = 0\n    while True:\n        number = randint(1, 60)\n        if number not in guess:",
        "detail": "aprendendo Python.python básico.aula018.exer088",
        "documentation": {}
    },
    {
        "label": "confirmation",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer089",
        "description": "aprendendo Python.python básico.aula018.exer089",
        "peekOfCode": "confirmation = ''\nschool = []\nwhile True:\n    students = []\n    name = str(input('Type your name: '))\n    students.append(name)\n    score = []\n    for i in range(0, 2):\n        score.append(float(input(f'Type your test score {i+1}: ')))\n    students.append(score[:])",
        "detail": "aprendendo Python.python básico.aula018.exer089",
        "documentation": {}
    },
    {
        "label": "school",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula018.exer089",
        "description": "aprendendo Python.python básico.aula018.exer089",
        "peekOfCode": "school = []\nwhile True:\n    students = []\n    name = str(input('Type your name: '))\n    students.append(name)\n    score = []\n    for i in range(0, 2):\n        score.append(float(input(f'Type your test score {i+1}: ')))\n    students.append(score[:])\n    school.append(students[:])",
        "detail": "aprendendo Python.python básico.aula018.exer089",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer090",
        "description": "aprendendo Python.python básico.aula019.exer090",
        "peekOfCode": "data = {}\ndata['nome'] = str(input('Type your name: '))\ndata['media'] = float(input('Type your average: '))\nif data['media'] < 7:\n    data['situação'] = 'reprovado'\nelse:\n    data['situação'] = 'aprovado'\nprint('O aluno {} tem media {} e está {}'.format(data['nome'], data['media'], data['situação']))",
        "detail": "aprendendo Python.python básico.aula019.exer090",
        "documentation": {}
    },
    {
        "label": "data['nome']",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer090",
        "description": "aprendendo Python.python básico.aula019.exer090",
        "peekOfCode": "data['nome'] = str(input('Type your name: '))\ndata['media'] = float(input('Type your average: '))\nif data['media'] < 7:\n    data['situação'] = 'reprovado'\nelse:\n    data['situação'] = 'aprovado'\nprint('O aluno {} tem media {} e está {}'.format(data['nome'], data['media'], data['situação']))",
        "detail": "aprendendo Python.python básico.aula019.exer090",
        "documentation": {}
    },
    {
        "label": "data['media']",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer090",
        "description": "aprendendo Python.python básico.aula019.exer090",
        "peekOfCode": "data['media'] = float(input('Type your average: '))\nif data['media'] < 7:\n    data['situação'] = 'reprovado'\nelse:\n    data['situação'] = 'aprovado'\nprint('O aluno {} tem media {} e está {}'.format(data['nome'], data['media'], data['situação']))",
        "detail": "aprendendo Python.python básico.aula019.exer090",
        "documentation": {}
    },
    {
        "label": "dado",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer091",
        "description": "aprendendo Python.python básico.aula019.exer091",
        "peekOfCode": "dado = {}\nfor i in range(0, 4):\n    dado[i] = {'jogador': i+1, 'number': randint(1, 6)}\n    print('O {}° tirou {}'.format(dado[i]['jogador'], dado[i]['number']))\nfor i in range(0, 4):\n    for j in range(0, 4):\n        if dado[i]['number'] > dado[j]['number']:\n            troca = dado[i]\n            dado[i] = dado[j]\n            dado[j] = troca",
        "detail": "aprendendo Python.python básico.aula019.exer091",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer092",
        "description": "aprendendo Python.python básico.aula019.exer092",
        "peekOfCode": "year = date.today().year\ndata = {'name': str(input('Type your name: ')),\n        'age': year - int(input('type your year of birth: ')),\n        'carteira': int(input('Id da carteira de trabalho: '))}\nif data['carteira'] != 0:\n    data['year of contract'] = int(input('Qual o ano da contratação: '))\n    data['salario'] = float(input('Salary: $'))\nprint('Name: {}'.format(data['name']))\nprint('Age: {}'.format(data['age']))\nprint('id carteira: {}'.format(data['carteira']))",
        "detail": "aprendendo Python.python básico.aula019.exer092",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer092",
        "description": "aprendendo Python.python básico.aula019.exer092",
        "peekOfCode": "data = {'name': str(input('Type your name: ')),\n        'age': year - int(input('type your year of birth: ')),\n        'carteira': int(input('Id da carteira de trabalho: '))}\nif data['carteira'] != 0:\n    data['year of contract'] = int(input('Qual o ano da contratação: '))\n    data['salario'] = float(input('Salary: $'))\nprint('Name: {}'.format(data['name']))\nprint('Age: {}'.format(data['age']))\nprint('id carteira: {}'.format(data['carteira']))\nif data['carteira'] != 0:",
        "detail": "aprendendo Python.python básico.aula019.exer092",
        "documentation": {}
    },
    {
        "label": "jogador",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer093",
        "description": "aprendendo Python.python básico.aula019.exer093",
        "peekOfCode": "jogador = dict()\npartidas = list()\njogador['nome'] = str(input('Nome:'))\njogos = int(input('Quantas partidas jogadas: '))\nfor i in range(0, jogos):\n    partidas.append(int(input(f'Quantos gols na {i+1}° partidas: ')))\njogador['gols'] = partidas[:]\njogador['total'] = sum(jogador['gols'])\nprint(jogador)\nfor i, j in jogador.items():",
        "detail": "aprendendo Python.python básico.aula019.exer093",
        "documentation": {}
    },
    {
        "label": "partidas",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer093",
        "description": "aprendendo Python.python básico.aula019.exer093",
        "peekOfCode": "partidas = list()\njogador['nome'] = str(input('Nome:'))\njogos = int(input('Quantas partidas jogadas: '))\nfor i in range(0, jogos):\n    partidas.append(int(input(f'Quantos gols na {i+1}° partidas: ')))\njogador['gols'] = partidas[:]\njogador['total'] = sum(jogador['gols'])\nprint(jogador)\nfor i, j in jogador.items():\n    print(f'O {i} tem valor {j}')",
        "detail": "aprendendo Python.python básico.aula019.exer093",
        "documentation": {}
    },
    {
        "label": "jogador['nome']",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer093",
        "description": "aprendendo Python.python básico.aula019.exer093",
        "peekOfCode": "jogador['nome'] = str(input('Nome:'))\njogos = int(input('Quantas partidas jogadas: '))\nfor i in range(0, jogos):\n    partidas.append(int(input(f'Quantos gols na {i+1}° partidas: ')))\njogador['gols'] = partidas[:]\njogador['total'] = sum(jogador['gols'])\nprint(jogador)\nfor i, j in jogador.items():\n    print(f'O {i} tem valor {j}')\nprint(f'O jogador {jogador[\"nome\"]} jogou {len(jogador[\"gols\"])} partidas')",
        "detail": "aprendendo Python.python básico.aula019.exer093",
        "documentation": {}
    },
    {
        "label": "jogos",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer093",
        "description": "aprendendo Python.python básico.aula019.exer093",
        "peekOfCode": "jogos = int(input('Quantas partidas jogadas: '))\nfor i in range(0, jogos):\n    partidas.append(int(input(f'Quantos gols na {i+1}° partidas: ')))\njogador['gols'] = partidas[:]\njogador['total'] = sum(jogador['gols'])\nprint(jogador)\nfor i, j in jogador.items():\n    print(f'O {i} tem valor {j}')\nprint(f'O jogador {jogador[\"nome\"]} jogou {len(jogador[\"gols\"])} partidas')\nfor i , j in enumerate(jogador['gols']):",
        "detail": "aprendendo Python.python básico.aula019.exer093",
        "documentation": {}
    },
    {
        "label": "jogador['gols']",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer093",
        "description": "aprendendo Python.python básico.aula019.exer093",
        "peekOfCode": "jogador['gols'] = partidas[:]\njogador['total'] = sum(jogador['gols'])\nprint(jogador)\nfor i, j in jogador.items():\n    print(f'O {i} tem valor {j}')\nprint(f'O jogador {jogador[\"nome\"]} jogou {len(jogador[\"gols\"])} partidas')\nfor i , j in enumerate(jogador['gols']):\n    print(f'Na partida {i} foi {j} gols')\nprint(f'O total de gols é {jogador[\"total\"]}')\n# data = {'nome': str(input('Digite o seu nome: ')),",
        "detail": "aprendendo Python.python básico.aula019.exer093",
        "documentation": {}
    },
    {
        "label": "jogador['total']",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer093",
        "description": "aprendendo Python.python básico.aula019.exer093",
        "peekOfCode": "jogador['total'] = sum(jogador['gols'])\nprint(jogador)\nfor i, j in jogador.items():\n    print(f'O {i} tem valor {j}')\nprint(f'O jogador {jogador[\"nome\"]} jogou {len(jogador[\"gols\"])} partidas')\nfor i , j in enumerate(jogador['gols']):\n    print(f'Na partida {i} foi {j} gols')\nprint(f'O total de gols é {jogador[\"total\"]}')\n# data = {'nome': str(input('Digite o seu nome: ')),\n#         'jogos': int(input('Digite a quantidade de jogos: ')),",
        "detail": "aprendendo Python.python básico.aula019.exer093",
        "documentation": {}
    },
    {
        "label": "confirmation",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer094",
        "description": "aprendendo Python.python básico.aula019.exer094",
        "peekOfCode": "confirmation = 0\ndata = {}\ncount = 0\nwhile True:\n    data[count] = {}\n    data[count]['name'] = str(input('Type your name: ')).strip()\n    data[count]['sex'] = str(input('Type your sex, W/M: ')).strip().upper()[0]\n    data[count]['age'] = int(input('Type you age: '))\n    count += 1\n    confirmation = str(input('Would you like to continue, Y/N: '))",
        "detail": "aprendendo Python.python básico.aula019.exer094",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer094",
        "description": "aprendendo Python.python básico.aula019.exer094",
        "peekOfCode": "data = {}\ncount = 0\nwhile True:\n    data[count] = {}\n    data[count]['name'] = str(input('Type your name: ')).strip()\n    data[count]['sex'] = str(input('Type your sex, W/M: ')).strip().upper()[0]\n    data[count]['age'] = int(input('Type you age: '))\n    count += 1\n    confirmation = str(input('Would you like to continue, Y/N: '))\n    if confirmation in 'Nn':",
        "detail": "aprendendo Python.python básico.aula019.exer094",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer094",
        "description": "aprendendo Python.python básico.aula019.exer094",
        "peekOfCode": "count = 0\nwhile True:\n    data[count] = {}\n    data[count]['name'] = str(input('Type your name: ')).strip()\n    data[count]['sex'] = str(input('Type your sex, W/M: ')).strip().upper()[0]\n    data[count]['age'] = int(input('Type you age: '))\n    count += 1\n    confirmation = str(input('Would you like to continue, Y/N: '))\n    if confirmation in 'Nn':\n        break",
        "detail": "aprendendo Python.python básico.aula019.exer094",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer094",
        "description": "aprendendo Python.python básico.aula019.exer094",
        "peekOfCode": "soma = 0\nwoman = []\nfor i in range(0, count):\n    soma += data[i]['age']\n    if data[i]['sex'] in 'W':\n        woman.append(data[i]['name'])\nageOverAverage = []\nageAverage = soma/count\nfor i in range(0, count):\n    if data[i]['age'] > ageAverage:",
        "detail": "aprendendo Python.python básico.aula019.exer094",
        "documentation": {}
    },
    {
        "label": "woman",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer094",
        "description": "aprendendo Python.python básico.aula019.exer094",
        "peekOfCode": "woman = []\nfor i in range(0, count):\n    soma += data[i]['age']\n    if data[i]['sex'] in 'W':\n        woman.append(data[i]['name'])\nageOverAverage = []\nageAverage = soma/count\nfor i in range(0, count):\n    if data[i]['age'] > ageAverage:\n        ageOverAverage.append(data[i])",
        "detail": "aprendendo Python.python básico.aula019.exer094",
        "documentation": {}
    },
    {
        "label": "ageOverAverage",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer094",
        "description": "aprendendo Python.python básico.aula019.exer094",
        "peekOfCode": "ageOverAverage = []\nageAverage = soma/count\nfor i in range(0, count):\n    if data[i]['age'] > ageAverage:\n        ageOverAverage.append(data[i])\nfor person in ageOverAverage:\n    print(f'A pessoa {person[\"name\"]} do sexo {person[\"sex\"]} de idade',\n          f'{person[\"age\"]} tem idade acima da media')\nprint(woman)\nprint(f'A media de idade é {ageAverage}')",
        "detail": "aprendendo Python.python básico.aula019.exer094",
        "documentation": {}
    },
    {
        "label": "ageAverage",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer094",
        "description": "aprendendo Python.python básico.aula019.exer094",
        "peekOfCode": "ageAverage = soma/count\nfor i in range(0, count):\n    if data[i]['age'] > ageAverage:\n        ageOverAverage.append(data[i])\nfor person in ageOverAverage:\n    print(f'A pessoa {person[\"name\"]} do sexo {person[\"sex\"]} de idade',\n          f'{person[\"age\"]} tem idade acima da media')\nprint(woman)\nprint(f'A media de idade é {ageAverage}')\nprint(f'{count} pessoas cadastradas')",
        "detail": "aprendendo Python.python básico.aula019.exer094",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer095",
        "description": "aprendendo Python.python básico.aula019.exer095",
        "peekOfCode": "time = []\njogador = dict()\npartidas = list()\nwhile True:\n    jogador['nome'] = str(input('Nome:'))\n    jogos = int(input('Quantas partidas jogadas: '))\n    partidas.clear()\n    for i in range(0, jogos):\n        partidas.append(int(input(f'Quantos gols na {i+1}° partidas: ')))\n    jogador['gols'] = partidas[:]",
        "detail": "aprendendo Python.python básico.aula019.exer095",
        "documentation": {}
    },
    {
        "label": "jogador",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer095",
        "description": "aprendendo Python.python básico.aula019.exer095",
        "peekOfCode": "jogador = dict()\npartidas = list()\nwhile True:\n    jogador['nome'] = str(input('Nome:'))\n    jogos = int(input('Quantas partidas jogadas: '))\n    partidas.clear()\n    for i in range(0, jogos):\n        partidas.append(int(input(f'Quantos gols na {i+1}° partidas: ')))\n    jogador['gols'] = partidas[:]\n    jogador['total'] = sum(jogador['gols'])",
        "detail": "aprendendo Python.python básico.aula019.exer095",
        "documentation": {}
    },
    {
        "label": "partidas",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula019.exer095",
        "description": "aprendendo Python.python básico.aula019.exer095",
        "peekOfCode": "partidas = list()\nwhile True:\n    jogador['nome'] = str(input('Nome:'))\n    jogos = int(input('Quantas partidas jogadas: '))\n    partidas.clear()\n    for i in range(0, jogos):\n        partidas.append(int(input(f'Quantos gols na {i+1}° partidas: ')))\n    jogador['gols'] = partidas[:]\n    jogador['total'] = sum(jogador['gols'])\n    time.append(jogador.copy())",
        "detail": "aprendendo Python.python básico.aula019.exer095",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer096",
        "description": "aprendendo Python.python básico.aula020.exer096",
        "peekOfCode": "def header(phase):\n    width = 50\n    print('-'*width)\n    print(f'{phase:^50}')\n    print('-'*width)\ndef area(width, height):\n    print('A área do terreno é {} metros quadrados'.format(width*height))\nheader('Área do terreno')\nlargura = float(input('Largura em metros: '))\naltura = float(input('Altura em metros: '))",
        "detail": "aprendendo Python.python básico.aula020.exer096",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer096",
        "description": "aprendendo Python.python básico.aula020.exer096",
        "peekOfCode": "def area(width, height):\n    print('A área do terreno é {} metros quadrados'.format(width*height))\nheader('Área do terreno')\nlargura = float(input('Largura em metros: '))\naltura = float(input('Altura em metros: '))\narea(largura, altura)",
        "detail": "aprendendo Python.python básico.aula020.exer096",
        "documentation": {}
    },
    {
        "label": "largura",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer096",
        "description": "aprendendo Python.python básico.aula020.exer096",
        "peekOfCode": "largura = float(input('Largura em metros: '))\naltura = float(input('Altura em metros: '))\narea(largura, altura)",
        "detail": "aprendendo Python.python básico.aula020.exer096",
        "documentation": {}
    },
    {
        "label": "altura",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer096",
        "description": "aprendendo Python.python básico.aula020.exer096",
        "peekOfCode": "altura = float(input('Altura em metros: '))\narea(largura, altura)",
        "detail": "aprendendo Python.python básico.aula020.exer096",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer097",
        "description": "aprendendo Python.python básico.aula020.exer097",
        "peekOfCode": "def header(phase):\n    add = 10\n    width = len(phase) + add\n    print('-'*width)\n    print(' ' * (add//2), end='')\n    print(f'{phase}', end='')\n    print(' ' * (add//2))\n    print('-'*width)\n# Main program\nheader('Hello world!')",
        "detail": "aprendendo Python.python básico.aula020.exer097",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer098",
        "description": "aprendendo Python.python básico.aula020.exer098",
        "peekOfCode": "def header(phase):\n    add = 10\n    width = len(phase) + add\n    print('-'*width)\n    print(' ' * (add//2), end='')\n    print(f'{phase}', end='')\n    print(' ' * (add//2))\n    print('-'*width)\ndef contador(inicio, fim, passo):\n    if passo == 0:",
        "detail": "aprendendo Python.python básico.aula020.exer098",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer098",
        "description": "aprendendo Python.python básico.aula020.exer098",
        "peekOfCode": "def contador(inicio, fim, passo):\n    if passo == 0:\n        passo = 1\n    passo = abs(passo)\n    if fim > inicio:\n        for i in range(inicio, fim + 1, passo):\n            sleep(0.5)\n            print(i, end=' -> ')\n    else:\n        for i in range(inicio, fim - 1, passo * -1):",
        "detail": "aprendendo Python.python básico.aula020.exer098",
        "documentation": {}
    },
    {
        "label": "inicioU",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer098",
        "description": "aprendendo Python.python básico.aula020.exer098",
        "peekOfCode": "inicioU = int(input('digite o inicio da contagem: '))\nfimU = int(input('Digite o fim da contagem: '))\npassoU = int(input('Digite o tamanho do passo da contagem: '))\ncontador(inicioU, fimU, passoU)",
        "detail": "aprendendo Python.python básico.aula020.exer098",
        "documentation": {}
    },
    {
        "label": "fimU",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer098",
        "description": "aprendendo Python.python básico.aula020.exer098",
        "peekOfCode": "fimU = int(input('Digite o fim da contagem: '))\npassoU = int(input('Digite o tamanho do passo da contagem: '))\ncontador(inicioU, fimU, passoU)",
        "detail": "aprendendo Python.python básico.aula020.exer098",
        "documentation": {}
    },
    {
        "label": "passoU",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer098",
        "description": "aprendendo Python.python básico.aula020.exer098",
        "peekOfCode": "passoU = int(input('Digite o tamanho do passo da contagem: '))\ncontador(inicioU, fimU, passoU)",
        "detail": "aprendendo Python.python básico.aula020.exer098",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer099",
        "description": "aprendendo Python.python básico.aula020.exer099",
        "peekOfCode": "def header(phase):\n    add = 10\n    width = len(phase) + add\n    print('-'*width)\n    print(' ' * (add//2), end='')\n    print(f'{phase}', end='')\n    print(' ' * (add//2))\n    print('-'*width)\ndef maior(* nums):\n    biggest = 0",
        "detail": "aprendendo Python.python básico.aula020.exer099",
        "documentation": {}
    },
    {
        "label": "maior",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer099",
        "description": "aprendendo Python.python básico.aula020.exer099",
        "peekOfCode": "def maior(* nums):\n    biggest = 0\n    for i, number in enumerate(nums):\n        if i == 0 or number > biggest:\n            biggest = number\n    return biggest\n# Main program\nheader('Maior')\nbig = maior(1, 2, 3, 4)\nprint(f'O maio foi {big}')",
        "detail": "aprendendo Python.python básico.aula020.exer099",
        "documentation": {}
    },
    {
        "label": "big",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer099",
        "description": "aprendendo Python.python básico.aula020.exer099",
        "peekOfCode": "big = maior(1, 2, 3, 4)\nprint(f'O maio foi {big}')\nbig = maior(1, 2, 3)\nprint(f'O maio foi {big}')\nbig = maior()\nprint(f'O maio foi {big}')",
        "detail": "aprendendo Python.python básico.aula020.exer099",
        "documentation": {}
    },
    {
        "label": "big",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer099",
        "description": "aprendendo Python.python básico.aula020.exer099",
        "peekOfCode": "big = maior(1, 2, 3)\nprint(f'O maio foi {big}')\nbig = maior()\nprint(f'O maio foi {big}')",
        "detail": "aprendendo Python.python básico.aula020.exer099",
        "documentation": {}
    },
    {
        "label": "big",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer099",
        "description": "aprendendo Python.python básico.aula020.exer099",
        "peekOfCode": "big = maior()\nprint(f'O maio foi {big}')\n# def maior(nums):\n#     biggest = 0",
        "detail": "aprendendo Python.python básico.aula020.exer099",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer100",
        "description": "aprendendo Python.python básico.aula020.exer100",
        "peekOfCode": "def header(phase):\n    add = 10\n    width = len(phase) + add\n    print('-'*width)\n    print(' ' * (add//2), end='')\n    print(f'{phase}', end='')\n    print(' ' * (add//2))\n    print('-'*width)\ndef sorteio(number):\n    for i in range(0, 5):",
        "detail": "aprendendo Python.python básico.aula020.exer100",
        "documentation": {}
    },
    {
        "label": "sorteio",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer100",
        "description": "aprendendo Python.python básico.aula020.exer100",
        "peekOfCode": "def sorteio(number):\n    for i in range(0, 5):\n        number.append(randint(1, 100))\ndef somapar(listnumber):\n    soma = 0\n    for i in listnumber:\n        if i % 2 == 0:\n            soma += i\n    return soma\n# Main Program",
        "detail": "aprendendo Python.python básico.aula020.exer100",
        "documentation": {}
    },
    {
        "label": "somapar",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula020.exer100",
        "description": "aprendendo Python.python básico.aula020.exer100",
        "peekOfCode": "def somapar(listnumber):\n    soma = 0\n    for i in listnumber:\n        if i % 2 == 0:\n            soma += i\n    return soma\n# Main Program\nheader('Soma dos pares sorteados')\nnum = []\nsorteio(num)",
        "detail": "aprendendo Python.python básico.aula020.exer100",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer100",
        "description": "aprendendo Python.python básico.aula020.exer100",
        "peekOfCode": "num = []\nsorteio(num)\nprint(num)\nsomaP = somapar(num)\nprint(f'A soma dos números pares é {somaP}')",
        "detail": "aprendendo Python.python básico.aula020.exer100",
        "documentation": {}
    },
    {
        "label": "somaP",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula020.exer100",
        "description": "aprendendo Python.python básico.aula020.exer100",
        "peekOfCode": "somaP = somapar(num)\nprint(f'A soma dos números pares é {somaP}')",
        "detail": "aprendendo Python.python básico.aula020.exer100",
        "documentation": {}
    },
    {
        "label": "voto",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula021.exer101",
        "description": "aprendendo Python.python básico.aula021.exer101",
        "peekOfCode": "def voto(yearofbirth):\n    from datetime import date\n    year = date.today().year\n    idade = year - yearofbirth\n    if idade < 16:\n        return 'Voto negado'\n    elif 18 <= idade <= 70:\n        return 'Voto obrigatório'\n    else:\n        return 'Voto opcional'",
        "detail": "aprendendo Python.python básico.aula021.exer101",
        "documentation": {}
    },
    {
        "label": "voto",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula021.exer101",
        "description": "aprendendo Python.python básico.aula021.exer101",
        "peekOfCode": "voto = voto(int(input('Digite seu ano de nascimento: ')))\nprint(voto)",
        "detail": "aprendendo Python.python básico.aula021.exer101",
        "documentation": {}
    },
    {
        "label": "fatorial",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula021.exer102",
        "description": "aprendendo Python.python básico.aula021.exer102",
        "peekOfCode": "def fatorial(number=1, show=False):\n    \"\"\"\n    -> Faz o calculo do fatorial de um número\n    :param number: número o qual vai ter o seu fatorial\n    :param show: variável (opicional) para mostrar o processo do calculo\n    :return: o valor do fatorial\n    \"\"\"\n    fat = 1\n    for i in range(number, 0, -1):\n        fat *= i",
        "detail": "aprendendo Python.python básico.aula021.exer102",
        "documentation": {}
    },
    {
        "label": "ficha",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula021.exer103",
        "description": "aprendendo Python.python básico.aula021.exer103",
        "peekOfCode": "def ficha(nome='<desconhecido>', gols=0):\n    print(f'O jogador {nome} fez {gols} no campeonato')\n# Main program\nname = str(input('Type your name: '))\ng = str(input('Type the number of gols: '))\nif g == '':\n    if name == '':\n        ficha()\n    else:\n        ficha(name)",
        "detail": "aprendendo Python.python básico.aula021.exer103",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula021.exer103",
        "description": "aprendendo Python.python básico.aula021.exer103",
        "peekOfCode": "name = str(input('Type your name: '))\ng = str(input('Type the number of gols: '))\nif g == '':\n    if name == '':\n        ficha()\n    else:\n        ficha(name)\nelse:\n    g = int(g)\n    if name == '':",
        "detail": "aprendendo Python.python básico.aula021.exer103",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula021.exer103",
        "description": "aprendendo Python.python básico.aula021.exer103",
        "peekOfCode": "g = str(input('Type the number of gols: '))\nif g == '':\n    if name == '':\n        ficha()\n    else:\n        ficha(name)\nelse:\n    g = int(g)\n    if name == '':\n        ficha(gols=g)",
        "detail": "aprendendo Python.python básico.aula021.exer103",
        "documentation": {}
    },
    {
        "label": "leiaint",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula021.exer104",
        "description": "aprendendo Python.python básico.aula021.exer104",
        "peekOfCode": "def leiaint(phase):\n    while True:\n        numtext = input(phase)\n        if numtext.isnumeric():\n            return numtext\n        else:\n            print('Erro, não é númerico')\n# Main program\nnum = leiaint('digite um número: ')\nprint(f'O número digitado é {num}')",
        "detail": "aprendendo Python.python básico.aula021.exer104",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula021.exer104",
        "description": "aprendendo Python.python básico.aula021.exer104",
        "peekOfCode": "num = leiaint('digite um número: ')\nprint(f'O número digitado é {num}')",
        "detail": "aprendendo Python.python básico.aula021.exer104",
        "documentation": {}
    },
    {
        "label": "notas",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula021.exer105",
        "description": "aprendendo Python.python básico.aula021.exer105",
        "peekOfCode": "def notas(* numbers, situation=False):\n    \"\"\"\n    -> sintetiza informações de um turma de alunos sobre suas notas\n    :param numbers: as notas dos alunos\n    :param situation: falso - não que mostrar a situação da turma e True - mostra a situação\n    :return: retonar um dicionário com as informações sintetizada.\n    \"\"\"\n    smaller = biggest = count = soma = 0\n    for i, num in enumerate(numbers):\n        soma += num",
        "detail": "aprendendo Python.python básico.aula021.exer105",
        "documentation": {}
    },
    {
        "label": "dic",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula021.exer105",
        "description": "aprendendo Python.python básico.aula021.exer105",
        "peekOfCode": "dic = notas(1, 2, 3, 4, 5, situation=False)\nfor k, v in dic.items():\n    print(f'A {k} é {v}')\nhelp(notas)",
        "detail": "aprendendo Python.python básico.aula021.exer105",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula021.exer106",
        "description": "aprendendo Python.python básico.aula021.exer106",
        "peekOfCode": "def header(phase, cor):\n    print(cor, end='')\n    add = 10\n    width = len(phase) + add\n    print('-'*width)\n    print(' ' * (add//2), end='')\n    print(f'{phase}', end='')\n    print(' ' * (add//2))\n    print('-'*width)\n    print('\\033[m')",
        "detail": "aprendendo Python.python básico.aula021.exer106",
        "documentation": {}
    },
    {
        "label": "pesquisa",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula021.exer106",
        "description": "aprendendo Python.python básico.aula021.exer106",
        "peekOfCode": "def pesquisa(nome):\n    text = 'Acessando o manual do comando ' + nome\n    header(text, '\\033[0:44m')\n    print('\\033[7m')\n    help(nome)\n    print('\\033[m')\n# Main program\nheader('Ajuda o help do python', '\\033[0:42m')\nwhile True:\n    search = str(input('Função ou bibloteca: ')).strip().lower()",
        "detail": "aprendendo Python.python básico.aula021.exer106",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula022.exer107.exer107",
        "description": "aprendendo Python.python básico.aula022.exer107.exer107",
        "peekOfCode": "valor = 500\nprint(f'Um aumento de {20}% em {valor} é {moeda.aumentar(valor, 20)}')\nprint(f'Uma redução de {10}% em {valor} é {moeda.diminuir(valor, 10)}')\nprint(f'O dobro de {valor} é {moeda.dobro(valor)}')\nprint(f'A metade de {valor} é {moeda.metada(valor)}')",
        "detail": "aprendendo Python.python básico.aula022.exer107.exer107",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer107.moeda",
        "description": "aprendendo Python.python básico.aula022.exer107.moeda",
        "peekOfCode": "def aumentar(valor, aumento):\n    resultado = valor * (1 + (aumento/100))\n    return resultado\ndef diminuir(valor, reduz):\n    resultado = valor * (1 - (reduz/100))\n    return resultado\ndef dobro(valor):\n    resultado = valor * 2\n    return resultado\ndef metada(valor):",
        "detail": "aprendendo Python.python básico.aula022.exer107.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer107.moeda",
        "description": "aprendendo Python.python básico.aula022.exer107.moeda",
        "peekOfCode": "def diminuir(valor, reduz):\n    resultado = valor * (1 - (reduz/100))\n    return resultado\ndef dobro(valor):\n    resultado = valor * 2\n    return resultado\ndef metada(valor):\n    resultado = valor * 0.5\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer107.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer107.moeda",
        "description": "aprendendo Python.python básico.aula022.exer107.moeda",
        "peekOfCode": "def dobro(valor):\n    resultado = valor * 2\n    return resultado\ndef metada(valor):\n    resultado = valor * 0.5\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer107.moeda",
        "documentation": {}
    },
    {
        "label": "metada",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer107.moeda",
        "description": "aprendendo Python.python básico.aula022.exer107.moeda",
        "peekOfCode": "def metada(valor):\n    resultado = valor * 0.5\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer107.moeda",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula022.exer108.exer108",
        "description": "aprendendo Python.python básico.aula022.exer108.exer108",
        "peekOfCode": "valor = int(input('Digite um valor: '))\nprint(f'Um aumento de {20}% em {moeda.real(valor)} é {moeda.real(moeda.aumentar(valor, 20))}')\nprint(f'Uma redução de {10}% em {moeda.real(valor)} é {moeda.diminuir(valor, 10)}')\nprint(f'O dobro de {moeda.real(valor)} é {moeda.dobro(valor)}')\nprint(f'A metade de {moeda.real(valor)} é {moeda.real(moeda.metada(valor))}')\nstr(f'R$ {preço}'.replace('.', ','))",
        "detail": "aprendendo Python.python básico.aula022.exer108.exer108",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer108.moeda",
        "description": "aprendendo Python.python básico.aula022.exer108.moeda",
        "peekOfCode": "def aumentar(valor, aumento):\n    resultado = valor * (1 + (aumento/100))\n    return resultado\ndef diminuir(valor, reduz):\n    resultado = valor * (1 - (reduz/100))\n    return resultado\ndef dobro(valor):\n    resultado = valor * 2\n    return resultado\ndef metada(valor):",
        "detail": "aprendendo Python.python básico.aula022.exer108.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer108.moeda",
        "description": "aprendendo Python.python básico.aula022.exer108.moeda",
        "peekOfCode": "def diminuir(valor, reduz):\n    resultado = valor * (1 - (reduz/100))\n    return resultado\ndef dobro(valor):\n    resultado = valor * 2\n    return resultado\ndef metada(valor):\n    resultado = valor * 0.5\n    return resultado\ndef real(valor):",
        "detail": "aprendendo Python.python básico.aula022.exer108.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer108.moeda",
        "description": "aprendendo Python.python básico.aula022.exer108.moeda",
        "peekOfCode": "def dobro(valor):\n    resultado = valor * 2\n    return resultado\ndef metada(valor):\n    resultado = valor * 0.5\n    return resultado\ndef real(valor):\n    return str(f'R$ {valor:.2f}')",
        "detail": "aprendendo Python.python básico.aula022.exer108.moeda",
        "documentation": {}
    },
    {
        "label": "metada",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer108.moeda",
        "description": "aprendendo Python.python básico.aula022.exer108.moeda",
        "peekOfCode": "def metada(valor):\n    resultado = valor * 0.5\n    return resultado\ndef real(valor):\n    return str(f'R$ {valor:.2f}')",
        "detail": "aprendendo Python.python básico.aula022.exer108.moeda",
        "documentation": {}
    },
    {
        "label": "real",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer108.moeda",
        "description": "aprendendo Python.python básico.aula022.exer108.moeda",
        "peekOfCode": "def real(valor):\n    return str(f'R$ {valor:.2f}')",
        "detail": "aprendendo Python.python básico.aula022.exer108.moeda",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula022.exer109.exer109",
        "description": "aprendendo Python.python básico.aula022.exer109.exer109",
        "peekOfCode": "valor = int(input('Digite um valor: '))\nprint(f'Um aumento de {20}% em {moeda.real(valor)} é {moeda.aumentar(valor, 20, True)}')\nprint(f'Uma redução de {10}% em {moeda.real(valor)} é {moeda.diminuir(valor, 10, True)}')\nprint(f'O dobro de {moeda.real(valor)} é {moeda.dobro(valor, True)}')\nprint(f'A metade de {moeda.real(valor)} é {moeda.metada(valor, True)}')",
        "detail": "aprendendo Python.python básico.aula022.exer109.exer109",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer109.moeda",
        "description": "aprendendo Python.python básico.aula022.exer109.moeda",
        "peekOfCode": "def aumentar(valor, aumento, formatado=False):\n    resultado = valor * (1 + (aumento/100))\n    if formatado:\n        return real(resultado)\n    return resultado\ndef diminuir(valor, reduz, formatado=False):\n    resultado = valor * (1 - (reduz/100))\n    if formatado:\n        return real(resultado)\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer109.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer109.moeda",
        "description": "aprendendo Python.python básico.aula022.exer109.moeda",
        "peekOfCode": "def diminuir(valor, reduz, formatado=False):\n    resultado = valor * (1 - (reduz/100))\n    if formatado:\n        return real(resultado)\n    return resultado\ndef dobro(valor, formatado=False):\n    resultado = valor * 2\n    if formatado:\n        return real(resultado)\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer109.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer109.moeda",
        "description": "aprendendo Python.python básico.aula022.exer109.moeda",
        "peekOfCode": "def dobro(valor, formatado=False):\n    resultado = valor * 2\n    if formatado:\n        return real(resultado)\n    return resultado\ndef metada(valor, formatado=False):\n    resultado = valor * 0.5\n    if formatado:\n        return real(resultado)\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer109.moeda",
        "documentation": {}
    },
    {
        "label": "metada",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer109.moeda",
        "description": "aprendendo Python.python básico.aula022.exer109.moeda",
        "peekOfCode": "def metada(valor, formatado=False):\n    resultado = valor * 0.5\n    if formatado:\n        return real(resultado)\n    return resultado\ndef real(valor):\n    return str(f'R$ {valor:.2f}')",
        "detail": "aprendendo Python.python básico.aula022.exer109.moeda",
        "documentation": {}
    },
    {
        "label": "real",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer109.moeda",
        "description": "aprendendo Python.python básico.aula022.exer109.moeda",
        "peekOfCode": "def real(valor):\n    return str(f'R$ {valor:.2f}')",
        "detail": "aprendendo Python.python básico.aula022.exer109.moeda",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula022.exer110.exer110",
        "description": "aprendendo Python.python básico.aula022.exer110.exer110",
        "peekOfCode": "valor = float(input('Digite um valor: '))\nmoeda.resumo(valor)",
        "detail": "aprendendo Python.python básico.aula022.exer110.exer110",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer110.moeda",
        "description": "aprendendo Python.python básico.aula022.exer110.moeda",
        "peekOfCode": "def header(phase):\n    add = 10\n    width = len(phase) + add\n    print('-'*width)\n    print(' ' * (add//2), end='')\n    print(f'{phase}', end='')\n    print(' ' * (add//2))\n    print('-'*width)\ndef aumentar(valor, aumento, formatado=False):\n    resultado = valor * (1 + (aumento/100))",
        "detail": "aprendendo Python.python básico.aula022.exer110.moeda",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer110.moeda",
        "description": "aprendendo Python.python básico.aula022.exer110.moeda",
        "peekOfCode": "def aumentar(valor, aumento, formatado=False):\n    resultado = valor * (1 + (aumento/100))\n    if formatado:\n        return real(resultado)\n    return resultado\ndef diminuir(valor, reduz, formatado=False):\n    resultado = valor * (1 - (reduz/100))\n    if formatado:\n        return real(resultado)\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer110.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer110.moeda",
        "description": "aprendendo Python.python básico.aula022.exer110.moeda",
        "peekOfCode": "def diminuir(valor, reduz, formatado=False):\n    resultado = valor * (1 - (reduz/100))\n    if formatado:\n        return real(resultado)\n    return resultado\ndef dobro(valor, formatado=False):\n    resultado = valor * 2\n    if formatado:\n        return real(resultado)\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer110.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer110.moeda",
        "description": "aprendendo Python.python básico.aula022.exer110.moeda",
        "peekOfCode": "def dobro(valor, formatado=False):\n    resultado = valor * 2\n    if formatado:\n        return real(resultado)\n    return resultado\ndef metada(valor, formatado=False):\n    resultado = valor * 0.5\n    if formatado:\n        return real(resultado)\n    return resultado",
        "detail": "aprendendo Python.python básico.aula022.exer110.moeda",
        "documentation": {}
    },
    {
        "label": "metada",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer110.moeda",
        "description": "aprendendo Python.python básico.aula022.exer110.moeda",
        "peekOfCode": "def metada(valor, formatado=False):\n    resultado = valor * 0.5\n    if formatado:\n        return real(resultado)\n    return resultado\ndef real(valor):\n    return str(f'R$ {valor:.2f}')\ndef resumo(valor):\n    header('Resumo das informações')\n    print(f'{\"Valor cadastrado:\":<20} {real(valor):<10}')",
        "detail": "aprendendo Python.python básico.aula022.exer110.moeda",
        "documentation": {}
    },
    {
        "label": "real",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer110.moeda",
        "description": "aprendendo Python.python básico.aula022.exer110.moeda",
        "peekOfCode": "def real(valor):\n    return str(f'R$ {valor:.2f}')\ndef resumo(valor):\n    header('Resumo das informações')\n    print(f'{\"Valor cadastrado:\":<20} {real(valor):<10}')\n    print(f'{\"Dobro do preço:\":<20} {dobro(valor, True):<10}')\n    print(f'{\"Metade do preço:\":<20} {metada(valor, True):<10}')\n    print(f'{\"35% de aumento:\":<20} {aumentar(valor, 35, True):<10}')\n    print(f'{\"25% de redução:\":<20} {diminuir(valor, 25, True):<10}')\n    print('-'*32)",
        "detail": "aprendendo Python.python básico.aula022.exer110.moeda",
        "documentation": {}
    },
    {
        "label": "resumo",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula022.exer110.moeda",
        "description": "aprendendo Python.python básico.aula022.exer110.moeda",
        "peekOfCode": "def resumo(valor):\n    header('Resumo das informações')\n    print(f'{\"Valor cadastrado:\":<20} {real(valor):<10}')\n    print(f'{\"Dobro do preço:\":<20} {dobro(valor, True):<10}')\n    print(f'{\"Metade do preço:\":<20} {metada(valor, True):<10}')\n    print(f'{\"35% de aumento:\":<20} {aumentar(valor, 35, True):<10}')\n    print(f'{\"25% de redução:\":<20} {diminuir(valor, 25, True):<10}')\n    print('-'*32)",
        "detail": "aprendendo Python.python básico.aula022.exer110.moeda",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula022.exer111.exer111",
        "description": "aprendendo Python.python básico.aula022.exer111.exer111",
        "peekOfCode": "valor = float(input('Digite o preço: R$ '))\nmoeda.resumo(valor)",
        "detail": "aprendendo Python.python básico.aula022.exer111.exer111",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula022.exer112.exer112",
        "description": "aprendendo Python.python básico.aula022.exer112.exer112",
        "peekOfCode": "valor = dado.leiadinheiro('Digite o preço: ')\nmoeda.resumo(valor)",
        "detail": "aprendendo Python.python básico.aula022.exer112.exer112",
        "documentation": {}
    },
    {
        "label": "leiaint",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer113.auxilio",
        "description": "aprendendo Python.python básico.aula023.exer113.auxilio",
        "peekOfCode": "def leiaint(phase):\n    while True:\n        try:\n            numtext = int(input(phase))\n        except (ValueError, TypeError):\n            print('Por favor digite um número inteiro valido')\n        except KeyboardInterrupt:\n            print('\\nUsuário preferiu não digitar o valor')\n            return 0\n        except Exception as erro:",
        "detail": "aprendendo Python.python básico.aula023.exer113.auxilio",
        "documentation": {}
    },
    {
        "label": "leiareal",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer113.auxilio",
        "description": "aprendendo Python.python básico.aula023.exer113.auxilio",
        "peekOfCode": "def leiareal(phase):\n    while True:\n        try:\n            num = float(input(phase).replace(',', '.'))\n        except (ValueError, TypeError):\n            print('Por favor digite um número real valido')\n        except KeyboardInterrupt:\n            print('\\nUsuário preferiu não digitar o valor')\n            return 0\n        except Exception as erro:",
        "detail": "aprendendo Python.python básico.aula023.exer113.auxilio",
        "documentation": {}
    },
    {
        "label": "interiro",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula023.exer113.exer113",
        "description": "aprendendo Python.python básico.aula023.exer113.exer113",
        "peekOfCode": "interiro = auxilio.leiaint('Digite um número inteiro: ')\nreal = auxilio.leiareal('Digite um número real: ')\nprint(f'O valor do inteiro é {interiro} e do real é {real}')",
        "detail": "aprendendo Python.python básico.aula023.exer113.exer113",
        "documentation": {}
    },
    {
        "label": "real",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula023.exer113.exer113",
        "description": "aprendendo Python.python básico.aula023.exer113.exer113",
        "peekOfCode": "real = auxilio.leiareal('Digite um número real: ')\nprint(f'O valor do inteiro é {interiro} e do real é {real}')",
        "detail": "aprendendo Python.python básico.aula023.exer113.exer113",
        "documentation": {}
    },
    {
        "label": "arqexiste",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "description": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "peekOfCode": "def arqexiste(arq):\n    try:\n        a = open(arq, 'rt')\n        a.close()\n    except FileNotFoundError:\n        return False\n    except Exception as erro:\n        print(f'O problema foi {erro.__class__}')\n    else:\n        return True",
        "detail": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "documentation": {}
    },
    {
        "label": "criararquivo",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "description": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "peekOfCode": "def criararquivo(nome):\n    try:\n        a = open(nome, 'wt+')\n        a.close()\n    except Exception as erro:\n        print(f'Erro, o problema foi {erro.__class__}')\n    else:\n        print('O arquivo foi criado')\ndef lerarquivo(arq):\n    try:",
        "detail": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "documentation": {}
    },
    {
        "label": "lerarquivo",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "description": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "peekOfCode": "def lerarquivo(arq):\n    try:\n        a = open(arq, 'rt')\n    except Exception as erro:\n        print(f'Erro, o problema foi {erro.__class__}')\n    else:\n        for linha in a:\n            dado = linha.split(';')\n            dado[1] = dado[1].replace('\\n', '')\n            print(f'{dado[0]:<35} {dado[1]:<6}')",
        "detail": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "documentation": {}
    },
    {
        "label": "cadastrar",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "description": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "peekOfCode": "def cadastrar(arq):\n    from aula023.exer115 import auxiliar\n    nome = auxiliar.name('Digite o seu nome: ')\n    idade = auxiliar.inter('Digite a sua idade: ')\n    try:\n        a = open(arq, 'at')\n    except Exception as erro:\n        print('Erro ao abrir o arquivo')\n        print(f'O problema foi {erro.__class__}')\n    else:",
        "detail": "aprendendo Python.python básico.aula023.exer115.arquivo",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "description": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "peekOfCode": "def header(phase):\n    tamanho = len(phase) + 20\n    print('-' * tamanho)\n    print(phase.center(tamanho))\n    print('-' * tamanho)\ndef menu(* lista):\n    for i, option in enumerate(lista):\n        print(f'{i+1} - {option}')\n    print('-' * 34)\n    while True:",
        "detail": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "description": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "peekOfCode": "def menu(* lista):\n    for i, option in enumerate(lista):\n        print(f'{i+1} - {option}')\n    print('-' * 34)\n    while True:\n        num = inter('Opção: ')\n        if num < 1 or num > 3:\n            print('Erro, O valor digitado não está nas opções')\n        else:\n            return num",
        "detail": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "description": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "peekOfCode": "def name(phase):\n    while True:\n        try:\n            nome = str(input(phase)).strip()\n            if (not nome.isnumeric()) and nome != '':\n                return nome\n            else:\n                print('Erro, não deixe em branco ou deixe só número')\n        except KeyboardInterrupt:\n            print('\\nNome deixado em branco')",
        "detail": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "documentation": {}
    },
    {
        "label": "inter",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "description": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "peekOfCode": "def inter(phase):\n    while True:\n        try:\n            num = int(input(phase))\n        except (ValueError, TypeError):\n            print('Erro, O valor digitado não é um inteiro valido')\n        except KeyboardInterrupt:\n            print('\\nErro, número não informada')\n        except Exception as erro:\n            print(f'O problema foi {erro.__class__}')",
        "detail": "aprendendo Python.python básico.aula023.exer115.auxiliar",
        "documentation": {}
    },
    {
        "label": "arq",
        "kind": 5,
        "importPath": "aprendendo Python.python básico.aula023.exer115.exer115",
        "description": "aprendendo Python.python básico.aula023.exer115.exer115",
        "peekOfCode": "arq = 'Bancodedado.txt'\nif not arquivo.arqexiste(arq):\n    arquivo.criararquivo(arq)\nwhile True:\n    auxiliar.header('Menu principal')\n    num = auxiliar.menu('Ver pessoas cadastradas', 'Cadastrar nova pessoa', 'Sair do sistema')\n    if num == 1:\n        auxiliar.header('Ver pessoas cadastradas')\n        arquivo.lerarquivo(arq)\n    if num == 2:",
        "detail": "aprendendo Python.python básico.aula023.exer115.exer115",
        "documentation": {}
    },
    {
        "label": "fatorial",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.auxiliar",
        "description": "aprendendo Python.python básico.auxiliar",
        "peekOfCode": "def fatorial(number):\n    f = 1\n    for i in range(1, number + 1):\n        f *= i\n    return f\ndef dobro(number):\n    return number * 2\ndef trilpo(number):\n    return number * 3",
        "detail": "aprendendo Python.python básico.auxiliar",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.auxiliar",
        "description": "aprendendo Python.python básico.auxiliar",
        "peekOfCode": "def dobro(number):\n    return number * 2\ndef trilpo(number):\n    return number * 3",
        "detail": "aprendendo Python.python básico.auxiliar",
        "documentation": {}
    },
    {
        "label": "trilpo",
        "kind": 2,
        "importPath": "aprendendo Python.python básico.auxiliar",
        "description": "aprendendo Python.python básico.auxiliar",
        "peekOfCode": "def trilpo(number):\n    return number * 3",
        "detail": "aprendendo Python.python básico.auxiliar",
        "documentation": {}
    },
    {
        "label": "obj_img",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer001",
        "description": "aprendendo Python.python_opencv.aula1-2.exer001",
        "peekOfCode": "obj_img = cv2.imread(\"../fotos/senhor.jpg\")\nplt.imshow(obj_img)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer001",
        "documentation": {}
    },
    {
        "label": "obj_img",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer002",
        "description": "aprendendo Python.python_opencv.aula1-2.exer002",
        "peekOfCode": "obj_img = plt.imread(\"../fotos/criancas.jpg\")\n# obj_img = cv2.imread(\"../fotos/criancas.jpg\")\n# obj_img = cv2.cvtColor(obj_img, cv2.COLOR_BGR2RGB)\nplt.imshow(obj_img)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer002",
        "documentation": {}
    },
    {
        "label": "obj_img",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer003",
        "description": "aprendendo Python.python_opencv.aula1-2.exer003",
        "peekOfCode": "obj_img = cv2.imread(\"../fotos/pessoas.jpg\", 0)\nobj_img = cv2.cvtColor(obj_img, cv2.COLOR_BGR2RGB)\nplt.imshow(obj_img)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer003",
        "documentation": {}
    },
    {
        "label": "obj_img",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer003",
        "description": "aprendendo Python.python_opencv.aula1-2.exer003",
        "peekOfCode": "obj_img = cv2.cvtColor(obj_img, cv2.COLOR_BGR2RGB)\nplt.imshow(obj_img)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer003",
        "documentation": {}
    },
    {
        "label": "obj_img",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer004",
        "description": "aprendendo Python.python_opencv.aula1-2.exer004",
        "peekOfCode": "obj_img = cv2.imread(\"../fotos/mulher.jpg\")\nobj_img = cv2.cvtColor(obj_img, cv2.COLOR_BGR2RGB)\nhand = obj_img[2270:2270+700, 4400:4400+500]\nobj_img[800 : 800+hand.shape[0], 5800:5800+hand.shape[1]] = hand\nplt.imshow(obj_img)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer004",
        "documentation": {}
    },
    {
        "label": "obj_img",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer004",
        "description": "aprendendo Python.python_opencv.aula1-2.exer004",
        "peekOfCode": "obj_img = cv2.cvtColor(obj_img, cv2.COLOR_BGR2RGB)\nhand = obj_img[2270:2270+700, 4400:4400+500]\nobj_img[800 : 800+hand.shape[0], 5800:5800+hand.shape[1]] = hand\nplt.imshow(obj_img)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer004",
        "documentation": {}
    },
    {
        "label": "hand",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer004",
        "description": "aprendendo Python.python_opencv.aula1-2.exer004",
        "peekOfCode": "hand = obj_img[2270:2270+700, 4400:4400+500]\nobj_img[800 : 800+hand.shape[0], 5800:5800+hand.shape[1]] = hand\nplt.imshow(obj_img)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer004",
        "documentation": {}
    },
    {
        "label": "triangulo",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer005",
        "description": "aprendendo Python.python_opencv.aula1-2.exer005",
        "peekOfCode": "def triangulo(size):\n    \"\"\"\n    -> Cria um triangulo preto e branco\n    :param size: a largura e altura da imagem\n    :return: uma imagem de um triangulo preto\n    \"\"\"\n    width = height = size\n    triangulo_img = np.zeros((height, width, 3), dtype=np.uint8)\n    for y in range(0, height):\n        for x in range(0, width):",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer005",
        "documentation": {}
    },
    {
        "label": "obj_img",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer005",
        "description": "aprendendo Python.python_opencv.aula1-2.exer005",
        "peekOfCode": "obj_img = triangulo(400)\nplt.imshow(obj_img)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer005",
        "documentation": {}
    },
    {
        "label": "bandfrancesa",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer006",
        "description": "aprendendo Python.python_opencv.aula1-2.exer006",
        "peekOfCode": "def bandfrancesa(height):\n    \"\"\"\n    -> Cria uma imagem da bandeira francesa\n    :param height: altura da imagem\n    :return: Uma imagem da bandeira francesa\n    \"\"\"\n    width = (3*height)//2\n    white = (255, 255, 255)\n    red = (239, 65, 53)\n    blue = (0, 85, 164)",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer006",
        "documentation": {}
    },
    {
        "label": "bandeira",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer006",
        "description": "aprendendo Python.python_opencv.aula1-2.exer006",
        "peekOfCode": "bandeira = bandfrancesa(400)\nplt.imshow(bandeira)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer006",
        "documentation": {}
    },
    {
        "label": "bandjaponesa",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer007",
        "description": "aprendendo Python.python_opencv.aula1-2.exer007",
        "peekOfCode": "def bandjaponesa(height):\n    \"\"\"\n    -> cria uma imagem da bandeira japonesa\n    :param height: altura da imagem\n    :return: uma imagem da bandeira japonesa\n    \"\"\"\n    width = (3*height)//2\n    raio = (3*height)//10\n    centro = (width//2, height//2)\n    red = (188, 0, 45)",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer007",
        "documentation": {}
    },
    {
        "label": "bandeira",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer007",
        "description": "aprendendo Python.python_opencv.aula1-2.exer007",
        "peekOfCode": "bandeira = bandjaponesa(400)\nplt.imshow(bandeira)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer007",
        "documentation": {}
    },
    {
        "label": "bandbrasileira",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer008",
        "description": "aprendendo Python.python_opencv.aula1-2.exer008",
        "peekOfCode": "def bandbrasileira(height):\n    modulo = height // 14\n    width = modulo * 20\n    raio = int(3.5*modulo)\n    centro = (width//2, height//2)\n    margem = int(1.7*modulo)\n    image = np.zeros((height, width, 3), dtype=np.uint8)\n    green = (0, 156, 59)\n    yellow = (255, 223, 0)\n    blue = (0, 39, 118)",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer008",
        "documentation": {}
    },
    {
        "label": "bandeira",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula1-2.exer008",
        "description": "aprendendo Python.python_opencv.aula1-2.exer008",
        "peekOfCode": "bandeira = bandbrasileira(300)\nplt.imshow(bandeira)\nplt.show()",
        "detail": "aprendendo Python.python_opencv.aula1-2.exer008",
        "documentation": {}
    },
    {
        "label": "showimagemgrid",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula3",
        "description": "aprendendo Python.python_opencv.aula3",
        "peekOfCode": "def showimagemgrid(img, title):\n    fig, axis = plt.subplots()\n    imgMPLIB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    axis.imshow(imgMPLIB)\n    axis.set_title(title)\n    plt.show()\ndef showmultipleimagegrid(imgsArray, titlearray, x, y):\n    if x < 1 or y < 1:\n        print('erro, x ou y não podem ser menores que 1')\n        return",
        "detail": "aprendendo Python.python_opencv.aula3",
        "documentation": {}
    },
    {
        "label": "showmultipleimagegrid",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula3",
        "description": "aprendendo Python.python_opencv.aula3",
        "peekOfCode": "def showmultipleimagegrid(imgsArray, titlearray, x, y):\n    if x < 1 or y < 1:\n        print('erro, x ou y não podem ser menores que 1')\n        return\n    elif x == 1 and y == 1:\n        showimagemgrid(imgsArray[0], titlearray[0])\n    elif x == 1:\n        fig, axis = plt.subplots(y)\n        fig.suptitle(titlearray)\n        axisid = 0",
        "detail": "aprendendo Python.python_opencv.aula3",
        "documentation": {}
    },
    {
        "label": "plotsiximages",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula3",
        "description": "aprendendo Python.python_opencv.aula3",
        "peekOfCode": "def plotsiximages():\n    imgoriginal = cv2.imread(\"fotos/mulher.jpg\")\n    imgreplicate = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REPLICATE)\n    imgreflect = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REFLECT)\n    imgreflect101 = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REFLECT_101)\n    imgwrap = cv2.copyMakeBorder(imgoriginal, 200, 100, 100, 100, cv2.BORDER_WRAP)\n    blue = [255, 0, 0]\n    imgconstant = cv2.copyMakeBorder(imgoriginal, 200, 100, 100, 100, cv2.BORDER_CONSTANT, value=blue)\n    imgsarray = [imgoriginal, imgreplicate, imgreflect, imgreflect101,\n                 imgwrap, imgconstant]",
        "detail": "aprendendo Python.python_opencv.aula3",
        "documentation": {}
    },
    {
        "label": "plotfourimages",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula3",
        "description": "aprendendo Python.python_opencv.aula3",
        "peekOfCode": "def plotfourimages():\n    imgoriginal = cv2.imread(\"fotos/mulher.jpg\")\n    imgreplicate = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REPLICATE)\n    imgreflect = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REFLECT)\n    imgreflect101 = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REFLECT_101)\n    imgsarray = [imgoriginal, imgreplicate, imgreflect, imgreflect101]\n    titlearray = ['imagem original', 'imagem com borda replicada',\n                  'imagem com borda de espelho',\n                  'imagem com borda espelho 2']\n    showmultipleimagegrid(imgsarray, titlearray, 2, 2)",
        "detail": "aprendendo Python.python_opencv.aula3",
        "documentation": {}
    },
    {
        "label": "plotthreeimage",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula3",
        "description": "aprendendo Python.python_opencv.aula3",
        "peekOfCode": "def plotthreeimage():\n    imgoriginal = cv2.imread(\"fotos/mulher.jpg\")\n    imgreplicate = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REPLICATE)\n    imgreflect = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REFLECT)\n    imgtransparent = np.ones((imgoriginal.shape[0], imgoriginal.shape[1], 4), dtype=np.uint8) * 255\n    imgsarray = [imgoriginal, imgreplicate, imgreflect, imgtransparent]\n    titlearray = ['imagem original', 'imagem com borda replicada',\n                  'imagem com borda de espelho', '']\n    showmultipleimagegrid(imgsarray, titlearray, 2, 2)\ndef plottwoimagevertical():",
        "detail": "aprendendo Python.python_opencv.aula3",
        "documentation": {}
    },
    {
        "label": "plottwoimagevertical",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula3",
        "description": "aprendendo Python.python_opencv.aula3",
        "peekOfCode": "def plottwoimagevertical():\n    imgoriginal = cv2.imread(\"fotos/mulher.jpg\")\n    imgreplicate = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REPLICATE)\n    imgsArray = [imgoriginal, imgreplicate]\n    title = 'imagem original e imagem com borda replicada'\n    showmultipleimagegrid(imgsArray, title, 1, 2)\ndef plottwoimagehorizontal():\n    imgoriginal = cv2.imread(\"fotos/mulher.jpg\")\n    imgreplicate = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REPLICATE)\n    imgsArray = [imgoriginal, imgreplicate]",
        "detail": "aprendendo Python.python_opencv.aula3",
        "documentation": {}
    },
    {
        "label": "plottwoimagehorizontal",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula3",
        "description": "aprendendo Python.python_opencv.aula3",
        "peekOfCode": "def plottwoimagehorizontal():\n    imgoriginal = cv2.imread(\"fotos/mulher.jpg\")\n    imgreplicate = cv2.copyMakeBorder(imgoriginal, 200, 100, 50, 25, cv2.BORDER_REPLICATE)\n    imgsArray = [imgoriginal, imgreplicate]\n    title = 'imagem original e imagem com borda replicada'\n    showmultipleimagegrid(imgsArray, title, 2, 1)\ndef main():\n    obj_img = cv2.imread(\"fotos/mulher.jpg\")\n    # plottwoimagehorizontal()\n    # plottwoimagevertical()",
        "detail": "aprendendo Python.python_opencv.aula3",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula3",
        "description": "aprendendo Python.python_opencv.aula3",
        "peekOfCode": "def main():\n    obj_img = cv2.imread(\"fotos/mulher.jpg\")\n    # plottwoimagehorizontal()\n    # plottwoimagevertical()\n    # plotthreeimage()\n    # plotfourimages()\n    plotsiximages()\nif __name__ == \"__main__\":\n    main()",
        "detail": "aprendendo Python.python_opencv.aula3",
        "documentation": {}
    },
    {
        "label": "resizeImage",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula4",
        "description": "aprendendo Python.python_opencv.aula4",
        "peekOfCode": "def resizeImage(image, scalePercent):\n    width = int(image.shape[1] * scalePercent / 100)\n    height = int(image.shape[0] * scalePercent / 100)\n    image = cv2.resize(image, (width, height))\n    return image\ndef addImageOverlay(background, foreground, translationForegroundW, translationForegroundH):\n    backH, backW, _ = background.shape\n    foreH, foreW, _ = foreground.shape\n    remainingH, remainingW = backH - foreH, backW - foreW\n    if translationForegroundH + foreH > backH:",
        "detail": "aprendendo Python.python_opencv.aula4",
        "documentation": {}
    },
    {
        "label": "addImageOverlay",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula4",
        "description": "aprendendo Python.python_opencv.aula4",
        "peekOfCode": "def addImageOverlay(background, foreground, translationForegroundW, translationForegroundH):\n    backH, backW, _ = background.shape\n    foreH, foreW, _ = foreground.shape\n    remainingH, remainingW = backH - foreH, backW - foreW\n    if translationForegroundH + foreH > backH:\n        print(\"Erro: sobreposição com altura maior do que a permitida.\")\n        print(\"Posição final da altura do objeto da frente termina:\", translationForegroundH + foreH)\n        print(\"Altura do fundo:\", backH)\n        return\n    if translationForegroundW + foreW > backW:",
        "detail": "aprendendo Python.python_opencv.aula4",
        "documentation": {}
    },
    {
        "label": "addBlendingEffect",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula4",
        "description": "aprendendo Python.python_opencv.aula4",
        "peekOfCode": "def addBlendingEffect(firstImage, secondImage, weight):\n    firstImageGray = cv2.cvtColor(firstImage, cv2.COLOR_BGR2GRAY)\n    secondImageGray = cv2.cvtColor(secondImage, cv2.COLOR_BGR2GRAY)\n    mask = firstImageGray - secondImageGray\n    ret, mask = cv2.threshold(mask, 0, 255, cv2.THRESH_BINARY)\n    copyImg = firstImage.copy()\n    altura, largura, = mask.shape\n    for y in range(0, altura):\n        for x in range(0, largura):\n            if mask.item(y, x) == 255:",
        "detail": "aprendendo Python.python_opencv.aula4",
        "documentation": {}
    },
    {
        "label": "memeGeneratorWithBlending",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula4",
        "description": "aprendendo Python.python_opencv.aula4",
        "peekOfCode": "def memeGeneratorWithBlending(fala1, imagem1, fala2, imagem2, fundo):\n    firstImage = cv2.imread(imagem1)\n    background = cv2.imread(fundo)\n    firstImage = resizeImage(firstImage, 250)\n    finalImage1 = addImageOverlay(background, firstImage, 380, 465)\n    secondImage = cv2.imread(imagem2)\n    secondImage = resizeImage(secondImage, 250)\n    finalImage2 = addImageOverlay(finalImage1, secondImage, 930, 460)\n    finalImage = addBlendingEffect(finalImage1, finalImage2, 0.4)\n    finalImage = cv2.putText(finalImage, fala1, (210, 420), cv2.FONT_HERSHEY_SIMPLEX ,",
        "detail": "aprendendo Python.python_opencv.aula4",
        "documentation": {}
    },
    {
        "label": "showImage",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula5",
        "description": "aprendendo Python.python_opencv.aula5",
        "peekOfCode": "def showImage(img):\n    img = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.show()\ndef drawEllipse(image, rotation, start, end, color, thickness):\n    # imagem - (centro) - (a e b da elipse) - rotação - angulo de abertura - angulo de fechamento - cor - espessura\n    cv.ellipse(image, (250, 250), (200, 50), rotation, start, end, color, thickness)\ndef drawCircle(img, color):\n    # imagem - centro - raio - espessura se -1 ele preenche\n    cv.circle(img, (250, 250), 25, red, -1 )",
        "detail": "aprendendo Python.python_opencv.aula5",
        "documentation": {}
    },
    {
        "label": "drawEllipse",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula5",
        "description": "aprendendo Python.python_opencv.aula5",
        "peekOfCode": "def drawEllipse(image, rotation, start, end, color, thickness):\n    # imagem - (centro) - (a e b da elipse) - rotação - angulo de abertura - angulo de fechamento - cor - espessura\n    cv.ellipse(image, (250, 250), (200, 50), rotation, start, end, color, thickness)\ndef drawCircle(img, color):\n    # imagem - centro - raio - espessura se -1 ele preenche\n    cv.circle(img, (250, 250), 25, red, -1 )\nimage = np.zeros((500, 500, 3), dtype=np.uint8)\ndrawEllipse(image, 0, 0, 360, blue, 2)\ndrawEllipse(image, 45, 0, 360, blue, 2)\ndrawEllipse(image, 90, 0, 360, blue, 2)",
        "detail": "aprendendo Python.python_opencv.aula5",
        "documentation": {}
    },
    {
        "label": "drawCircle",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula5",
        "description": "aprendendo Python.python_opencv.aula5",
        "peekOfCode": "def drawCircle(img, color):\n    # imagem - centro - raio - espessura se -1 ele preenche\n    cv.circle(img, (250, 250), 25, red, -1 )\nimage = np.zeros((500, 500, 3), dtype=np.uint8)\ndrawEllipse(image, 0, 0, 360, blue, 2)\ndrawEllipse(image, 45, 0, 360, blue, 2)\ndrawEllipse(image, 90, 0, 360, blue, 2)\ndrawEllipse(image, 135, 0, 360, blue, 2)\ndrawCircle(image, red)\nshowImage(image)",
        "detail": "aprendendo Python.python_opencv.aula5",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula5",
        "description": "aprendendo Python.python_opencv.aula5",
        "peekOfCode": "blue = (255, 0, 0)\nred = (0, 0, 255)\ndef showImage(img):\n    img = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.show()\ndef drawEllipse(image, rotation, start, end, color, thickness):\n    # imagem - (centro) - (a e b da elipse) - rotação - angulo de abertura - angulo de fechamento - cor - espessura\n    cv.ellipse(image, (250, 250), (200, 50), rotation, start, end, color, thickness)\ndef drawCircle(img, color):",
        "detail": "aprendendo Python.python_opencv.aula5",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula5",
        "description": "aprendendo Python.python_opencv.aula5",
        "peekOfCode": "red = (0, 0, 255)\ndef showImage(img):\n    img = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.show()\ndef drawEllipse(image, rotation, start, end, color, thickness):\n    # imagem - (centro) - (a e b da elipse) - rotação - angulo de abertura - angulo de fechamento - cor - espessura\n    cv.ellipse(image, (250, 250), (200, 50), rotation, start, end, color, thickness)\ndef drawCircle(img, color):\n    # imagem - centro - raio - espessura se -1 ele preenche",
        "detail": "aprendendo Python.python_opencv.aula5",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula5",
        "description": "aprendendo Python.python_opencv.aula5",
        "peekOfCode": "image = np.zeros((500, 500, 3), dtype=np.uint8)\ndrawEllipse(image, 0, 0, 360, blue, 2)\ndrawEllipse(image, 45, 0, 360, blue, 2)\ndrawEllipse(image, 90, 0, 360, blue, 2)\ndrawEllipse(image, 135, 0, 360, blue, 2)\ndrawCircle(image, red)\nshowImage(image)",
        "detail": "aprendendo Python.python_opencv.aula5",
        "documentation": {}
    },
    {
        "label": "showImage",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula6",
        "description": "aprendendo Python.python_opencv.aula6",
        "peekOfCode": "def showImage(img):\n    img = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.show()\ndef drawTriangle(img, color, position):\n    positionS = [(75, 75), (175, 75), (275, 75),\n                 (75, 175), (175, 175), (275, 175),\n                 (75, 275), (175, 275), (275, 275)]\n    positionM = [(75, 125), (175, 125), (275, 125),\n                 (75, 225), (175, 225), (275, 225),",
        "detail": "aprendendo Python.python_opencv.aula6",
        "documentation": {}
    },
    {
        "label": "drawTriangle",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula6",
        "description": "aprendendo Python.python_opencv.aula6",
        "peekOfCode": "def drawTriangle(img, color, position):\n    positionS = [(75, 75), (175, 75), (275, 75),\n                 (75, 175), (175, 175), (275, 175),\n                 (75, 275), (175, 275), (275, 275)]\n    positionM = [(75, 125), (175, 125), (275, 125),\n                 (75, 225), (175, 225), (275, 225),\n                 (75, 325), (175, 325), (275, 325)]\n    positionE = [(125, 125), (225, 125), (325, 125),\n                 (125, 225), (225, 225), (325, 225),\n                 (125, 325), (225, 325), (325, 325)]",
        "detail": "aprendendo Python.python_opencv.aula6",
        "documentation": {}
    },
    {
        "label": "drawRectangle",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula6",
        "description": "aprendendo Python.python_opencv.aula6",
        "peekOfCode": "def drawRectangle(img, color, position):\n    positionX = [[75, 75], [175, 75], [275, 75],\n                 [75, 175], [175, 175], [275, 175],\n                 [75, 275], [175, 275], [275, 275]]\n    positionY = [[125, 125], [225, 125], [325, 125],\n                 [125, 225], [225, 225], [325, 225],\n                 [125, 325], [225, 325], [325, 325]]\n    # imagem - canto superior esquerdo - canto inferior direito - cor - espessura(se -1 ele preenche a figura)\n    cv.rectangle(img, positionX[position], positionY[position], color, -1)\njogoImage = np.zeros((400, 400, 3), dtype=np.uint8)",
        "detail": "aprendendo Python.python_opencv.aula6",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula6",
        "description": "aprendendo Python.python_opencv.aula6",
        "peekOfCode": "blue = (255, 0, 0)\nred = (0, 0, 255)\nblack = (0, 0, 0)\ndef showImage(img):\n    img = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.show()\ndef drawTriangle(img, color, position):\n    positionS = [(75, 75), (175, 75), (275, 75),\n                 (75, 175), (175, 175), (275, 175),",
        "detail": "aprendendo Python.python_opencv.aula6",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula6",
        "description": "aprendendo Python.python_opencv.aula6",
        "peekOfCode": "red = (0, 0, 255)\nblack = (0, 0, 0)\ndef showImage(img):\n    img = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.show()\ndef drawTriangle(img, color, position):\n    positionS = [(75, 75), (175, 75), (275, 75),\n                 (75, 175), (175, 175), (275, 175),\n                 (75, 275), (175, 275), (275, 275)]",
        "detail": "aprendendo Python.python_opencv.aula6",
        "documentation": {}
    },
    {
        "label": "black",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula6",
        "description": "aprendendo Python.python_opencv.aula6",
        "peekOfCode": "black = (0, 0, 0)\ndef showImage(img):\n    img = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.show()\ndef drawTriangle(img, color, position):\n    positionS = [(75, 75), (175, 75), (275, 75),\n                 (75, 175), (175, 175), (275, 175),\n                 (75, 275), (175, 275), (275, 275)]\n    positionM = [(75, 125), (175, 125), (275, 125),",
        "detail": "aprendendo Python.python_opencv.aula6",
        "documentation": {}
    },
    {
        "label": "jogoImage",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula6",
        "description": "aprendendo Python.python_opencv.aula6",
        "peekOfCode": "jogoImage = np.zeros((400, 400, 3), dtype=np.uint8)\njogoImage.fill(255)\n# imagem - inicio da linha - fim da linha - cor - espessura\ncv.line(jogoImage, (50, 150), (350, 150), black, 2)  # horizontal\ncv.line(jogoImage, (50, 250), (350, 250), black, 2)  # horizontal\ncv.line(jogoImage, (150, 50), (150, 350), black, 2)  # vertical\ncv.line(jogoImage, (250, 50), (250, 350), black, 2)  # vertical\ndrawRectangle(jogoImage, red, 8)\ndrawTriangle(jogoImage, blue, 0)\nshowImage(jogoImage)",
        "detail": "aprendendo Python.python_opencv.aula6",
        "documentation": {}
    },
    {
        "label": "onChange",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "def onChange(value):\n    # print(\"valor alterado\", value)\n    pass\n# imagem carregada e sua cópia\nimg = cv2.imread(\"fotos/mulher200.jpg\")\ncopyimg = img.copy()\n# cria janela gráfica para inserir a imagem\nwindowTitle = \"Ajuste de Brilho e Contraste\"\ncv2.namedWindow(windowTitle)\n# cria trackbar",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "ESCAPE_KEY_ASCII",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "ESCAPE_KEY_ASCII = 27\ndef onChange(value):\n    # print(\"valor alterado\", value)\n    pass\n# imagem carregada e sua cópia\nimg = cv2.imread(\"fotos/mulher200.jpg\")\ncopyimg = img.copy()\n# cria janela gráfica para inserir a imagem\nwindowTitle = \"Ajuste de Brilho e Contraste\"\ncv2.namedWindow(windowTitle)",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "img = cv2.imread(\"fotos/mulher200.jpg\")\ncopyimg = img.copy()\n# cria janela gráfica para inserir a imagem\nwindowTitle = \"Ajuste de Brilho e Contraste\"\ncv2.namedWindow(windowTitle)\n# cria trackbar\ncv2.createTrackbar(\"contraste\", windowTitle, 100, 100, onChange)\ncv2.createTrackbar(\"brilho\", windowTitle, 0, 200, onChange)\nbefore_contrast = 100\nupdate_contrast = False",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "copyimg",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "copyimg = img.copy()\n# cria janela gráfica para inserir a imagem\nwindowTitle = \"Ajuste de Brilho e Contraste\"\ncv2.namedWindow(windowTitle)\n# cria trackbar\ncv2.createTrackbar(\"contraste\", windowTitle, 100, 100, onChange)\ncv2.createTrackbar(\"brilho\", windowTitle, 0, 200, onChange)\nbefore_contrast = 100\nupdate_contrast = False\nbefore_brightness = 0",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "windowTitle",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "windowTitle = \"Ajuste de Brilho e Contraste\"\ncv2.namedWindow(windowTitle)\n# cria trackbar\ncv2.createTrackbar(\"contraste\", windowTitle, 100, 100, onChange)\ncv2.createTrackbar(\"brilho\", windowTitle, 0, 200, onChange)\nbefore_contrast = 100\nupdate_contrast = False\nbefore_brightness = 0\nupdate_brightness = False\ncounter_time = 0",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "before_contrast",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "before_contrast = 100\nupdate_contrast = False\nbefore_brightness = 0\nupdate_brightness = False\ncounter_time = 0\nwhile True:\n    current_contrast = cv2.getTrackbarPos(\"contraste\", windowTitle)\n    current_brightness = cv2.getTrackbarPos(\"brilho\", windowTitle)\n    # valor de contraste do trackbar foi alterado pelo usuário\n    if before_contrast != current_contrast:",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "update_contrast",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "update_contrast = False\nbefore_brightness = 0\nupdate_brightness = False\ncounter_time = 0\nwhile True:\n    current_contrast = cv2.getTrackbarPos(\"contraste\", windowTitle)\n    current_brightness = cv2.getTrackbarPos(\"brilho\", windowTitle)\n    # valor de contraste do trackbar foi alterado pelo usuário\n    if before_contrast != current_contrast:\n        update_contrast = True",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "before_brightness",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "before_brightness = 0\nupdate_brightness = False\ncounter_time = 0\nwhile True:\n    current_contrast = cv2.getTrackbarPos(\"contraste\", windowTitle)\n    current_brightness = cv2.getTrackbarPos(\"brilho\", windowTitle)\n    # valor de contraste do trackbar foi alterado pelo usuário\n    if before_contrast != current_contrast:\n        update_contrast = True\n        counter_time = time.time()",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "update_brightness",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "update_brightness = False\ncounter_time = 0\nwhile True:\n    current_contrast = cv2.getTrackbarPos(\"contraste\", windowTitle)\n    current_brightness = cv2.getTrackbarPos(\"brilho\", windowTitle)\n    # valor de contraste do trackbar foi alterado pelo usuário\n    if before_contrast != current_contrast:\n        update_contrast = True\n        counter_time = time.time()\n        before_contrast = current_contrast",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "counter_time",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula7",
        "description": "aprendendo Python.python_opencv.aula7",
        "peekOfCode": "counter_time = 0\nwhile True:\n    current_contrast = cv2.getTrackbarPos(\"contraste\", windowTitle)\n    current_brightness = cv2.getTrackbarPos(\"brilho\", windowTitle)\n    # valor de contraste do trackbar foi alterado pelo usuário\n    if before_contrast != current_contrast:\n        update_contrast = True\n        counter_time = time.time()\n        before_contrast = current_contrast\n    # valor de brilho do trackbar foi alterado pelo usuário",
        "detail": "aprendendo Python.python_opencv.aula7",
        "documentation": {}
    },
    {
        "label": "setLimitsOfTrackbar",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "def setLimitsOfTrackbar():\n    hue = {}\n    hue[\"min\"] = cv2.getTrackbarPos(\"Min Hue\", trackbarWindow)\n    hue[\"max\"] = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)\n    if hue[\"min\"] > hue[\"max\"]:\n        cv2.setTrackbarPos(\"Max Hue\", trackbarWindow, hue[\"min\"])\n        hue[\"max\"] = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)\n    sat = {}\n    sat[\"min\"] = cv2.getTrackbarPos(\"Min Saturation\", trackbarWindow)\n    sat[\"max\"] = cv2.getTrackbarPos(\"Max Saturation\", trackbarWindow)",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "computeTracking",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "def computeTracking(frame, hue, sat, val):\n    # transforma a imagem de RGB para HSV\n    hsvImage = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n    # definir os intervalos de cores que vão aparecer na imagem final\n    lowerColor = np.array([hue['min'], sat[\"min\"], val[\"min\"]])\n    upperColor = np.array([hue['max'], sat[\"max\"], val[\"max\"]])\n    # marcador pra saber se o pixel pertence ao intervalo ou não\n    mask = cv2.inRange(hsvImage, lowerColor, upperColor)\n    # aplica máscara que \"deixa passar\" pixels pertencentes ao intervalo, como filtro\n    result = cv2.bitwise_and(frame, frame, mask=mask)",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "onChange",
        "kind": 2,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "def onChange(val):\n    return\ncv2.createTrackbar(\"Min Hue\", trackbarWindow, 0, 255, onChange)\ncv2.createTrackbar(\"Max Hue\", trackbarWindow, 255, 255, onChange)\ncv2.createTrackbar(\"Min Saturation\", trackbarWindow, 0, 255, onChange)\ncv2.createTrackbar(\"Max Saturation\", trackbarWindow, 255, 255, onChange)\ncv2.createTrackbar(\"Min Value\", trackbarWindow, 0, 255, onChange)\ncv2.createTrackbar(\"Max Value\", trackbarWindow, 255, 255, onChange)\nmin_hue = cv2.getTrackbarPos(\"Min Hue\", trackbarWindow)\nmax_hue = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "ESC_KEY",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "ESC_KEY = 27\ncap = cv2.VideoCapture(0)\ndef setLimitsOfTrackbar():\n    hue = {}\n    hue[\"min\"] = cv2.getTrackbarPos(\"Min Hue\", trackbarWindow)\n    hue[\"max\"] = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)\n    if hue[\"min\"] > hue[\"max\"]:\n        cv2.setTrackbarPos(\"Max Hue\", trackbarWindow, hue[\"min\"])\n        hue[\"max\"] = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)\n    sat = {}",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "cap = cv2.VideoCapture(0)\ndef setLimitsOfTrackbar():\n    hue = {}\n    hue[\"min\"] = cv2.getTrackbarPos(\"Min Hue\", trackbarWindow)\n    hue[\"max\"] = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)\n    if hue[\"min\"] > hue[\"max\"]:\n        cv2.setTrackbarPos(\"Max Hue\", trackbarWindow, hue[\"min\"])\n        hue[\"max\"] = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)\n    sat = {}\n    sat[\"min\"] = cv2.getTrackbarPos(\"Min Saturation\", trackbarWindow)",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "trackbarWindow",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "trackbarWindow = \"trackbar window\"\ncv2.namedWindow(trackbarWindow)\ndef onChange(val):\n    return\ncv2.createTrackbar(\"Min Hue\", trackbarWindow, 0, 255, onChange)\ncv2.createTrackbar(\"Max Hue\", trackbarWindow, 255, 255, onChange)\ncv2.createTrackbar(\"Min Saturation\", trackbarWindow, 0, 255, onChange)\ncv2.createTrackbar(\"Max Saturation\", trackbarWindow, 255, 255, onChange)\ncv2.createTrackbar(\"Min Value\", trackbarWindow, 0, 255, onChange)\ncv2.createTrackbar(\"Max Value\", trackbarWindow, 255, 255, onChange)",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "min_hue",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "min_hue = cv2.getTrackbarPos(\"Min Hue\", trackbarWindow)\nmax_hue = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)\nmin_sat = cv2.getTrackbarPos(\"Min Saturation\", trackbarWindow)\nmax_sat = cv2.getTrackbarPos(\"Max Saturation\", trackbarWindow)\nmin_val = cv2.getTrackbarPos(\"Min Value\", trackbarWindow)\nmax_val = cv2.getTrackbarPos(\"Max Value\", trackbarWindow)\nwhile True:\n    success, frame = cap.read()\n    hue, sat, val = setLimitsOfTrackbar()\n    frame, gray = computeTracking(frame, hue, sat, val)",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "max_hue",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "max_hue = cv2.getTrackbarPos(\"Max Hue\", trackbarWindow)\nmin_sat = cv2.getTrackbarPos(\"Min Saturation\", trackbarWindow)\nmax_sat = cv2.getTrackbarPos(\"Max Saturation\", trackbarWindow)\nmin_val = cv2.getTrackbarPos(\"Min Value\", trackbarWindow)\nmax_val = cv2.getTrackbarPos(\"Max Value\", trackbarWindow)\nwhile True:\n    success, frame = cap.read()\n    hue, sat, val = setLimitsOfTrackbar()\n    frame, gray = computeTracking(frame, hue, sat, val)\n    cv2.imshow(\"mascara\", gray)",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "min_sat",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "min_sat = cv2.getTrackbarPos(\"Min Saturation\", trackbarWindow)\nmax_sat = cv2.getTrackbarPos(\"Max Saturation\", trackbarWindow)\nmin_val = cv2.getTrackbarPos(\"Min Value\", trackbarWindow)\nmax_val = cv2.getTrackbarPos(\"Max Value\", trackbarWindow)\nwhile True:\n    success, frame = cap.read()\n    hue, sat, val = setLimitsOfTrackbar()\n    frame, gray = computeTracking(frame, hue, sat, val)\n    cv2.imshow(\"mascara\", gray)\n    cv2.imshow(\"webcam\", frame)",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "max_sat",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "max_sat = cv2.getTrackbarPos(\"Max Saturation\", trackbarWindow)\nmin_val = cv2.getTrackbarPos(\"Min Value\", trackbarWindow)\nmax_val = cv2.getTrackbarPos(\"Max Value\", trackbarWindow)\nwhile True:\n    success, frame = cap.read()\n    hue, sat, val = setLimitsOfTrackbar()\n    frame, gray = computeTracking(frame, hue, sat, val)\n    cv2.imshow(\"mascara\", gray)\n    cv2.imshow(\"webcam\", frame)\n    if cv2.waitKey(1) & 0xFF == ord('q') or 0xFF == ESC_KEY:",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "min_val",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "min_val = cv2.getTrackbarPos(\"Min Value\", trackbarWindow)\nmax_val = cv2.getTrackbarPos(\"Max Value\", trackbarWindow)\nwhile True:\n    success, frame = cap.read()\n    hue, sat, val = setLimitsOfTrackbar()\n    frame, gray = computeTracking(frame, hue, sat, val)\n    cv2.imshow(\"mascara\", gray)\n    cv2.imshow(\"webcam\", frame)\n    if cv2.waitKey(1) & 0xFF == ord('q') or 0xFF == ESC_KEY:\n        break",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "max_val",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula8",
        "description": "aprendendo Python.python_opencv.aula8",
        "peekOfCode": "max_val = cv2.getTrackbarPos(\"Max Value\", trackbarWindow)\nwhile True:\n    success, frame = cap.read()\n    hue, sat, val = setLimitsOfTrackbar()\n    frame, gray = computeTracking(frame, hue, sat, val)\n    cv2.imshow(\"mascara\", gray)\n    cv2.imshow(\"webcam\", frame)\n    if cv2.waitKey(1) & 0xFF == ord('q') or 0xFF == ESC_KEY:\n        break\ncap.release()",
        "detail": "aprendendo Python.python_opencv.aula8",
        "documentation": {}
    },
    {
        "label": "position_text",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "position_text = (0, 40)\nfont = cv2.FONT_HERSHEY_SIMPLEX\nfont_scale = 1\nfont_color = (255, 0, 0)\nline_type = 2\nlogo_original = cv2.imread(\"fotos/mulher.jpg\")\nFPS = 20\nWIDTH, HEIGHT = 640, 360\ncodec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')\nvideo_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "font = cv2.FONT_HERSHEY_SIMPLEX\nfont_scale = 1\nfont_color = (255, 0, 0)\nline_type = 2\nlogo_original = cv2.imread(\"fotos/mulher.jpg\")\nFPS = 20\nWIDTH, HEIGHT = 640, 360\ncodec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')\nvideo_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))\nframes_count = 0",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "font_scale",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "font_scale = 1\nfont_color = (255, 0, 0)\nline_type = 2\nlogo_original = cv2.imread(\"fotos/mulher.jpg\")\nFPS = 20\nWIDTH, HEIGHT = 640, 360\ncodec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')\nvideo_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))\nframes_count = 0\nscale_percent = 100",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "font_color",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "font_color = (255, 0, 0)\nline_type = 2\nlogo_original = cv2.imread(\"fotos/mulher.jpg\")\nFPS = 20\nWIDTH, HEIGHT = 640, 360\ncodec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')\nvideo_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))\nframes_count = 0\nscale_percent = 100\nwhile scale_percent >= 20:",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "line_type",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "line_type = 2\nlogo_original = cv2.imread(\"fotos/mulher.jpg\")\nFPS = 20\nWIDTH, HEIGHT = 640, 360\ncodec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')\nvideo_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))\nframes_count = 0\nscale_percent = 100\nwhile scale_percent >= 20:\n    logo_copy = logo_original.copy()",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "logo_original",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "logo_original = cv2.imread(\"fotos/mulher.jpg\")\nFPS = 20\nWIDTH, HEIGHT = 640, 360\ncodec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')\nvideo_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))\nframes_count = 0\nscale_percent = 100\nwhile scale_percent >= 20:\n    logo_copy = logo_original.copy()\n    new_frame = logo_copy",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "FPS = 20\nWIDTH, HEIGHT = 640, 360\ncodec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')\nvideo_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))\nframes_count = 0\nscale_percent = 100\nwhile scale_percent >= 20:\n    logo_copy = logo_original.copy()\n    new_frame = logo_copy\n    # escreve texto diretamente na imagem",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "codec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')\nvideo_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))\nframes_count = 0\nscale_percent = 100\nwhile scale_percent >= 20:\n    logo_copy = logo_original.copy()\n    new_frame = logo_copy\n    # escreve texto diretamente na imagem\n    cv2.putText(new_frame,\n                str(scale_percent),",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "video_writer = cv2.VideoWriter('output.avi', codec, FPS, (WIDTH, HEIGHT))\nframes_count = 0\nscale_percent = 100\nwhile scale_percent >= 20:\n    logo_copy = logo_original.copy()\n    new_frame = logo_copy\n    # escreve texto diretamente na imagem\n    cv2.putText(new_frame,\n                str(scale_percent),\n                position_text,",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "frames_count",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "frames_count = 0\nscale_percent = 100\nwhile scale_percent >= 20:\n    logo_copy = logo_original.copy()\n    new_frame = logo_copy\n    # escreve texto diretamente na imagem\n    cv2.putText(new_frame,\n                str(scale_percent),\n                position_text,\n                font,",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "scale_percent",
        "kind": 5,
        "importPath": "aprendendo Python.python_opencv.aula9",
        "description": "aprendendo Python.python_opencv.aula9",
        "peekOfCode": "scale_percent = 100\nwhile scale_percent >= 20:\n    logo_copy = logo_original.copy()\n    new_frame = logo_copy\n    # escreve texto diretamente na imagem\n    cv2.putText(new_frame,\n                str(scale_percent),\n                position_text,\n                font,\n                font_scale,",
        "detail": "aprendendo Python.python_opencv.aula9",
        "documentation": {}
    },
    {
        "label": "Laser",
        "kind": 6,
        "importPath": "atividade_pygame.0_Projeto_de_LP.laser",
        "description": "atividade_pygame.0_Projeto_de_LP.laser",
        "peekOfCode": "class Laser:\n    def __init__(self, width, hight, sizeScreen, screen):\n        self.screen = screen\n        self.width = width\n        self.hight = hight\n        self.max_width = sizeScreen[0]\n        self.max_hight = sizeScreen[1]\n        pass\n    def draw_laser(self):\n        pygame.draw.rect(self.screen, (255,255,255), ",
        "detail": "atividade_pygame.0_Projeto_de_LP.laser",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "atividade_pygame.0_Projeto_de_LP.player",
        "description": "atividade_pygame.0_Projeto_de_LP.player",
        "peekOfCode": "class Player:\n    def __init__(self, screen, width, hight, sizeScreen):\n        self.shoot = Laser(width//2 - 30, hight - 50,sizeScreen, screen)\n        self.screen = screen\n        self.width = width//2 - 30\n        self.hight = hight - 40\n        self.max_width = sizeScreen[0]\n        self.max_hight = sizeScreen[1]\n        self.image = pygame.image.load(r'C://Users/Softex/Documents/GitHub/Python/atividade/0_Projeto_de_LP/assets/image/player.png')\n        pass",
        "detail": "atividade_pygame.0_Projeto_de_LP.player",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "description": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "peekOfCode": "screen = pygame.display.set_mode((1280, 720))\nclock = pygame.time.Clock()\nrunning = True\ndt = 0\nplayer_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:",
        "detail": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "description": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "peekOfCode": "clock = pygame.time.Clock()\nrunning = True\ndt = 0\nplayer_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False",
        "detail": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "description": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "peekOfCode": "running = True\ndt = 0\nplayer_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # fill the screen with a color to wipe away anything from last frame",
        "detail": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "description": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "peekOfCode": "dt = 0\nplayer_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # fill the screen with a color to wipe away anything from last frame\n    screen.fill(\"white\")",
        "detail": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "player_pos",
        "kind": 5,
        "importPath": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "description": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "peekOfCode": "player_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # fill the screen with a color to wipe away anything from last frame\n    screen.fill(\"white\")\n    pygame.draw.circle(screen, \"red\", player_pos, 80)",
        "detail": "atividade_pygame.1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "level_jogo",
        "kind": 2,
        "importPath": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "description": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "peekOfCode": "def level_jogo():    \n    level1 = 20\n    level2 = 10\n    level3 = 5\n    print('Nível do jogo: ')\n    print('1 - Fácil')\n    print('2 - Médio')\n    print('3 - Difícil')\n    level = int(input('Digite qual o nível: '))\n    if level == 1:",
        "detail": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 2,
        "importPath": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "description": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "peekOfCode": "def result(secret_number):\n    number_user = -1\n    while number_user < 0 or number_user > 100:\n        number_user = int(input('Digite um número entre 0 e 100: '))\n    if number_user == secret_number:\n        print('Você acertou')\n        return -1\n    else:\n        if number_user > secret_number:\n            print(f'O número {number_user} é maior que o número secreto')",
        "detail": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "documentation": {}
    },
    {
        "label": "number_secret",
        "kind": 2,
        "importPath": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "description": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "peekOfCode": "def number_secret():\n    #number1 = int(random.random() * 100)\n    #number2 = random.randrange(0, 101)\n    number3 = random.randint(0, 100)\n    return number3\nif __name__ == \"__main__\":\n    #gameLoop\n    secret_number = number_secret()\n    times = level_jogo()\n    pontos = 1000",
        "detail": "atividade_pygame.2_segundo_projeto.1_numero_alatorio",
        "documentation": {}
    },
    {
        "label": "secreta_palavra",
        "kind": 2,
        "importPath": "atividade_pygame.3_jogo_da_forca.Jogo_da_forca",
        "description": "atividade_pygame.3_jogo_da_forca.Jogo_da_forca",
        "peekOfCode": "def secreta_palavra():\n    palavras = ['Monitor', 'Teclado', 'Mouse', \n                'Impressora', 'Scanner', 'Notebook']\n    return palavras[random.randrange(0, len(palavras))].upper()\nif __name__ == '__main__':\n    palavra_secreta = secreta_palavra()\n    palavra_secretaOriginal = palavra_secreta\n    palavra_user = len(palavra_secreta) * '_'\n    life = 7\n    while life > 0:",
        "detail": "atividade_pygame.3_jogo_da_forca.Jogo_da_forca",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "atividade_pygame.4 _Desenhando_uma_casa.index",
        "description": "atividade_pygame.4 _Desenhando_uma_casa.index",
        "peekOfCode": "screen = pygame.display.set_mode((800,600),0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)\n    #rect = (600, 500, 50, 50)\n    #pygame.draw.rect(screen, (45,200,61), rect)\n    #pygame.draw.polygon(screen, (200,56,21), [(100,100), (200,200), (100,200)],3)\n    #pygame.draw.line(screen, (255,255,0), (300,0),(300, 500), 3)\n    point1 = (200, 200)\n    point2 = (600, 200)\n    point3 = (400, 100)",
        "detail": "atividade_pygame.4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "kind": 6,
        "importPath": "atividade_pygame.5_Pacman.index",
        "description": "atividade_pygame.5_Pacman.index",
        "peekOfCode": "class Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen):\n        pygame.sprite.Sprite.__init__(self)\n        self.centroX = 400\n        self.centroY = 300\n        self.centro = (self.centroX, self.centroY)\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0\n        self.speed_x = 1",
        "detail": "atividade_pygame.5_Pacman.index",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "atividade_pygame.5_Pacman.index",
        "description": "atividade_pygame.5_Pacman.index",
        "peekOfCode": "screen = pygame.display.set_mode((800,600),0)\nYELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen):\n        pygame.sprite.Sprite.__init__(self)\n        self.centroX = 400\n        self.centroY = 300\n        self.centro = (self.centroX, self.centroY)\n        self.tamanho = 100",
        "detail": "atividade_pygame.5_Pacman.index",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "atividade_pygame.5_Pacman.index",
        "description": "atividade_pygame.5_Pacman.index",
        "peekOfCode": "YELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen):\n        pygame.sprite.Sprite.__init__(self)\n        self.centroX = 400\n        self.centroY = 300\n        self.centro = (self.centroX, self.centroY)\n        self.tamanho = 100\n        self.raio = self.tamanho // 2",
        "detail": "atividade_pygame.5_Pacman.index",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "atividade_pygame.5_Pacman.index",
        "description": "atividade_pygame.5_Pacman.index",
        "peekOfCode": "BLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen):\n        pygame.sprite.Sprite.__init__(self)\n        self.centroX = 400\n        self.centroY = 300\n        self.centro = (self.centroX, self.centroY)\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0",
        "detail": "atividade_pygame.5_Pacman.index",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "kind": 6,
        "importPath": "atividade_pygame.5_Pacman.index2",
        "description": "atividade_pygame.5_Pacman.index2",
        "peekOfCode": "class Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0\n        self.speed_x = 0.2\n        self.speed_y = 0.2",
        "detail": "atividade_pygame.5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "sizeScreen",
        "kind": 5,
        "importPath": "atividade_pygame.5_Pacman.index2",
        "description": "atividade_pygame.5_Pacman.index2",
        "peekOfCode": "sizeScreen = (800,600)\nscreen = pygame.display.set_mode(sizeScreen,0)\nYELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100",
        "detail": "atividade_pygame.5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "atividade_pygame.5_Pacman.index2",
        "description": "atividade_pygame.5_Pacman.index2",
        "peekOfCode": "screen = pygame.display.set_mode(sizeScreen,0)\nYELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100\n        self.raio = self.tamanho // 2",
        "detail": "atividade_pygame.5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "atividade_pygame.5_Pacman.index2",
        "description": "atividade_pygame.5_Pacman.index2",
        "peekOfCode": "YELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0",
        "detail": "atividade_pygame.5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "atividade_pygame.5_Pacman.index2",
        "description": "atividade_pygame.5_Pacman.index2",
        "peekOfCode": "BLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0\n        self.speed_x = 0.2",
        "detail": "atividade_pygame.5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "Alien",
        "kind": 6,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "class Alien(pygame.sprite.Sprite):\n\tdef __init__(self,color,x,y):\n\t\tsuper().__init__()\n\t\tfile_path = 'C://Users/Softex/Desktop/Space-invaders-main/graphics/' + color + '.png'\n\t\tself.image = pygame.image.load(file_path).convert_alpha()\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\n\t\tif color == 'red': self.value = 100\n\t\telif color == 'green': self.value = 200\n\t\telse: self.value = 300\n\tdef update(self,direction):",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "Extra",
        "kind": 6,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "class Extra(pygame.sprite.Sprite):\n\tdef __init__(self,side,screen_width):\n\t\tsuper().__init__()\n\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/extra.png').convert_alpha()\n\t\tif side == 'right':\n\t\t\tx = screen_width + 50\n\t\t\tself.speed = - 3\n\t\telse:\n\t\t\tx = -50\n\t\t\tself.speed = 3",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\tfile_path",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\tfile_path = 'C://Users/Softex/Desktop/Space-invaders-main/graphics/' + color + '.png'\n\t\tself.image = pygame.image.load(file_path).convert_alpha()\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\n\t\tif color == 'red': self.value = 100\n\t\telif color == 'green': self.value = 200\n\t\telse: self.value = 300\n\tdef update(self,direction):\n\t\tself.rect.x += direction\nclass Extra(pygame.sprite.Sprite):\n\tdef __init__(self,side,screen_width):",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\tself.image = pygame.image.load(file_path).convert_alpha()\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\n\t\tif color == 'red': self.value = 100\n\t\telif color == 'green': self.value = 200\n\t\telse: self.value = 300\n\tdef update(self,direction):\n\t\tself.rect.x += direction\nclass Extra(pygame.sprite.Sprite):\n\tdef __init__(self,side,screen_width):\n\t\tsuper().__init__()",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(topleft = (x,y))\n\t\tif color == 'red': self.value = 100\n\t\telif color == 'green': self.value = 200\n\t\telse: self.value = 300\n\tdef update(self,direction):\n\t\tself.rect.x += direction\nclass Extra(pygame.sprite.Sprite):\n\tdef __init__(self,side,screen_width):\n\t\tsuper().__init__()\n\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/extra.png').convert_alpha()",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/extra.png').convert_alpha()\n\t\tif side == 'right':\n\t\t\tx = screen_width + 50\n\t\t\tself.speed = - 3\n\t\telse:\n\t\t\tx = -50\n\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\t\tx",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\t\tx = screen_width + 50\n\t\t\tself.speed = - 3\n\t\telse:\n\t\t\tx = -50\n\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.speed",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\t\tself.speed = - 3\n\t\telse:\n\t\t\tx = -50\n\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\t\tx",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\t\tx = -50\n\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.speed",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.alien",
        "description": "atividade_pygame.6_space_veder.alien",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "atividade_pygame.6_space_veder.alien",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "class Game:\n\tdef __init__(self):\n\t\t# Player setup\n\t\tplayer_sprite = Player((screen_width / 2,screen_height),screen_width,5)\n\t\tself.player = pygame.sprite.GroupSingle(player_sprite)\n\t\t# health and score setup\n\t\tself.lives = 3\n\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "CRT",
        "kind": 6,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "class CRT:\n\tdef __init__(self):\n\t\tself.tv = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/tv.png').convert_alpha()\n\t\tself.tv = pygame.transform.scale(self.tv,(screen_width,screen_height))\n\tdef create_crt_lines(self):\n\t\tline_height = 3\n\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tplayer_sprite",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tplayer_sprite = Player((screen_width / 2,screen_height),screen_width,5)\n\t\tself.player = pygame.sprite.GroupSingle(player_sprite)\n\t\t# health and score setup\n\t\tself.lives = 3\n\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.player",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.player = pygame.sprite.GroupSingle(player_sprite)\n\t\t# health and score setup\n\t\tself.lives = 3\n\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.lives",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.lives = 3\n\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.live_surf",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.live_x_start_pos",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.score",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.font",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.shape",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.block_size",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.blocks",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.obstacle_amount",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.obstacle_x_positions",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.aliens",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.alien_lasers",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.alien_setup(rows",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.alien_direction",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.extra",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.extra_spawn_time",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tmusic",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):\n\t\tfor row_index, row in enumerate(self.shape):\n\t\t\tfor col_index,col in enumerate(row):",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tmusic.play(loops",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):\n\t\tfor row_index, row in enumerate(self.shape):\n\t\t\tfor col_index,col in enumerate(row):\n\t\t\t\tif col == 'x':\n\t\t\t\t\tx = x_start + col_index * self.block_size + offset_x",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.laser_sound",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):\n\t\tfor row_index, row in enumerate(self.shape):\n\t\t\tfor col_index,col in enumerate(row):\n\t\t\t\tif col == 'x':\n\t\t\t\t\tx = x_start + col_index * self.block_size + offset_x\n\t\t\t\t\ty = y_start + row_index * self.block_size",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.explosion_sound",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):\n\t\tfor row_index, row in enumerate(self.shape):\n\t\t\tfor col_index,col in enumerate(row):\n\t\t\t\tif col == 'x':\n\t\t\t\t\tx = x_start + col_index * self.block_size + offset_x\n\t\t\t\t\ty = y_start + row_index * self.block_size\n\t\t\t\t\tblock = obstacle.Block(self.block_size,(241,79,80),x,y)\n\t\t\t\t\tself.blocks.add(block)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tx",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\t\t\tx = x_start + col_index * self.block_size + offset_x\n\t\t\t\t\ty = y_start + row_index * self.block_size\n\t\t\t\t\tblock = obstacle.Block(self.block_size,(241,79,80),x,y)\n\t\t\t\t\tself.blocks.add(block)\n\tdef create_multiple_obstacles(self,*offset,x_start,y_start):\n\t\tfor offset_x in offset:\n\t\t\tself.create_obstacle(x_start,y_start,offset_x)\n\tdef alien_setup(self,rows,cols,x_distance = 60,y_distance = 48,x_offset = 70, y_offset = 100):\n\t\tfor row_index, row in enumerate(range(rows)):\n\t\t\tfor col_index, col in enumerate(range(cols)):",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ty",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\t\t\ty = y_start + row_index * self.block_size\n\t\t\t\t\tblock = obstacle.Block(self.block_size,(241,79,80),x,y)\n\t\t\t\t\tself.blocks.add(block)\n\tdef create_multiple_obstacles(self,*offset,x_start,y_start):\n\t\tfor offset_x in offset:\n\t\t\tself.create_obstacle(x_start,y_start,offset_x)\n\tdef alien_setup(self,rows,cols,x_distance = 60,y_distance = 48,x_offset = 70, y_offset = 100):\n\t\tfor row_index, row in enumerate(range(rows)):\n\t\t\tfor col_index, col in enumerate(range(cols)):\n\t\t\t\tx = col_index * x_distance + x_offset",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tblock",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\t\t\tblock = obstacle.Block(self.block_size,(241,79,80),x,y)\n\t\t\t\t\tself.blocks.add(block)\n\tdef create_multiple_obstacles(self,*offset,x_start,y_start):\n\t\tfor offset_x in offset:\n\t\t\tself.create_obstacle(x_start,y_start,offset_x)\n\tdef alien_setup(self,rows,cols,x_distance = 60,y_distance = 48,x_offset = 70, y_offset = 100):\n\t\tfor row_index, row in enumerate(range(rows)):\n\t\t\tfor col_index, col in enumerate(range(cols)):\n\t\t\t\tx = col_index * x_distance + x_offset\n\t\t\t\ty = row_index * y_distance + y_offset",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tx",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\t\tx = col_index * x_distance + x_offset\n\t\t\t\ty = row_index * y_distance + y_offset\n\t\t\t\tif row_index == 0: alien_sprite = Alien('yellow',x,y)\n\t\t\t\telif 1 <= row_index <= 2: alien_sprite = Alien('green',x,y)\n\t\t\t\telse: alien_sprite = Alien('red',x,y)\n\t\t\t\tself.aliens.add(alien_sprite)\n\tdef alien_position_checker(self):\n\t\tall_aliens = self.aliens.sprites()\n\t\tfor alien in all_aliens:\n\t\t\tif alien.rect.right >= screen_width:",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ty",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\t\ty = row_index * y_distance + y_offset\n\t\t\t\tif row_index == 0: alien_sprite = Alien('yellow',x,y)\n\t\t\t\telif 1 <= row_index <= 2: alien_sprite = Alien('green',x,y)\n\t\t\t\telse: alien_sprite = Alien('red',x,y)\n\t\t\t\tself.aliens.add(alien_sprite)\n\tdef alien_position_checker(self):\n\t\tall_aliens = self.aliens.sprites()\n\t\tfor alien in all_aliens:\n\t\t\tif alien.rect.right >= screen_width:\n\t\t\t\tself.alien_direction = -1",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tall_aliens",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tall_aliens = self.aliens.sprites()\n\t\tfor alien in all_aliens:\n\t\t\tif alien.rect.right >= screen_width:\n\t\t\t\tself.alien_direction = -1\n\t\t\t\tself.alien_move_down(2)\n\t\t\telif alien.rect.left <= 0:\n\t\t\t\tself.alien_direction = 1\n\t\t\t\tself.alien_move_down(2)\n\tdef alien_move_down(self,distance):\n\t\tif self.aliens:",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.alien_direction",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\t\tself.alien_direction = -1\n\t\t\t\tself.alien_move_down(2)\n\t\t\telif alien.rect.left <= 0:\n\t\t\t\tself.alien_direction = 1\n\t\t\t\tself.alien_move_down(2)\n\tdef alien_move_down(self,distance):\n\t\tif self.aliens:\n\t\t\tfor alien in self.aliens.sprites():\n\t\t\t\talien.rect.y += distance\n\tdef alien_shoot(self):",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.alien_direction",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\t\tself.alien_direction = 1\n\t\t\t\tself.alien_move_down(2)\n\tdef alien_move_down(self,distance):\n\t\tif self.aliens:\n\t\t\tfor alien in self.aliens.sprites():\n\t\t\t\talien.rect.y += distance\n\tdef alien_shoot(self):\n\t\tif self.aliens.sprites():\n\t\t\trandom_alien = choice(self.aliens.sprites())\n\t\t\tlaser_sprite = Laser(random_alien.rect.center,6,screen_height)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\trandom_alien",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\trandom_alien = choice(self.aliens.sprites())\n\t\t\tlaser_sprite = Laser(random_alien.rect.center,6,screen_height)\n\t\t\tself.alien_lasers.add(laser_sprite)\n\t\t\tself.laser_sound.play()\n\tdef extra_alien_timer(self):\n\t\tself.extra_spawn_time -= 1\n\t\tif self.extra_spawn_time <= 0:\n\t\t\tself.extra.add(Extra(choice(['right','left']),screen_width))\n\t\t\tself.extra_spawn_time = randint(400,800)\n\tdef collision_checks(self):",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tlaser_sprite",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\tlaser_sprite = Laser(random_alien.rect.center,6,screen_height)\n\t\t\tself.alien_lasers.add(laser_sprite)\n\t\t\tself.laser_sound.play()\n\tdef extra_alien_timer(self):\n\t\tself.extra_spawn_time -= 1\n\t\tif self.extra_spawn_time <= 0:\n\t\t\tself.extra.add(Extra(choice(['right','left']),screen_width))\n\t\t\tself.extra_spawn_time = randint(400,800)\n\tdef collision_checks(self):\n\t\t# player lasers ",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.extra_spawn_time",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\tself.extra_spawn_time = randint(400,800)\n\tdef collision_checks(self):\n\t\t# player lasers \n\t\tif self.player.sprite.lasers:\n\t\t\tfor laser in self.player.sprite.lasers:\n\t\t\t\t# obstacle collisions\n\t\t\t\tif pygame.sprite.spritecollide(laser,self.blocks,True):\n\t\t\t\t\tlaser.kill()\n\t\t\t\t# alien collisions\n\t\t\t\taliens_hit = pygame.sprite.spritecollide(laser,self.aliens,True)",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\taliens_hit",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\t\taliens_hit = pygame.sprite.spritecollide(laser,self.aliens,True)\n\t\t\t\tif aliens_hit:\n\t\t\t\t\tfor alien in aliens_hit:\n\t\t\t\t\t\tself.score += alien.value\n\t\t\t\t\tlaser.kill()\n\t\t\t\t\tself.explosion_sound.play()\n\t\t\t\t# extra collision\n\t\t\t\tif pygame.sprite.spritecollide(laser,self.extra,True):\n\t\t\t\t\tself.score += 500\n\t\t\t\t\tlaser.kill()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tx",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\tx = self.live_x_start_pos + (live * (self.live_surf.get_size()[0] + 10))\n\t\t\tscreen.blit(self.live_surf,(x,8))\n\tdef display_score(self):\n\t\tscore_surf = self.font.render(f'score: {self.score}',False,'white')\n\t\tscore_rect = score_surf.get_rect(topleft = (10,-10))\n\t\tscreen.blit(score_surf,score_rect)\n\tdef victory_message(self):\n\t\tif not self.aliens.sprites():\n\t\t\tvictory_surf = self.font.render('You won',False,'white')\n\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tscore_surf",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tscore_surf = self.font.render(f'score: {self.score}',False,'white')\n\t\tscore_rect = score_surf.get_rect(topleft = (10,-10))\n\t\tscreen.blit(score_surf,score_rect)\n\tdef victory_message(self):\n\t\tif not self.aliens.sprites():\n\t\t\tvictory_surf = self.font.render('You won',False,'white')\n\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))\n\t\t\tscreen.blit(victory_surf,victory_rect)\n\tdef run(self):\n\t\tself.player.update()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tscore_rect",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tscore_rect = score_surf.get_rect(topleft = (10,-10))\n\t\tscreen.blit(score_surf,score_rect)\n\tdef victory_message(self):\n\t\tif not self.aliens.sprites():\n\t\t\tvictory_surf = self.font.render('You won',False,'white')\n\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))\n\t\t\tscreen.blit(victory_surf,victory_rect)\n\tdef run(self):\n\t\tself.player.update()\n\t\tself.alien_lasers.update()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tvictory_surf",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\tvictory_surf = self.font.render('You won',False,'white')\n\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))\n\t\t\tscreen.blit(victory_surf,victory_rect)\n\tdef run(self):\n\t\tself.player.update()\n\t\tself.alien_lasers.update()\n\t\tself.extra.update()\n\t\tself.aliens.update(self.alien_direction)\n\t\tself.alien_position_checker()\n\t\tself.extra_alien_timer()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tvictory_rect",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))\n\t\t\tscreen.blit(victory_surf,victory_rect)\n\tdef run(self):\n\t\tself.player.update()\n\t\tself.alien_lasers.update()\n\t\tself.extra.update()\n\t\tself.aliens.update(self.alien_direction)\n\t\tself.alien_position_checker()\n\t\tself.extra_alien_timer()\n\t\tself.collision_checks()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.tv",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.tv = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/tv.png').convert_alpha()\n\t\tself.tv = pygame.transform.scale(self.tv,(screen_width,screen_height))\n\tdef create_crt_lines(self):\n\t\tline_height = 3\n\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.tv",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tself.tv = pygame.transform.scale(self.tv,(screen_width,screen_height))\n\tdef create_crt_lines(self):\n\t\tline_height = 3\n\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))\n\t\tself.create_crt_lines()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tline_height",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tline_height = 3\n\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))\n\t\tself.create_crt_lines()\n\t\tscreen.blit(self.tv,(0,0))\nif __name__ == '__main__':",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\tline_amount",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))\n\t\tself.create_crt_lines()\n\t\tscreen.blit(self.tv,(0,0))\nif __name__ == '__main__':\n\tpygame.init()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\t\t\ty_pos",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))\n\t\tself.create_crt_lines()\n\t\tscreen.blit(self.tv,(0,0))\nif __name__ == '__main__':\n\tpygame.init()\n\tscreen_width = 600\n\tscreen_height = 600",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\tscreen_width",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\tscreen_width = 600\n\tscreen_height = 600\n\tscreen = pygame.display.set_mode((screen_width,screen_height))\n\tclock = pygame.time.Clock()\n\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\tscreen_height",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\tscreen_height = 600\n\tscreen = pygame.display.set_mode((screen_width,screen_height))\n\tclock = pygame.time.Clock()\n\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\tscreen",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\tscreen = pygame.display.set_mode((screen_width,screen_height))\n\tclock = pygame.time.Clock()\n\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\tclock",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\tclock = pygame.time.Clock()\n\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()\n\t\t\t\tsys.exit()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\tgame",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()\n\t\t\t\tsys.exit()\n\t\t\tif event.type == ALIENLASER:",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\tcrt",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()\n\t\t\t\tsys.exit()\n\t\t\tif event.type == ALIENLASER:\n\t\t\t\tgame.alien_shoot()",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "\tALIENLASER",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.index",
        "description": "atividade_pygame.6_space_veder.index",
        "peekOfCode": "\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()\n\t\t\t\tsys.exit()\n\t\t\tif event.type == ALIENLASER:\n\t\t\t\tgame.alien_shoot()\n\t\tscreen.fill((30,30,30))",
        "detail": "atividade_pygame.6_space_veder.index",
        "documentation": {}
    },
    {
        "label": "Laser",
        "kind": 6,
        "importPath": "atividade_pygame.6_space_veder.laser",
        "description": "atividade_pygame.6_space_veder.laser",
        "peekOfCode": "class Laser(pygame.sprite.Sprite):\n\tdef __init__(self,pos,speed,screen_height):\n\t\tsuper().__init__()\n\t\tself.image = pygame.Surface((4,20))\n\t\tself.image.fill('white')\n\t\tself.rect = self.image.get_rect(center = pos)\n\t\tself.speed = speed\n\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:",
        "detail": "atividade_pygame.6_space_veder.laser",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.laser",
        "description": "atividade_pygame.6_space_veder.laser",
        "peekOfCode": "\t\tself.image = pygame.Surface((4,20))\n\t\tself.image.fill('white')\n\t\tself.rect = self.image.get_rect(center = pos)\n\t\tself.speed = speed\n\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:\n\t\t\tself.kill()\n\tdef update(self):\n\t\tself.rect.y += self.speed",
        "detail": "atividade_pygame.6_space_veder.laser",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.laser",
        "description": "atividade_pygame.6_space_veder.laser",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(center = pos)\n\t\tself.speed = speed\n\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:\n\t\t\tself.kill()\n\tdef update(self):\n\t\tself.rect.y += self.speed\n\t\tself.destroy()",
        "detail": "atividade_pygame.6_space_veder.laser",
        "documentation": {}
    },
    {
        "label": "\t\tself.speed",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.laser",
        "description": "atividade_pygame.6_space_veder.laser",
        "peekOfCode": "\t\tself.speed = speed\n\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:\n\t\t\tself.kill()\n\tdef update(self):\n\t\tself.rect.y += self.speed\n\t\tself.destroy()",
        "detail": "atividade_pygame.6_space_veder.laser",
        "documentation": {}
    },
    {
        "label": "\t\tself.height_y_constraint",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.laser",
        "description": "atividade_pygame.6_space_veder.laser",
        "peekOfCode": "\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:\n\t\t\tself.kill()\n\tdef update(self):\n\t\tself.rect.y += self.speed\n\t\tself.destroy()",
        "detail": "atividade_pygame.6_space_veder.laser",
        "documentation": {}
    },
    {
        "label": "Block",
        "kind": 6,
        "importPath": "atividade_pygame.6_space_veder.obstacle",
        "description": "atividade_pygame.6_space_veder.obstacle",
        "peekOfCode": "class Block(pygame.sprite.Sprite):\n\tdef __init__(self,size,color,x,y):\n\t\tsuper().__init__()\n\t\tself.image = pygame.Surface((size,size))\n\t\tself.image.fill(color)\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\nshape = [\n'  xxxxxxx',\n' xxxxxxxxx',\n'xxxxxxxxxxx',",
        "detail": "atividade_pygame.6_space_veder.obstacle",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.obstacle",
        "description": "atividade_pygame.6_space_veder.obstacle",
        "peekOfCode": "\t\tself.image = pygame.Surface((size,size))\n\t\tself.image.fill(color)\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\nshape = [\n'  xxxxxxx',\n' xxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxx     xxx',",
        "detail": "atividade_pygame.6_space_veder.obstacle",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.obstacle",
        "description": "atividade_pygame.6_space_veder.obstacle",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(topleft = (x,y))\nshape = [\n'  xxxxxxx',\n' xxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxx     xxx',\n'xx       xx']",
        "detail": "atividade_pygame.6_space_veder.obstacle",
        "documentation": {}
    },
    {
        "label": "shape",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.obstacle",
        "description": "atividade_pygame.6_space_veder.obstacle",
        "peekOfCode": "shape = [\n'  xxxxxxx',\n' xxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxx     xxx',\n'xx       xx']",
        "detail": "atividade_pygame.6_space_veder.obstacle",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "class Player(pygame.sprite.Sprite):\n\tdef __init__(self,pos,constraint,speed):\n\t\tsuper().__init__()\n\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.rect = self.image.get_rect(midbottom = pos)\n\t\tself.speed = speed\n\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.rect = self.image.get_rect(midbottom = pos)\n\t\tself.speed = speed\n\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(midbottom = pos)\n\t\tself.speed = speed\n\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.speed",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.speed = speed\n\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.max_x_constraint",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.ready",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.laser_time",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.laser_cooldown",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:\n\t\t\tself.rect.x -= self.speed",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.lasers",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:\n\t\t\tself.rect.x -= self.speed\n\t\tif keys[pygame.K_SPACE] and self.ready:",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.laser_sound",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:\n\t\t\tself.rect.x -= self.speed\n\t\tif keys[pygame.K_SPACE] and self.ready:\n\t\t\tself.shoot_laser()",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\tkeys",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:\n\t\t\tself.rect.x -= self.speed\n\t\tif keys[pygame.K_SPACE] and self.ready:\n\t\t\tself.shoot_laser()\n\t\t\tself.ready = False\n\t\t\tself.laser_time = pygame.time.get_ticks()\n\t\t\tself.laser_sound.play()",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.ready",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\t\tself.ready = False\n\t\t\tself.laser_time = pygame.time.get_ticks()\n\t\t\tself.laser_sound.play()\n\tdef recharge(self):\n\t\tif not self.ready:\n\t\t\tcurrent_time = pygame.time.get_ticks()\n\t\t\tif current_time - self.laser_time >= self.laser_cooldown:\n\t\t\t\tself.ready = True\n\tdef constraint(self):\n\t\tif self.rect.left <= 0:",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.laser_time",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\t\tself.laser_time = pygame.time.get_ticks()\n\t\t\tself.laser_sound.play()\n\tdef recharge(self):\n\t\tif not self.ready:\n\t\t\tcurrent_time = pygame.time.get_ticks()\n\t\t\tif current_time - self.laser_time >= self.laser_cooldown:\n\t\t\t\tself.ready = True\n\tdef constraint(self):\n\t\tif self.rect.left <= 0:\n\t\t\tself.rect.left = 0",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tcurrent_time",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\t\tcurrent_time = pygame.time.get_ticks()\n\t\t\tif current_time - self.laser_time >= self.laser_cooldown:\n\t\t\t\tself.ready = True\n\tdef constraint(self):\n\t\tif self.rect.left <= 0:\n\t\t\tself.rect.left = 0\n\t\tif self.rect.right >= self.max_x_constraint:\n\t\t\tself.rect.right = self.max_x_constraint\n\tdef shoot_laser(self):\n\t\tself.lasers.add(Laser(self.rect.center,-8,self.rect.bottom))",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.ready",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\t\t\tself.ready = True\n\tdef constraint(self):\n\t\tif self.rect.left <= 0:\n\t\t\tself.rect.left = 0\n\t\tif self.rect.right >= self.max_x_constraint:\n\t\t\tself.rect.right = self.max_x_constraint\n\tdef shoot_laser(self):\n\t\tself.lasers.add(Laser(self.rect.center,-8,self.rect.bottom))\n\tdef update(self):\n\t\tself.get_input()",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.rect.left",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\t\tself.rect.left = 0\n\t\tif self.rect.right >= self.max_x_constraint:\n\t\t\tself.rect.right = self.max_x_constraint\n\tdef shoot_laser(self):\n\t\tself.lasers.add(Laser(self.rect.center,-8,self.rect.bottom))\n\tdef update(self):\n\t\tself.get_input()\n\t\tself.constraint()\n\t\tself.recharge()\n\t\tself.lasers.update()",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.rect.right",
        "kind": 5,
        "importPath": "atividade_pygame.6_space_veder.player",
        "description": "atividade_pygame.6_space_veder.player",
        "peekOfCode": "\t\t\tself.rect.right = self.max_x_constraint\n\tdef shoot_laser(self):\n\t\tself.lasers.add(Laser(self.rect.center,-8,self.rect.bottom))\n\tdef update(self):\n\t\tself.get_input()\n\t\tself.constraint()\n\t\tself.recharge()\n\t\tself.lasers.update()",
        "detail": "atividade_pygame.6_space_veder.player",
        "documentation": {}
    },
    {
        "label": "Spaceship",
        "kind": 6,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "class Spaceship(pygame.sprite.Sprite):\n    def __init__(self, x, y, health):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/player.png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n        self.last_shot = pygame.time.get_ticks()\n        self.health_start = health\n        self.health_remaining = health\n    def update(self):",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "Bullets",
        "kind": 6,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "class Bullets(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bullet.png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n    def update(self):\n        self.rect.y -= 5\n        if self.rect.bottom < 0:\n            self.kill()",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "Aliens",
        "kind": 6,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "class Aliens(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/alien\" +\n                                       str(random.randint(1, 4)) + \".png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n        self.move_counter = 0\n        self.move_direction = 1\n    def update(self):",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "Alien_Bullets",
        "kind": 6,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "class Alien_Bullets(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/alien_bullet.png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n    def update(self):\n        self.rect.y += 2\n        if self.rect.top > screen_height:\n            self.kill()",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "Explosion",
        "kind": 6,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "class Explosion(pygame.sprite.Sprite):\n    def __init__(self, x, y, size):\n        pygame.sprite.Sprite.__init__(self)\n        self.images = []\n        for numero in range(1, 6):\n            img = pygame.image.load(f\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/exp{numero}.png\")\n            if size == 1:\n                img = pygame.transform.scale(img, (20, 20))\n            if size == 2:\n                img = pygame.transform.scale(img, (40, 40))",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "draw_backGround",
        "kind": 2,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "def draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))\nclass Spaceship(pygame.sprite.Sprite):\n    def __init__(self, x, y, health):\n        pygame.sprite.Sprite.__init__(self)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "draw_text",
        "kind": 2,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "def draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))\nclass Spaceship(pygame.sprite.Sprite):\n    def __init__(self, x, y, health):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/player.png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n        self.last_shot = pygame.time.get_ticks()",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "create_aliens",
        "kind": 2,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "def create_aliens():\n    for row in range(rows):\n        for item in range(cols):\n            alien = Aliens(200 + item * 100, 90 + row * 70)\n            alien_group.add(alien)\nspaceship = Spaceship((screen_width//2), screen_height - 40, 3)\nspaceship_group.add(spaceship)\ncreate_aliens()\nrun = True\nwhile run:",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "clock = pygame.time.Clock()\nfps = 60\nscreen_width = 800\nscreen_height = 600\nexplosion_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "fps",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "fps = 60\nscreen_width = 800\nscreen_height = 600\nexplosion_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "screen_width",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "screen_width = 800\nscreen_height = 600\nexplosion_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "screen_height",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "screen_height = 600\nexplosion_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5\nalien_cooldown = 800",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "explosion_fx",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "explosion_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "explosion2_fx",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "explosion2_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "laser_fx",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "laser_fx = pygame.mixer.Sound(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "rows = 5\ncols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "cols",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "cols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "alien_cooldown",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "alien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "last_alien_shot",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "last_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "countdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "last_count",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "last_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "game_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "score = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "quantity_alien",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "quantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "RED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")\nterra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "GREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")\nterra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")\nlua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "WHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")\nterra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")\nlua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")\ndef draw_backGround():",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "screen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")\nterra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")\nlua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "fonte1",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "fonte1 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")\nterra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")\nlua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "fonte2",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "fonte2 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")\nterra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")\nlua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "fonte3",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "fonte3 = pygame.font.Font(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")\nterra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")\nlua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "backGround",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "backGround = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/bg.png\")\nterra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")\nlua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "terra",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "terra = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/terra.png\")\nlua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))\nclass Spaceship(pygame.sprite.Sprite):",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "lua",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "lua = pygame.image.load(\"C://Users/Softex/Documents/GitHub/Python/atividade/7_Space_invaders/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))\nclass Spaceship(pygame.sprite.Sprite):\n    def __init__(self, x, y, health):",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "spaceship_group",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "spaceship_group = pygame.sprite.Group()\nbullet_group = pygame.sprite.Group()\nalien_group = pygame.sprite.Group()\nalien_bullet_group = pygame.sprite.Group()\nexplosion_group = pygame.sprite.Group()\ndef create_aliens():\n    for row in range(rows):\n        for item in range(cols):\n            alien = Aliens(200 + item * 100, 90 + row * 70)\n            alien_group.add(alien)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "bullet_group",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "bullet_group = pygame.sprite.Group()\nalien_group = pygame.sprite.Group()\nalien_bullet_group = pygame.sprite.Group()\nexplosion_group = pygame.sprite.Group()\ndef create_aliens():\n    for row in range(rows):\n        for item in range(cols):\n            alien = Aliens(200 + item * 100, 90 + row * 70)\n            alien_group.add(alien)\nspaceship = Spaceship((screen_width//2), screen_height - 40, 3)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "alien_group",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "alien_group = pygame.sprite.Group()\nalien_bullet_group = pygame.sprite.Group()\nexplosion_group = pygame.sprite.Group()\ndef create_aliens():\n    for row in range(rows):\n        for item in range(cols):\n            alien = Aliens(200 + item * 100, 90 + row * 70)\n            alien_group.add(alien)\nspaceship = Spaceship((screen_width//2), screen_height - 40, 3)\nspaceship_group.add(spaceship)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "alien_bullet_group",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "alien_bullet_group = pygame.sprite.Group()\nexplosion_group = pygame.sprite.Group()\ndef create_aliens():\n    for row in range(rows):\n        for item in range(cols):\n            alien = Aliens(200 + item * 100, 90 + row * 70)\n            alien_group.add(alien)\nspaceship = Spaceship((screen_width//2), screen_height - 40, 3)\nspaceship_group.add(spaceship)\ncreate_aliens()",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "explosion_group",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "explosion_group = pygame.sprite.Group()\ndef create_aliens():\n    for row in range(rows):\n        for item in range(cols):\n            alien = Aliens(200 + item * 100, 90 + row * 70)\n            alien_group.add(alien)\nspaceship = Spaceship((screen_width//2), screen_height - 40, 3)\nspaceship_group.add(spaceship)\ncreate_aliens()\nrun = True",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "spaceship",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "spaceship = Spaceship((screen_width//2), screen_height - 40, 3)\nspaceship_group.add(spaceship)\ncreate_aliens()\nrun = True\nwhile run:\n    clock.tick(fps)\n    draw_backGround()\n    if countdown == 0:\n        draw_text(f'NAVES INIMIGAS RESTANTES: {score}', fonte1, WHITE, 10, 0)\n        draw_text('FASE 1', fonte1, WHITE, (screen_width//2 + 150), 0)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 5,
        "importPath": "atividade_pygame.7_Space_Invaders.index",
        "description": "atividade_pygame.7_Space_Invaders.index",
        "peekOfCode": "run = True\nwhile run:\n    clock.tick(fps)\n    draw_backGround()\n    if countdown == 0:\n        draw_text(f'NAVES INIMIGAS RESTANTES: {score}', fonte1, WHITE, 10, 0)\n        draw_text('FASE 1', fonte1, WHITE, (screen_width//2 + 150), 0)\n        if len(alien_group) < quantity_alien:\n            score -= (quantity_alien - len(alien_group))\n            quantity_alien = len(alien_group)",
        "detail": "atividade_pygame.7_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "printBoard",
        "kind": 2,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "def printBoard(matriz, numberLine, numberColumn):\n  for i in range(0, len(numberLine) * len(numberColumn)):\n    if i % len(numberLine) == 0:\n      print()\n    print(matriz[i], end=\" \")\nnumberLine = [3,0,4,1,3]\nnumberColumn = [4,1,2,2,2]\nbarcos = [3,3,2,2,1]\nmatriz = product(numberLine, numberColumn)\nmatriz = list(matriz)",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "numberLine",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "numberLine = [3,0,4,1,3]\nnumberColumn = [4,1,2,2,2]\nbarcos = [3,3,2,2,1]\nmatriz = product(numberLine, numberColumn)\nmatriz = list(matriz)\nprintBoard(matriz, numberLine, numberColumn)\npropBoard = []\nfor i in range(0, len(numberLine)):\n  for j in range(0, len(numberColumn)):\n    propBoard.append(Bool(\"P\" + str(i) + str(j)))",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "numberColumn",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "numberColumn = [4,1,2,2,2]\nbarcos = [3,3,2,2,1]\nmatriz = product(numberLine, numberColumn)\nmatriz = list(matriz)\nprintBoard(matriz, numberLine, numberColumn)\npropBoard = []\nfor i in range(0, len(numberLine)):\n  for j in range(0, len(numberColumn)):\n    propBoard.append(Bool(\"P\" + str(i) + str(j)))\nprintBoard(propBoard, numberLine, numberColumn)",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "barcos",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "barcos = [3,3,2,2,1]\nmatriz = product(numberLine, numberColumn)\nmatriz = list(matriz)\nprintBoard(matriz, numberLine, numberColumn)\npropBoard = []\nfor i in range(0, len(numberLine)):\n  for j in range(0, len(numberColumn)):\n    propBoard.append(Bool(\"P\" + str(i) + str(j)))\nprintBoard(propBoard, numberLine, numberColumn)\nprint(\"\\n\")",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "matriz",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "matriz = product(numberLine, numberColumn)\nmatriz = list(matriz)\nprintBoard(matriz, numberLine, numberColumn)\npropBoard = []\nfor i in range(0, len(numberLine)):\n  for j in range(0, len(numberColumn)):\n    propBoard.append(Bool(\"P\" + str(i) + str(j)))\nprintBoard(propBoard, numberLine, numberColumn)\nprint(\"\\n\")\nprint(propBoard)",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "matriz",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "matriz = list(matriz)\nprintBoard(matriz, numberLine, numberColumn)\npropBoard = []\nfor i in range(0, len(numberLine)):\n  for j in range(0, len(numberColumn)):\n    propBoard.append(Bool(\"P\" + str(i) + str(j)))\nprintBoard(propBoard, numberLine, numberColumn)\nprint(\"\\n\")\nprint(propBoard)\npropColumns = []",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "propBoard",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "propBoard = []\nfor i in range(0, len(numberLine)):\n  for j in range(0, len(numberColumn)):\n    propBoard.append(Bool(\"P\" + str(i) + str(j)))\nprintBoard(propBoard, numberLine, numberColumn)\nprint(\"\\n\")\nprint(propBoard)\npropColumns = []\nauxList = []\nfor adition in range(0, len(numberColumn)):",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "propColumns",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "propColumns = []\nauxList = []\nfor adition in range(0, len(numberColumn)):\n  for i in range(0, len(numberLine) * len(numberColumn), 5):\n    auxList.append(propBoard[i + adition])\n  propColumns.append(auxList)\n  auxList = []\nprint(propColumns)\npropLines = []\nauxList = []",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "auxList",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "auxList = []\nfor adition in range(0, len(numberColumn)):\n  for i in range(0, len(numberLine) * len(numberColumn), 5):\n    auxList.append(propBoard[i + adition])\n  propColumns.append(auxList)\n  auxList = []\nprint(propColumns)\npropLines = []\nauxList = []\nfor i in range(0, len(numberLine) * len(numberColumn)):",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "propLines",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "propLines = []\nauxList = []\nfor i in range(0, len(numberLine) * len(numberColumn)):\n  if ((i+1) % 5 == 0 and i != 0):\n    auxList.append(propBoard[i])\n    propLines.append(auxList)\n    auxList = []\n  else:\n    auxList.append(propBoard[i])\nprint(propLines)",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "auxList",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "auxList = []\nfor i in range(0, len(numberLine) * len(numberColumn)):\n  if ((i+1) % 5 == 0 and i != 0):\n    auxList.append(propBoard[i])\n    propLines.append(auxList)\n    auxList = []\n  else:\n    auxList.append(propBoard[i])\nprint(propLines)\n# construindo todas as formulas preposicionais das colunas",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "psi",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "psi = []\nfor i in range(0, len(propColumns)):\n  size_prop_True = numberColumn[i]\n  size_prop_False = len(numberColumn)-numberColumn[i]\n  column_True = combinations(propColumns[i], size_prop_True)\n  column_True = list(column_True)\n#  print(column_True)\n  column_False = combinations(propColumns[i], size_prop_False)\n  column_False = list(column_False)\n#  print(column_False)",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "psi",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "psi = And(psi)\nprint(psi)\n# construindo todas as formulas preposicionais das linhas\n#print(propLines)\n#print()\nteta = []\nfor i in range(0, len(propLines)):\n#  print(i)\n  size_prop_True = numberLine[i]\n  size_prop_False = len(numberLine)-numberLine[i]",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "teta",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "teta = []\nfor i in range(0, len(propLines)):\n#  print(i)\n  size_prop_True = numberLine[i]\n  size_prop_False = len(numberLine)-numberLine[i]\n  line_True = combinations(propLines[i], size_prop_True)\n  line_True = list(line_True)\n#  print(line_True)\n  line_False = combinations(propLines[i], size_prop_False)\n  line_False = list(line_False)",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "teta",
        "kind": 5,
        "importPath": "Lógica com python.Formalização da Batalha Naval",
        "description": "Lógica com python.Formalização da Batalha Naval",
        "peekOfCode": "teta = And(teta)\nprint(teta)",
        "detail": "Lógica com python.Formalização da Batalha Naval",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão1",
        "description": "Processamento de imagens.questão1",
        "peekOfCode": "image = cv2.imread('drive/MyDrive/fotos/balao.jpg')\nplt.imshow(image)\nplt.show()\nimage = cv2.imread('drive/MyDrive/fotos/logo/Logo black.png')\nplt.imshow(image)\nplt.show()",
        "detail": "Processamento de imagens.questão1",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão1",
        "description": "Processamento de imagens.questão1",
        "peekOfCode": "image = cv2.imread('drive/MyDrive/fotos/logo/Logo black.png')\nplt.imshow(image)\nplt.show()",
        "detail": "Processamento de imagens.questão1",
        "documentation": {}
    },
    {
        "label": "showImage",
        "kind": 2,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "def showImage(image):\n  plt.imshow(image)\n  plt.show()\ncolor_imageBGR = cv2.imread(\"drive/MyDrive/fotos/balao.jpg\")\ncolor_imageRGB = cv2.cvtColor(color_imageBGR, cv2.COLOR_BGR2RGB)\ngray_imageBGR = cv2.cvtColor(color_imageBGR, cv2.COLOR_BGR2GRAY)\ngray_imageRGB = cv2.cvtColor(gray_imageBGR, cv2.COLOR_BGR2RGB)\nshowImage(color_imageBGR)\nshowImage(color_imageRGB)\nshowImage(gray_imageBGR)",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "grayscale",
        "kind": 2,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "def grayscale(image):\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):\n      blue = image.item(y, x, 0)\n      green = image.item(y, x, 1)\n      red =  image.item(y, x, 2)\n      media = int((blue + green + red)/3)\n      image.itemset((y, x, 0), media)\n      image.itemset((y, x, 1), media)",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "grayscale2",
        "kind": 2,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "def grayscale2(image):\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):\n      blue = image.item(y, x, 0)\n      green = image.item(y, x, 1)\n      red =  image.item(y, x, 2)\n      media = int( (red*0.3) + (green*0.59) + (blue*0.11) )\n      image.itemset((y, x, 0), media)\n      image.itemset((y, x, 1), media)",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "color_imageBGR",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "color_imageBGR = cv2.imread(\"drive/MyDrive/fotos/balao.jpg\")\ncolor_imageRGB = cv2.cvtColor(color_imageBGR, cv2.COLOR_BGR2RGB)\ngray_imageBGR = cv2.cvtColor(color_imageBGR, cv2.COLOR_BGR2GRAY)\ngray_imageRGB = cv2.cvtColor(gray_imageBGR, cv2.COLOR_BGR2RGB)\nshowImage(color_imageBGR)\nshowImage(color_imageRGB)\nshowImage(gray_imageBGR)\nshowImage(gray_imageRGB)\ndef grayscale(image):\n  height, width, channel = image.shape",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "color_imageRGB",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "color_imageRGB = cv2.cvtColor(color_imageBGR, cv2.COLOR_BGR2RGB)\ngray_imageBGR = cv2.cvtColor(color_imageBGR, cv2.COLOR_BGR2GRAY)\ngray_imageRGB = cv2.cvtColor(gray_imageBGR, cv2.COLOR_BGR2RGB)\nshowImage(color_imageBGR)\nshowImage(color_imageRGB)\nshowImage(gray_imageBGR)\nshowImage(gray_imageRGB)\ndef grayscale(image):\n  height, width, channel = image.shape\n  for y in range(0, height):",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "gray_imageBGR",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "gray_imageBGR = cv2.cvtColor(color_imageBGR, cv2.COLOR_BGR2GRAY)\ngray_imageRGB = cv2.cvtColor(gray_imageBGR, cv2.COLOR_BGR2RGB)\nshowImage(color_imageBGR)\nshowImage(color_imageRGB)\nshowImage(gray_imageBGR)\nshowImage(gray_imageRGB)\ndef grayscale(image):\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "gray_imageRGB",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "gray_imageRGB = cv2.cvtColor(gray_imageBGR, cv2.COLOR_BGR2RGB)\nshowImage(color_imageBGR)\nshowImage(color_imageRGB)\nshowImage(gray_imageBGR)\nshowImage(gray_imageRGB)\ndef grayscale(image):\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):\n      blue = image.item(y, x, 0)",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "image = cv2.imread(\"drive/MyDrive/fotos/balao.jpg\")\ngray_imageFunction = grayscale(image)\nshowImage(gray_imageFunction)\ndef grayscale2(image):\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):\n      blue = image.item(y, x, 0)\n      green = image.item(y, x, 1)\n      red =  image.item(y, x, 2)",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "gray_imageFunction",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "gray_imageFunction = grayscale(image)\nshowImage(gray_imageFunction)\ndef grayscale2(image):\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):\n      blue = image.item(y, x, 0)\n      green = image.item(y, x, 1)\n      red =  image.item(y, x, 2)\n      media = int( (red*0.3) + (green*0.59) + (blue*0.11) )",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "image = cv2.imread(\"drive/MyDrive/fotos/mulher.jpg\")\ngray_imageFunction = grayscale(image)\nshowImage(gray_imageFunction)\ngray_imageFunction2 = grayscale2(image)\nshowImage(gray_imageFunction2)",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "gray_imageFunction",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "gray_imageFunction = grayscale(image)\nshowImage(gray_imageFunction)\ngray_imageFunction2 = grayscale2(image)\nshowImage(gray_imageFunction2)",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "gray_imageFunction2",
        "kind": 5,
        "importPath": "Processamento de imagens.questão2",
        "description": "Processamento de imagens.questão2",
        "peekOfCode": "gray_imageFunction2 = grayscale2(image)\nshowImage(gray_imageFunction2)",
        "detail": "Processamento de imagens.questão2",
        "documentation": {}
    },
    {
        "label": "showImage",
        "kind": 2,
        "importPath": "Processamento de imagens.questão3",
        "description": "Processamento de imagens.questão3",
        "peekOfCode": "def showImage(image):\n  plt.imshow(image)\n  plt.show()\nimage = cv2.imread('drive/MyDrive/fotos/balao.jpg')\nimageRGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimageHSV = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\nimageYUV = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)\nshowImage(imageRGB)\nshowImage(imageHSV)\nshowImage(imageYUV)",
        "detail": "Processamento de imagens.questão3",
        "documentation": {}
    },
    {
        "label": "RGB_to_HSI",
        "kind": 2,
        "importPath": "Processamento de imagens.questão3",
        "description": "Processamento de imagens.questão3",
        "peekOfCode": "def RGB_to_HSI(image):\n  import numpy as np\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):\n      blue = image.item(y, x, 0)\n      green = image.item(y, x, 1)\n      red =  image.item(y, x, 2)\n      I = (blue + green + red)/3\n      S = 255 - (3*np.min([blue,green,red])/(blue + green + red)) ",
        "detail": "Processamento de imagens.questão3",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão3",
        "description": "Processamento de imagens.questão3",
        "peekOfCode": "image = cv2.imread('drive/MyDrive/fotos/balao.jpg')\nimageRGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimageHSV = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\nimageYUV = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)\nshowImage(imageRGB)\nshowImage(imageHSV)\nshowImage(imageYUV)\ndef RGB_to_HSI(image):\n  import numpy as np\n  height, width, channel = image.shape",
        "detail": "Processamento de imagens.questão3",
        "documentation": {}
    },
    {
        "label": "imageRGB",
        "kind": 5,
        "importPath": "Processamento de imagens.questão3",
        "description": "Processamento de imagens.questão3",
        "peekOfCode": "imageRGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimageHSV = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\nimageYUV = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)\nshowImage(imageRGB)\nshowImage(imageHSV)\nshowImage(imageYUV)\ndef RGB_to_HSI(image):\n  import numpy as np\n  height, width, channel = image.shape\n  for y in range(0, height):",
        "detail": "Processamento de imagens.questão3",
        "documentation": {}
    },
    {
        "label": "imageHSV",
        "kind": 5,
        "importPath": "Processamento de imagens.questão3",
        "description": "Processamento de imagens.questão3",
        "peekOfCode": "imageHSV = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\nimageYUV = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)\nshowImage(imageRGB)\nshowImage(imageHSV)\nshowImage(imageYUV)\ndef RGB_to_HSI(image):\n  import numpy as np\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):",
        "detail": "Processamento de imagens.questão3",
        "documentation": {}
    },
    {
        "label": "imageYUV",
        "kind": 5,
        "importPath": "Processamento de imagens.questão3",
        "description": "Processamento de imagens.questão3",
        "peekOfCode": "imageYUV = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)\nshowImage(imageRGB)\nshowImage(imageHSV)\nshowImage(imageYUV)\ndef RGB_to_HSI(image):\n  import numpy as np\n  height, width, channel = image.shape\n  for y in range(0, height):\n    for x in range(0, width):\n      blue = image.item(y, x, 0)",
        "detail": "Processamento de imagens.questão3",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão3",
        "description": "Processamento de imagens.questão3",
        "peekOfCode": "image = cv2.imread('drive/MyDrive/fotos/balao.jpg')\nimageHSI = RGB_to_HSI(image)\nshowImage(imageHSI)",
        "detail": "Processamento de imagens.questão3",
        "documentation": {}
    },
    {
        "label": "imageHSI",
        "kind": 5,
        "importPath": "Processamento de imagens.questão3",
        "description": "Processamento de imagens.questão3",
        "peekOfCode": "imageHSI = RGB_to_HSI(image)\nshowImage(imageHSI)",
        "detail": "Processamento de imagens.questão3",
        "documentation": {}
    },
    {
        "label": "showImage",
        "kind": 2,
        "importPath": "Processamento de imagens.questão4",
        "description": "Processamento de imagens.questão4",
        "peekOfCode": "def showImage(image):\n  plt.imshow(image)\n  plt.show()\nimage = cv2.imread('drive/MyDrive/fotos/mulherSmall.jpg')\nimage1 = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nshowImage(image1)\nimage2 = image1[90:440, 310:480]\nshowImage(image2)\nimage1[90:440, 0:170] = image2\nshowImage(image1)",
        "detail": "Processamento de imagens.questão4",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão4",
        "description": "Processamento de imagens.questão4",
        "peekOfCode": "image = cv2.imread('drive/MyDrive/fotos/mulherSmall.jpg')\nimage1 = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nshowImage(image1)\nimage2 = image1[90:440, 310:480]\nshowImage(image2)\nimage1[90:440, 0:170] = image2\nshowImage(image1)\nimage1[90:440, 670-170:670] = image2\nshowImage(image1)",
        "detail": "Processamento de imagens.questão4",
        "documentation": {}
    },
    {
        "label": "image1",
        "kind": 5,
        "importPath": "Processamento de imagens.questão4",
        "description": "Processamento de imagens.questão4",
        "peekOfCode": "image1 = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nshowImage(image1)\nimage2 = image1[90:440, 310:480]\nshowImage(image2)\nimage1[90:440, 0:170] = image2\nshowImage(image1)\nimage1[90:440, 670-170:670] = image2\nshowImage(image1)",
        "detail": "Processamento de imagens.questão4",
        "documentation": {}
    },
    {
        "label": "image2",
        "kind": 5,
        "importPath": "Processamento de imagens.questão4",
        "description": "Processamento de imagens.questão4",
        "peekOfCode": "image2 = image1[90:440, 310:480]\nshowImage(image2)\nimage1[90:440, 0:170] = image2\nshowImage(image1)\nimage1[90:440, 670-170:670] = image2\nshowImage(image1)",
        "detail": "Processamento de imagens.questão4",
        "documentation": {}
    },
    {
        "label": "showImage",
        "kind": 2,
        "importPath": "Processamento de imagens.questão5",
        "description": "Processamento de imagens.questão5",
        "peekOfCode": "def showImage(image):\n  plt.imshow(image)\n  plt.show()\nimage = cv2.imread(\"drive/MyDrive/fotos/balao.jpg\")\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimage_sobelx = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=0, ksize=3)\nimage_sobely = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=3)\nimage_sobelxy = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=3)\nimage_sobelxy2 = cv2.addWeighted(image_sobelx, 0.5, image_sobely, 0.5, 0)",
        "detail": "Processamento de imagens.questão5",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão5",
        "description": "Processamento de imagens.questão5",
        "peekOfCode": "image = cv2.imread(\"drive/MyDrive/fotos/balao.jpg\")\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimage_sobelx = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=0, ksize=3)\nimage_sobely = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=3)\nimage_sobelxy = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=3)\nimage_sobelxy2 = cv2.addWeighted(image_sobelx, 0.5, image_sobely, 0.5, 0)\nshowImage(image)\nshowImage(image_sobelx)\nshowImage(image_sobely)",
        "detail": "Processamento de imagens.questão5",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão5",
        "description": "Processamento de imagens.questão5",
        "peekOfCode": "image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimage_sobelx = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=0, ksize=3)\nimage_sobely = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=3)\nimage_sobelxy = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=3)\nimage_sobelxy2 = cv2.addWeighted(image_sobelx, 0.5, image_sobely, 0.5, 0)\nshowImage(image)\nshowImage(image_sobelx)\nshowImage(image_sobely)\nshowImage(image_sobelxy)",
        "detail": "Processamento de imagens.questão5",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão5",
        "description": "Processamento de imagens.questão5",
        "peekOfCode": "image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimage_sobelx = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=0, ksize=3)\nimage_sobely = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=3)\nimage_sobelxy = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=3)\nimage_sobelxy2 = cv2.addWeighted(image_sobelx, 0.5, image_sobely, 0.5, 0)\nshowImage(image)\nshowImage(image_sobelx)\nshowImage(image_sobely)\nshowImage(image_sobelxy)\nshowImage(image_sobelxy2)",
        "detail": "Processamento de imagens.questão5",
        "documentation": {}
    },
    {
        "label": "image_sobelx",
        "kind": 5,
        "importPath": "Processamento de imagens.questão5",
        "description": "Processamento de imagens.questão5",
        "peekOfCode": "image_sobelx = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=0, ksize=3)\nimage_sobely = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=3)\nimage_sobelxy = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=3)\nimage_sobelxy2 = cv2.addWeighted(image_sobelx, 0.5, image_sobely, 0.5, 0)\nshowImage(image)\nshowImage(image_sobelx)\nshowImage(image_sobely)\nshowImage(image_sobelxy)\nshowImage(image_sobelxy2)",
        "detail": "Processamento de imagens.questão5",
        "documentation": {}
    },
    {
        "label": "image_sobely",
        "kind": 5,
        "importPath": "Processamento de imagens.questão5",
        "description": "Processamento de imagens.questão5",
        "peekOfCode": "image_sobely = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=3)\nimage_sobelxy = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=3)\nimage_sobelxy2 = cv2.addWeighted(image_sobelx, 0.5, image_sobely, 0.5, 0)\nshowImage(image)\nshowImage(image_sobelx)\nshowImage(image_sobely)\nshowImage(image_sobelxy)\nshowImage(image_sobelxy2)",
        "detail": "Processamento de imagens.questão5",
        "documentation": {}
    },
    {
        "label": "image_sobelxy",
        "kind": 5,
        "importPath": "Processamento de imagens.questão5",
        "description": "Processamento de imagens.questão5",
        "peekOfCode": "image_sobelxy = cv2.Sobel(src=image, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=3)\nimage_sobelxy2 = cv2.addWeighted(image_sobelx, 0.5, image_sobely, 0.5, 0)\nshowImage(image)\nshowImage(image_sobelx)\nshowImage(image_sobely)\nshowImage(image_sobelxy)\nshowImage(image_sobelxy2)",
        "detail": "Processamento de imagens.questão5",
        "documentation": {}
    },
    {
        "label": "image_sobelxy2",
        "kind": 5,
        "importPath": "Processamento de imagens.questão5",
        "description": "Processamento de imagens.questão5",
        "peekOfCode": "image_sobelxy2 = cv2.addWeighted(image_sobelx, 0.5, image_sobely, 0.5, 0)\nshowImage(image)\nshowImage(image_sobelx)\nshowImage(image_sobely)\nshowImage(image_sobelxy)\nshowImage(image_sobelxy2)",
        "detail": "Processamento de imagens.questão5",
        "documentation": {}
    },
    {
        "label": "showImage",
        "kind": 2,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "def showImage(image, title, size, mincolor=0, maxcolor=255):\n  fig, axis = plt.subplots(figsize = size)\n  axis.imshow(image, cmap='gray', vmin=mincolor, vmax=maxcolor)\n  axis.set_title(title, fontdict = {'fontsize': 22, 'fontweight': 'medium'})\n  plt.show()\nimage1 = cv2.imread(\"drive/MyDrive/fotos/mulherSmall.jpg\", 0)\nimage2 = cv2.imread(\"drive/MyDrive/fotos/logo/LogoWhite.png\", 0)\nshowImage(image1, \"mulher\", (7, 7))\nshowImage(image2, \"logo\", (7, 7))\nlimiar, image1B = cv2.threshold(image1, 190, 255, cv2.THRESH_BINARY)",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1 = cv2.imread(\"drive/MyDrive/fotos/mulherSmall.jpg\", 0)\nimage2 = cv2.imread(\"drive/MyDrive/fotos/logo/LogoWhite.png\", 0)\nshowImage(image1, \"mulher\", (7, 7))\nshowImage(image2, \"logo\", (7, 7))\nlimiar, image1B = cv2.threshold(image1, 190, 255, cv2.THRESH_BINARY)\nshowImage(image1B, \"mulher\", (7, 7))\nlimiar, image2B = cv2.threshold(image2, 170, 255, cv2.THRESH_BINARY)\nshowImage(image2B, \"logo\", (7, 7))\nimage1Not = cv2.bitwise_not(image1B)\nshowImage(image1Not, \"mulher com a cor invetida\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image2",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image2 = cv2.imread(\"drive/MyDrive/fotos/logo/LogoWhite.png\", 0)\nshowImage(image1, \"mulher\", (7, 7))\nshowImage(image2, \"logo\", (7, 7))\nlimiar, image1B = cv2.threshold(image1, 190, 255, cv2.THRESH_BINARY)\nshowImage(image1B, \"mulher\", (7, 7))\nlimiar, image2B = cv2.threshold(image2, 170, 255, cv2.THRESH_BINARY)\nshowImage(image2B, \"logo\", (7, 7))\nimage1Not = cv2.bitwise_not(image1B)\nshowImage(image1Not, \"mulher com a cor invetida\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1Not",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1Not = cv2.bitwise_not(image1B)\nshowImage(image1Not, \"mulher com a cor invetida\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimageOr = cv2.bitwise_or(image1B, image2B)\nshowImage(imageOr, \"imagem OR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimageOr = cv2.bitwise_or(image1B, image2B)\nshowImage(imageOr, \"imagem OR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_and(image1B, image2B)\nshowImage(image, \"imagem AND\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "#image2B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimageOr = cv2.bitwise_or(image1B, image2B)\nshowImage(imageOr, \"imagem OR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_and(image1B, image2B)\nshowImage(image, \"imagem AND\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "imageOr",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "imageOr = cv2.bitwise_or(image1B, image2B)\nshowImage(imageOr, \"imagem OR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_and(image1B, image2B)\nshowImage(image, \"imagem AND\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_and(image1B, image2B)\nshowImage(image, \"imagem AND\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_xor(image1B, image2B)\nshowImage(image, \"imagem XOR\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "#image2B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_and(image1B, image2B)\nshowImage(image, \"imagem AND\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_xor(image1B, image2B)\nshowImage(image, \"imagem XOR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image = cv2.bitwise_and(image1B, image2B)\nshowImage(image, \"imagem AND\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_xor(image1B, image2B)\nshowImage(image, \"imagem XOR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_xor(image1B, image2B)\nshowImage(image, \"imagem XOR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.addWeighted(image1B,0.8, image2B, 0.2,0)\nshowImage(image, \"imagem adição-media\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "#image2B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.bitwise_xor(image1B, image2B)\nshowImage(image, \"imagem XOR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.addWeighted(image1B,0.8, image2B, 0.2,0)\nshowImage(image, \"imagem adição-media\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image = cv2.bitwise_xor(image1B, image2B)\nshowImage(image, \"imagem XOR\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.addWeighted(image1B,0.8, image2B, 0.2,0)\nshowImage(image, \"imagem adição-media\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.addWeighted(image1B,0.8, image2B, 0.2,0)\nshowImage(image, \"imagem adição-media\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.subtract(image1B,image2B)\nshowImage(image, \"imagem subtração\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "#image2B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.addWeighted(image1B,0.8, image2B, 0.2,0)\nshowImage(image, \"imagem adição-media\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.subtract(image1B,image2B)\nshowImage(image, \"imagem subtração\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image = cv2.addWeighted(image1B,0.8, image2B, 0.2,0)\nshowImage(image, \"imagem adição-media\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.subtract(image1B,image2B)\nshowImage(image, \"imagem subtração\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.subtract(image1B,image2B)\nshowImage(image, \"imagem subtração\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.multiply(image1B,image2B)\nshowImage(image, \"imagem multiplicação\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "#image2B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.subtract(image1B,image2B)\nshowImage(image, \"imagem subtração\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.multiply(image1B,image2B)\nshowImage(image, \"imagem multiplicação\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image = cv2.subtract(image1B,image2B)\nshowImage(image, \"imagem subtração\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.multiply(image1B,image2B)\nshowImage(image, \"imagem multiplicação\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.multiply(image1B,image2B)\nshowImage(image, \"imagem multiplicação\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.divide(image2B,image1B)\nshowImage(image, \"imagem divisão\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "#image2B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.multiply(image1B,image2B)\nshowImage(image, \"imagem multiplicação\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.divide(image2B,image1B)\nshowImage(image, \"imagem divisão\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image = cv2.multiply(image1B,image2B)\nshowImage(image, \"imagem multiplicação\", (7, 7))\nimage1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.divide(image2B,image1B)\nshowImage(image, \"imagem divisão\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image1B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image1B = cv2.resize(image1B, (500, 500), interpolation = cv2.INTER_LINEAR)\n#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.divide(image2B,image1B)\nshowImage(image, \"imagem divisão\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "#image2B",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "#image2B = cv2.resize(image2B, (500, 500), interpolation = cv2.INTER_LINEAR)\nshowImage(image1B, \"mulher\", (7, 7))\nimage = cv2.divide(image2B,image1B)\nshowImage(image, \"imagem divisão\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão6",
        "description": "Processamento de imagens.questão6",
        "peekOfCode": "image = cv2.divide(image2B,image1B)\nshowImage(image, \"imagem divisão\", (7, 7))",
        "detail": "Processamento de imagens.questão6",
        "documentation": {}
    },
    {
        "label": "showImage",
        "kind": 2,
        "importPath": "Processamento de imagens.questão7",
        "description": "Processamento de imagens.questão7",
        "peekOfCode": "def showImage(image, title):\n  fig, axis = plt.subplots()\n  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n  axis.imshow(image)\n  axis.set_title(title)\n  plt.show()\nimage = cv2.imread('balao[1].jpg')\nheight, width, channel = image.shape\nshowImage(image, \"balao\")\nRotation = cv2.getRotationMatrix2D(((width-1)/2.0, (height-1)/2.0), 180, 1)",
        "detail": "Processamento de imagens.questão7",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Processamento de imagens.questão7",
        "description": "Processamento de imagens.questão7",
        "peekOfCode": "image = cv2.imread('balao[1].jpg')\nheight, width, channel = image.shape\nshowImage(image, \"balao\")\nRotation = cv2.getRotationMatrix2D(((width-1)/2.0, (height-1)/2.0), 180, 1)\nimageR = cv2.warpAffine(image, Rotation, (width, height))\nshowImage(imageR, \"rotation\")\nTranslation = np.float32([[1,0,-200], [0,1,100]])\nimageT = cv2.warpAffine(image, Translation, (width, height))\nshowImage(imageT, 'Translation')\nimageS = cv2.resize(image, None, fx = 2, fy = 2, interpolation = cv2.INTER_LINEAR)",
        "detail": "Processamento de imagens.questão7",
        "documentation": {}
    },
    {
        "label": "Rotation",
        "kind": 5,
        "importPath": "Processamento de imagens.questão7",
        "description": "Processamento de imagens.questão7",
        "peekOfCode": "Rotation = cv2.getRotationMatrix2D(((width-1)/2.0, (height-1)/2.0), 180, 1)\nimageR = cv2.warpAffine(image, Rotation, (width, height))\nshowImage(imageR, \"rotation\")\nTranslation = np.float32([[1,0,-200], [0,1,100]])\nimageT = cv2.warpAffine(image, Translation, (width, height))\nshowImage(imageT, 'Translation')\nimageS = cv2.resize(image, None, fx = 2, fy = 2, interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 2x\")\nimageS = cv2.resize(image,(int((1/2)*width), int((1/2)*height)), interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 1/2x\")",
        "detail": "Processamento de imagens.questão7",
        "documentation": {}
    },
    {
        "label": "imageR",
        "kind": 5,
        "importPath": "Processamento de imagens.questão7",
        "description": "Processamento de imagens.questão7",
        "peekOfCode": "imageR = cv2.warpAffine(image, Rotation, (width, height))\nshowImage(imageR, \"rotation\")\nTranslation = np.float32([[1,0,-200], [0,1,100]])\nimageT = cv2.warpAffine(image, Translation, (width, height))\nshowImage(imageT, 'Translation')\nimageS = cv2.resize(image, None, fx = 2, fy = 2, interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 2x\")\nimageS = cv2.resize(image,(int((1/2)*width), int((1/2)*height)), interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 1/2x\")",
        "detail": "Processamento de imagens.questão7",
        "documentation": {}
    },
    {
        "label": "Translation",
        "kind": 5,
        "importPath": "Processamento de imagens.questão7",
        "description": "Processamento de imagens.questão7",
        "peekOfCode": "Translation = np.float32([[1,0,-200], [0,1,100]])\nimageT = cv2.warpAffine(image, Translation, (width, height))\nshowImage(imageT, 'Translation')\nimageS = cv2.resize(image, None, fx = 2, fy = 2, interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 2x\")\nimageS = cv2.resize(image,(int((1/2)*width), int((1/2)*height)), interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 1/2x\")",
        "detail": "Processamento de imagens.questão7",
        "documentation": {}
    },
    {
        "label": "imageT",
        "kind": 5,
        "importPath": "Processamento de imagens.questão7",
        "description": "Processamento de imagens.questão7",
        "peekOfCode": "imageT = cv2.warpAffine(image, Translation, (width, height))\nshowImage(imageT, 'Translation')\nimageS = cv2.resize(image, None, fx = 2, fy = 2, interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 2x\")\nimageS = cv2.resize(image,(int((1/2)*width), int((1/2)*height)), interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 1/2x\")",
        "detail": "Processamento de imagens.questão7",
        "documentation": {}
    },
    {
        "label": "imageS",
        "kind": 5,
        "importPath": "Processamento de imagens.questão7",
        "description": "Processamento de imagens.questão7",
        "peekOfCode": "imageS = cv2.resize(image, None, fx = 2, fy = 2, interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 2x\")\nimageS = cv2.resize(image,(int((1/2)*width), int((1/2)*height)), interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 1/2x\")",
        "detail": "Processamento de imagens.questão7",
        "documentation": {}
    },
    {
        "label": "imageS",
        "kind": 5,
        "importPath": "Processamento de imagens.questão7",
        "description": "Processamento de imagens.questão7",
        "peekOfCode": "imageS = cv2.resize(image,(int((1/2)*width), int((1/2)*height)), interpolation = cv2.INTER_LINEAR)\nshowImage(imageS, \"Scaling 1/2x\")",
        "detail": "Processamento de imagens.questão7",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "x = sp.symbols('x')\ny = sp.symbols('y')\nVp = sp.S('25/2')\nVm = sp.S('3/2')\nVa = sp.S('5/2')\nfunction_step1 = sp.sqrt((x**2) - (160*x) + 7300)/(Vp)\nfunction_step2 = sp.sqrt((x - y)**2 + 2500)/(Vm)\nfunction_step3 = sp.sqrt((y**2) + 400)/(Va)\nfunction_T = function_step1 + function_step2 + function_step3\nfunction_T",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "y = sp.symbols('y')\nVp = sp.S('25/2')\nVm = sp.S('3/2')\nVa = sp.S('5/2')\nfunction_step1 = sp.sqrt((x**2) - (160*x) + 7300)/(Vp)\nfunction_step2 = sp.sqrt((x - y)**2 + 2500)/(Vm)\nfunction_step3 = sp.sqrt((y**2) + 400)/(Va)\nfunction_T = function_step1 + function_step2 + function_step3\nfunction_T\n#(b) Plote um gráfico 3D da superfície z=T(x,y) usando a função plot3d.",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "Vp",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "Vp = sp.S('25/2')\nVm = sp.S('3/2')\nVa = sp.S('5/2')\nfunction_step1 = sp.sqrt((x**2) - (160*x) + 7300)/(Vp)\nfunction_step2 = sp.sqrt((x - y)**2 + 2500)/(Vm)\nfunction_step3 = sp.sqrt((y**2) + 400)/(Va)\nfunction_T = function_step1 + function_step2 + function_step3\nfunction_T\n#(b) Plote um gráfico 3D da superfície z=T(x,y) usando a função plot3d.\nsp.plotting.plot3d(function_T, (x, 100, -100), (y, 100, -100))",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "Vm",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "Vm = sp.S('3/2')\nVa = sp.S('5/2')\nfunction_step1 = sp.sqrt((x**2) - (160*x) + 7300)/(Vp)\nfunction_step2 = sp.sqrt((x - y)**2 + 2500)/(Vm)\nfunction_step3 = sp.sqrt((y**2) + 400)/(Va)\nfunction_T = function_step1 + function_step2 + function_step3\nfunction_T\n#(b) Plote um gráfico 3D da superfície z=T(x,y) usando a função plot3d.\nsp.plotting.plot3d(function_T, (x, 100, -100), (y, 100, -100))\n#(c) Plote um gráfico com curvas de nível T(x,y) = c, para c pertence { 0, 30, 60, 120, 150, 180}, ",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "Va",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "Va = sp.S('5/2')\nfunction_step1 = sp.sqrt((x**2) - (160*x) + 7300)/(Vp)\nfunction_step2 = sp.sqrt((x - y)**2 + 2500)/(Vm)\nfunction_step3 = sp.sqrt((y**2) + 400)/(Va)\nfunction_T = function_step1 + function_step2 + function_step3\nfunction_T\n#(b) Plote um gráfico 3D da superfície z=T(x,y) usando a função plot3d.\nsp.plotting.plot3d(function_T, (x, 100, -100), (y, 100, -100))\n#(c) Plote um gráfico com curvas de nível T(x,y) = c, para c pertence { 0, 30, 60, 120, 150, 180}, \n#usando a função plot_implicit.",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "function_step1",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "function_step1 = sp.sqrt((x**2) - (160*x) + 7300)/(Vp)\nfunction_step2 = sp.sqrt((x - y)**2 + 2500)/(Vm)\nfunction_step3 = sp.sqrt((y**2) + 400)/(Va)\nfunction_T = function_step1 + function_step2 + function_step3\nfunction_T\n#(b) Plote um gráfico 3D da superfície z=T(x,y) usando a função plot3d.\nsp.plotting.plot3d(function_T, (x, 100, -100), (y, 100, -100))\n#(c) Plote um gráfico com curvas de nível T(x,y) = c, para c pertence { 0, 30, 60, 120, 150, 180}, \n#usando a função plot_implicit.\nfor i in range(0, 210, 30):",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "function_step2",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "function_step2 = sp.sqrt((x - y)**2 + 2500)/(Vm)\nfunction_step3 = sp.sqrt((y**2) + 400)/(Va)\nfunction_T = function_step1 + function_step2 + function_step3\nfunction_T\n#(b) Plote um gráfico 3D da superfície z=T(x,y) usando a função plot3d.\nsp.plotting.plot3d(function_T, (x, 100, -100), (y, 100, -100))\n#(c) Plote um gráfico com curvas de nível T(x,y) = c, para c pertence { 0, 30, 60, 120, 150, 180}, \n#usando a função plot_implicit.\nfor i in range(0, 210, 30):\n  plot1 = sp.plot_implicit(sp.Eq(function_T, i), (x, -400, 400), (y, -400, 400), adaptive=False)",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "function_step3",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "function_step3 = sp.sqrt((y**2) + 400)/(Va)\nfunction_T = function_step1 + function_step2 + function_step3\nfunction_T\n#(b) Plote um gráfico 3D da superfície z=T(x,y) usando a função plot3d.\nsp.plotting.plot3d(function_T, (x, 100, -100), (y, 100, -100))\n#(c) Plote um gráfico com curvas de nível T(x,y) = c, para c pertence { 0, 30, 60, 120, 150, 180}, \n#usando a função plot_implicit.\nfor i in range(0, 210, 30):\n  plot1 = sp.plot_implicit(sp.Eq(function_T, i), (x, -400, 400), (y, -400, 400), adaptive=False)\n  print()",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "function_T",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "function_T = function_step1 + function_step2 + function_step3\nfunction_T\n#(b) Plote um gráfico 3D da superfície z=T(x,y) usando a função plot3d.\nsp.plotting.plot3d(function_T, (x, 100, -100), (y, 100, -100))\n#(c) Plote um gráfico com curvas de nível T(x,y) = c, para c pertence { 0, 30, 60, 120, 150, 180}, \n#usando a função plot_implicit.\nfor i in range(0, 210, 30):\n  plot1 = sp.plot_implicit(sp.Eq(function_T, i), (x, -400, 400), (y, -400, 400), adaptive=False)\n  print()\n#(d) Utilize a função solve da SymPy para determinar a trajetória que corresponde ao tempo de salvamento mínimo. ",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "equation_1",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "equation_1 = sp.Eq(function_T.diff(x),0)\nequation_2 = sp.Eq(function_T.diff(y),0)\nresultados = sp.nsolve([equation_1, equation_2], (x, y), [1, 1])\nx_1 = resultados[0]\nx_2 = resultados[1]\nfig, ax = plt.subplots()\nplt.plot([80, x_1, x_2, 0], [30, 0, -50, -70], color = 'Cyan', marker = 'o', markersize = 5)\nplt.grid(True)\nplt.title('Gráfico da Trajetória de Tempo Mínimo')\nplt.xlabel('Eixo X')",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "equation_2",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "equation_2 = sp.Eq(function_T.diff(y),0)\nresultados = sp.nsolve([equation_1, equation_2], (x, y), [1, 1])\nx_1 = resultados[0]\nx_2 = resultados[1]\nfig, ax = plt.subplots()\nplt.plot([80, x_1, x_2, 0], [30, 0, -50, -70], color = 'Cyan', marker = 'o', markersize = 5)\nplt.grid(True)\nplt.title('Gráfico da Trajetória de Tempo Mínimo')\nplt.xlabel('Eixo X')\nplt.ylabel('Eixo Y')",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "resultados",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "resultados = sp.nsolve([equation_1, equation_2], (x, y), [1, 1])\nx_1 = resultados[0]\nx_2 = resultados[1]\nfig, ax = plt.subplots()\nplt.plot([80, x_1, x_2, 0], [30, 0, -50, -70], color = 'Cyan', marker = 'o', markersize = 5)\nplt.grid(True)\nplt.title('Gráfico da Trajetória de Tempo Mínimo')\nplt.xlabel('Eixo X')\nplt.ylabel('Eixo Y')\nplt.show()",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "x_1",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "x_1 = resultados[0]\nx_2 = resultados[1]\nfig, ax = plt.subplots()\nplt.plot([80, x_1, x_2, 0], [30, 0, -50, -70], color = 'Cyan', marker = 'o', markersize = 5)\nplt.grid(True)\nplt.title('Gráfico da Trajetória de Tempo Mínimo')\nplt.xlabel('Eixo X')\nplt.ylabel('Eixo Y')\nplt.show()",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    },
    {
        "label": "x_2",
        "kind": 5,
        "importPath": "Trabalho de Cálculo 2.projeto",
        "description": "Trabalho de Cálculo 2.projeto",
        "peekOfCode": "x_2 = resultados[1]\nfig, ax = plt.subplots()\nplt.plot([80, x_1, x_2, 0], [30, 0, -50, -70], color = 'Cyan', marker = 'o', markersize = 5)\nplt.grid(True)\nplt.title('Gráfico da Trajetória de Tempo Mínimo')\nplt.xlabel('Eixo X')\nplt.ylabel('Eixo Y')\nplt.show()",
        "detail": "Trabalho de Cálculo 2.projeto",
        "documentation": {}
    }
]