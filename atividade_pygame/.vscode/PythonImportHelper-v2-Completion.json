[
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "laser",
        "description": "laser",
        "isExtraImport": true,
        "detail": "laser",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "laser",
        "description": "laser",
        "isExtraImport": true,
        "detail": "laser",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "laser",
        "description": "laser",
        "isExtraImport": true,
        "detail": "laser",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "laser",
        "description": "laser",
        "isExtraImport": true,
        "detail": "laser",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "obstacle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "obstacle",
        "description": "obstacle",
        "detail": "obstacle",
        "documentation": {}
    },
    {
        "label": "Alien",
        "importPath": "alien",
        "description": "alien",
        "isExtraImport": true,
        "detail": "alien",
        "documentation": {}
    },
    {
        "label": "Extra",
        "importPath": "alien",
        "description": "alien",
        "isExtraImport": true,
        "detail": "alien",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "Laser",
        "kind": 6,
        "importPath": "0_Projeto_de_LP.laser",
        "description": "0_Projeto_de_LP.laser",
        "peekOfCode": "class Laser:\n    def __init__(self, width, hight, sizeScreen, screen):\n        self.screen = screen\n        self.width = width\n        self.hight = hight\n        self.max_width = sizeScreen[0]\n        self.max_hight = sizeScreen[1]\n        pass\n    def draw_laser(self):\n        pygame.draw.rect(self.screen, (255,255,255), ",
        "detail": "0_Projeto_de_LP.laser",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "0_Projeto_de_LP.player",
        "description": "0_Projeto_de_LP.player",
        "peekOfCode": "class Player:\n    def __init__(self, screen, width, hight, sizeScreen):\n        self.shoot = Laser(width//2 - 30, hight - 50,sizeScreen, screen)\n        self.screen = screen\n        self.width = width//2 - 30\n        self.hight = hight - 40\n        self.max_width = sizeScreen[0]\n        self.max_hight = sizeScreen[1]\n        self.image = pygame.image.load(r'C://Users/Softex/Documents/GitHub/Python/atividade/0_Projeto_de_LP/assets/image/player.png')\n        pass",
        "detail": "0_Projeto_de_LP.player",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "1_Primeiro_atividade.1_hello World",
        "description": "1_Primeiro_atividade.1_hello World",
        "peekOfCode": "screen = pygame.display.set_mode((1280, 720))\nclock = pygame.time.Clock()\nrunning = True\ndt = 0\nplayer_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:",
        "detail": "1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "1_Primeiro_atividade.1_hello World",
        "description": "1_Primeiro_atividade.1_hello World",
        "peekOfCode": "clock = pygame.time.Clock()\nrunning = True\ndt = 0\nplayer_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False",
        "detail": "1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "1_Primeiro_atividade.1_hello World",
        "description": "1_Primeiro_atividade.1_hello World",
        "peekOfCode": "running = True\ndt = 0\nplayer_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # fill the screen with a color to wipe away anything from last frame",
        "detail": "1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "1_Primeiro_atividade.1_hello World",
        "description": "1_Primeiro_atividade.1_hello World",
        "peekOfCode": "dt = 0\nplayer_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # fill the screen with a color to wipe away anything from last frame\n    screen.fill(\"white\")",
        "detail": "1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "player_pos",
        "kind": 5,
        "importPath": "1_Primeiro_atividade.1_hello World",
        "description": "1_Primeiro_atividade.1_hello World",
        "peekOfCode": "player_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2)\nwhile running:\n    # poll for events\n    # pygame.QUIT event means the user clicked X to close your window\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # fill the screen with a color to wipe away anything from last frame\n    screen.fill(\"white\")\n    pygame.draw.circle(screen, \"red\", player_pos, 80)",
        "detail": "1_Primeiro_atividade.1_hello World",
        "documentation": {}
    },
    {
        "label": "level_jogo",
        "kind": 2,
        "importPath": "2_segundo_projeto.1_numero_alatorio",
        "description": "2_segundo_projeto.1_numero_alatorio",
        "peekOfCode": "def level_jogo():    \n    level1 = 20\n    level2 = 10\n    level3 = 5\n    print('Nível do jogo: ')\n    print('1 - Fácil')\n    print('2 - Médio')\n    print('3 - Difícil')\n    level = int(input('Digite qual o nível: '))\n    if level == 1:",
        "detail": "2_segundo_projeto.1_numero_alatorio",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 2,
        "importPath": "2_segundo_projeto.1_numero_alatorio",
        "description": "2_segundo_projeto.1_numero_alatorio",
        "peekOfCode": "def result(secret_number):\n    number_user = -1\n    while number_user < 0 or number_user > 100:\n        number_user = int(input('Digite um número entre 0 e 100: '))\n    if number_user == secret_number:\n        print('Você acertou')\n        return -1\n    else:\n        if number_user > secret_number:\n            print(f'O número {number_user} é maior que o número secreto')",
        "detail": "2_segundo_projeto.1_numero_alatorio",
        "documentation": {}
    },
    {
        "label": "number_secret",
        "kind": 2,
        "importPath": "2_segundo_projeto.1_numero_alatorio",
        "description": "2_segundo_projeto.1_numero_alatorio",
        "peekOfCode": "def number_secret():\n    #number1 = int(random.random() * 100)\n    #number2 = random.randrange(0, 101)\n    number3 = random.randint(0, 100)\n    return number3\nif __name__ == \"__main__\":\n    #gameLoop\n    secret_number = number_secret()\n    times = level_jogo()\n    pontos = 1000",
        "detail": "2_segundo_projeto.1_numero_alatorio",
        "documentation": {}
    },
    {
        "label": "secreta_palavra",
        "kind": 2,
        "importPath": "3_jogo_da_forca.Jogo_da_forca",
        "description": "3_jogo_da_forca.Jogo_da_forca",
        "peekOfCode": "def secreta_palavra():\n    palavras = ['Monitor', 'Teclado', 'Mouse', \n                'Impressora', 'Scanner', 'Notebook']\n    return palavras[random.randrange(0, len(palavras))].upper()\nif __name__ == '__main__':\n    palavra_secreta = secreta_palavra()\n    palavra_secretaOriginal = palavra_secreta\n    palavra_user = len(palavra_secreta) * '_'\n    life = 7\n    while life > 0:",
        "detail": "3_jogo_da_forca.Jogo_da_forca",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "screen = pygame.display.set_mode((800,600),0)\npoint1 = (200, 200)\npoint2 = (600, 200)\npoint3 = (400, 100)\npoint4 = (250, 250)\npoint5 = (450, 250)\ncolor1 = (50, 100, 200)\nAMARELO = (255,255,0)\nPRETO = (0,0,0)\nwhile True:",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "point1",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "point1 = (200, 200)\npoint2 = (600, 200)\npoint3 = (400, 100)\npoint4 = (250, 250)\npoint5 = (450, 250)\ncolor1 = (50, 100, 200)\nAMARELO = (255,255,0)\nPRETO = (0,0,0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "point2",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "point2 = (600, 200)\npoint3 = (400, 100)\npoint4 = (250, 250)\npoint5 = (450, 250)\ncolor1 = (50, 100, 200)\nAMARELO = (255,255,0)\nPRETO = (0,0,0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)\n    #rect = (600, 500, 50, 50)",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "point3",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "point3 = (400, 100)\npoint4 = (250, 250)\npoint5 = (450, 250)\ncolor1 = (50, 100, 200)\nAMARELO = (255,255,0)\nPRETO = (0,0,0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)\n    #rect = (600, 500, 50, 50)\n    #pygame.draw.rect(screen, (45,200,61), rect)",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "point4",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "point4 = (250, 250)\npoint5 = (450, 250)\ncolor1 = (50, 100, 200)\nAMARELO = (255,255,0)\nPRETO = (0,0,0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)\n    #rect = (600, 500, 50, 50)\n    #pygame.draw.rect(screen, (45,200,61), rect)\n    #pygame.draw.polygon(screen, (200,56,21), [(100,100), (200,200), (100,200)],3)",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "point5",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "point5 = (450, 250)\ncolor1 = (50, 100, 200)\nAMARELO = (255,255,0)\nPRETO = (0,0,0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)\n    #rect = (600, 500, 50, 50)\n    #pygame.draw.rect(screen, (45,200,61), rect)\n    #pygame.draw.polygon(screen, (200,56,21), [(100,100), (200,200), (100,200)],3)\n    #pygame.draw.line(screen, (255,255,0), (300,0),(300, 500), 3)",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "color1",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "color1 = (50, 100, 200)\nAMARELO = (255,255,0)\nPRETO = (0,0,0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)\n    #rect = (600, 500, 50, 50)\n    #pygame.draw.rect(screen, (45,200,61), rect)\n    #pygame.draw.polygon(screen, (200,56,21), [(100,100), (200,200), (100,200)],3)\n    #pygame.draw.line(screen, (255,255,0), (300,0),(300, 500), 3)\n    casaEstrutura = (point1[0], point1[1], 400,150)",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "AMARELO",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "AMARELO = (255,255,0)\nPRETO = (0,0,0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)\n    #rect = (600, 500, 50, 50)\n    #pygame.draw.rect(screen, (45,200,61), rect)\n    #pygame.draw.polygon(screen, (200,56,21), [(100,100), (200,200), (100,200)],3)\n    #pygame.draw.line(screen, (255,255,0), (300,0),(300, 500), 3)\n    casaEstrutura = (point1[0], point1[1], 400,150)\n    pygame.draw.rect(screen, color1, casaEstrutura, 3)",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "PRETO",
        "kind": 5,
        "importPath": "4 _Desenhando_uma_casa.index",
        "description": "4 _Desenhando_uma_casa.index",
        "peekOfCode": "PRETO = (0,0,0)\nwhile True:\n    #pygame.draw.rect(screen, (46,46,200), (400, 300, 200,200), 2)\n    #rect = (600, 500, 50, 50)\n    #pygame.draw.rect(screen, (45,200,61), rect)\n    #pygame.draw.polygon(screen, (200,56,21), [(100,100), (200,200), (100,200)],3)\n    #pygame.draw.line(screen, (255,255,0), (300,0),(300, 500), 3)\n    casaEstrutura = (point1[0], point1[1], 400,150)\n    pygame.draw.rect(screen, color1, casaEstrutura, 3)\n    casaTelhado = [point1, point2, point3]",
        "detail": "4 _Desenhando_uma_casa.index",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "kind": 6,
        "importPath": "5_Pacman.index",
        "description": "5_Pacman.index",
        "peekOfCode": "class Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen):\n        pygame.sprite.Sprite.__init__(self)\n        self.centroX = 400\n        self.centroY = 300\n        self.centro = (self.centroX, self.centroY)\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0\n        self.speed_x = 1",
        "detail": "5_Pacman.index",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "5_Pacman.index",
        "description": "5_Pacman.index",
        "peekOfCode": "screen = pygame.display.set_mode((800,600),0)\nYELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen):\n        pygame.sprite.Sprite.__init__(self)\n        self.centroX = 400\n        self.centroY = 300\n        self.centro = (self.centroX, self.centroY)\n        self.tamanho = 100",
        "detail": "5_Pacman.index",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "5_Pacman.index",
        "description": "5_Pacman.index",
        "peekOfCode": "YELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen):\n        pygame.sprite.Sprite.__init__(self)\n        self.centroX = 400\n        self.centroY = 300\n        self.centro = (self.centroX, self.centroY)\n        self.tamanho = 100\n        self.raio = self.tamanho // 2",
        "detail": "5_Pacman.index",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "5_Pacman.index",
        "description": "5_Pacman.index",
        "peekOfCode": "BLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen):\n        pygame.sprite.Sprite.__init__(self)\n        self.centroX = 400\n        self.centroY = 300\n        self.centro = (self.centroX, self.centroY)\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0",
        "detail": "5_Pacman.index",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "kind": 6,
        "importPath": "5_Pacman.index2",
        "description": "5_Pacman.index2",
        "peekOfCode": "class Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0\n        self.speed_x = 0.2\n        self.speed_y = 0.2",
        "detail": "5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "sizeScreen",
        "kind": 5,
        "importPath": "5_Pacman.index2",
        "description": "5_Pacman.index2",
        "peekOfCode": "sizeScreen = (800,600)\nscreen = pygame.display.set_mode(sizeScreen,0)\nYELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100",
        "detail": "5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "5_Pacman.index2",
        "description": "5_Pacman.index2",
        "peekOfCode": "screen = pygame.display.set_mode(sizeScreen,0)\nYELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100\n        self.raio = self.tamanho // 2",
        "detail": "5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "5_Pacman.index2",
        "description": "5_Pacman.index2",
        "peekOfCode": "YELLOW = (255, 255, 0)\nBLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0",
        "detail": "5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "5_Pacman.index2",
        "description": "5_Pacman.index2",
        "peekOfCode": "BLACK = (0, 0, 0)\nclass Pacman(pygame.sprite.Sprite):\n    def __init__(self, screen, sizeScreen):\n        self.screen = screen\n        self.centroX = 400\n        self.centroY = 300\n        self.tamanho = 100\n        self.raio = self.tamanho // 2\n        self.current = 0\n        self.speed_x = 0.2",
        "detail": "5_Pacman.index2",
        "documentation": {}
    },
    {
        "label": "Alien",
        "kind": 6,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "class Alien(pygame.sprite.Sprite):\n\tdef __init__(self,color,x,y):\n\t\tsuper().__init__()\n\t\tfile_path = 'C://Users/Softex/Desktop/Space-invaders-main/graphics/' + color + '.png'\n\t\tself.image = pygame.image.load(file_path).convert_alpha()\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\n\t\tif color == 'red': self.value = 100\n\t\telif color == 'green': self.value = 200\n\t\telse: self.value = 300\n\tdef update(self,direction):",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "Extra",
        "kind": 6,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "class Extra(pygame.sprite.Sprite):\n\tdef __init__(self,side,screen_width):\n\t\tsuper().__init__()\n\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/extra.png').convert_alpha()\n\t\tif side == 'right':\n\t\t\tx = screen_width + 50\n\t\t\tself.speed = - 3\n\t\telse:\n\t\t\tx = -50\n\t\t\tself.speed = 3",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\tfile_path",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\tfile_path = 'C://Users/Softex/Desktop/Space-invaders-main/graphics/' + color + '.png'\n\t\tself.image = pygame.image.load(file_path).convert_alpha()\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\n\t\tif color == 'red': self.value = 100\n\t\telif color == 'green': self.value = 200\n\t\telse: self.value = 300\n\tdef update(self,direction):\n\t\tself.rect.x += direction\nclass Extra(pygame.sprite.Sprite):\n\tdef __init__(self,side,screen_width):",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\tself.image = pygame.image.load(file_path).convert_alpha()\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\n\t\tif color == 'red': self.value = 100\n\t\telif color == 'green': self.value = 200\n\t\telse: self.value = 300\n\tdef update(self,direction):\n\t\tself.rect.x += direction\nclass Extra(pygame.sprite.Sprite):\n\tdef __init__(self,side,screen_width):\n\t\tsuper().__init__()",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(topleft = (x,y))\n\t\tif color == 'red': self.value = 100\n\t\telif color == 'green': self.value = 200\n\t\telse: self.value = 300\n\tdef update(self,direction):\n\t\tself.rect.x += direction\nclass Extra(pygame.sprite.Sprite):\n\tdef __init__(self,side,screen_width):\n\t\tsuper().__init__()\n\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/extra.png').convert_alpha()",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/extra.png').convert_alpha()\n\t\tif side == 'right':\n\t\t\tx = screen_width + 50\n\t\t\tself.speed = - 3\n\t\telse:\n\t\t\tx = -50\n\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\t\tx",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\t\tx = screen_width + 50\n\t\t\tself.speed = - 3\n\t\telse:\n\t\t\tx = -50\n\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.speed",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\t\tself.speed = - 3\n\t\telse:\n\t\t\tx = -50\n\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\t\tx",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\t\tx = -50\n\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.speed",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\t\tself.speed = 3\n\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "6_Space_Invaders.alien",
        "description": "6_Space_Invaders.alien",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(topleft = (x,80))\n\tdef update(self):\n\t\tself.rect.x += self.speed",
        "detail": "6_Space_Invaders.alien",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "class Game:\n\tdef __init__(self):\n\t\t# Player setup\n\t\tplayer_sprite = Player((screen_width / 2,screen_height),screen_width,5)\n\t\tself.player = pygame.sprite.GroupSingle(player_sprite)\n\t\t# health and score setup\n\t\tself.lives = 3\n\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "CRT",
        "kind": 6,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "class CRT:\n\tdef __init__(self):\n\t\tself.tv = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/tv.png').convert_alpha()\n\t\tself.tv = pygame.transform.scale(self.tv,(screen_width,screen_height))\n\tdef create_crt_lines(self):\n\t\tline_height = 3\n\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tplayer_sprite",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tplayer_sprite = Player((screen_width / 2,screen_height),screen_width,5)\n\t\tself.player = pygame.sprite.GroupSingle(player_sprite)\n\t\t# health and score setup\n\t\tself.lives = 3\n\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.player",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.player = pygame.sprite.GroupSingle(player_sprite)\n\t\t# health and score setup\n\t\tself.lives = 3\n\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.lives",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.lives = 3\n\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.live_surf",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.live_surf = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.live_x_start_pos",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.live_x_start_pos = screen_width - (self.live_surf.get_size()[0] * 2 + 20)\n\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.score",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.score = 0\n\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.font",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.font = pygame.font.Font('C://Users/Softex/Desktop/Space-invaders-main/font/Pixeled.ttf',20)\n\t\t# Obstacle setup\n\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.shape",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.shape = obstacle.shape\n\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.block_size",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.block_size = 6\n\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.blocks",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.blocks = pygame.sprite.Group()\n\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.obstacle_amount",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.obstacle_amount = 4\n\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.obstacle_x_positions",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.obstacle_x_positions = [num * (screen_width / self.obstacle_amount) for num in range(self.obstacle_amount)]\n\t\tself.create_multiple_obstacles(*self.obstacle_x_positions, x_start = screen_width / 15, y_start = 480)\n\t\t# Alien setup\n\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.aliens",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.aliens = pygame.sprite.Group()\n\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.alien_lasers",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.alien_lasers = pygame.sprite.Group()\n\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.alien_setup(rows",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.alien_setup(rows = 6, cols = 8)\n\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.alien_direction",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.alien_direction = 1\n\t\t# Extra setup\n\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.extra",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.extra = pygame.sprite.GroupSingle()\n\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.extra_spawn_time",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.extra_spawn_time = randint(40,80)\n\t\t# Audio\n\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tmusic",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tmusic = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/music.wav')\n\t\tmusic.set_volume(0.2)\n\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):\n\t\tfor row_index, row in enumerate(self.shape):\n\t\t\tfor col_index,col in enumerate(row):",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tmusic.play(loops",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tmusic.play(loops = -1)\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):\n\t\tfor row_index, row in enumerate(self.shape):\n\t\t\tfor col_index,col in enumerate(row):\n\t\t\t\tif col == 'x':\n\t\t\t\t\tx = x_start + col_index * self.block_size + offset_x",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.laser_sound",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):\n\t\tfor row_index, row in enumerate(self.shape):\n\t\t\tfor col_index,col in enumerate(row):\n\t\t\t\tif col == 'x':\n\t\t\t\t\tx = x_start + col_index * self.block_size + offset_x\n\t\t\t\t\ty = y_start + row_index * self.block_size",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.explosion_sound",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.explosion_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/explosion.wav')\n\t\tself.explosion_sound.set_volume(0.3)\n\tdef create_obstacle(self, x_start, y_start,offset_x):\n\t\tfor row_index, row in enumerate(self.shape):\n\t\t\tfor col_index,col in enumerate(row):\n\t\t\t\tif col == 'x':\n\t\t\t\t\tx = x_start + col_index * self.block_size + offset_x\n\t\t\t\t\ty = y_start + row_index * self.block_size\n\t\t\t\t\tblock = obstacle.Block(self.block_size,(241,79,80),x,y)\n\t\t\t\t\tself.blocks.add(block)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tx",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\t\t\tx = x_start + col_index * self.block_size + offset_x\n\t\t\t\t\ty = y_start + row_index * self.block_size\n\t\t\t\t\tblock = obstacle.Block(self.block_size,(241,79,80),x,y)\n\t\t\t\t\tself.blocks.add(block)\n\tdef create_multiple_obstacles(self,*offset,x_start,y_start):\n\t\tfor offset_x in offset:\n\t\t\tself.create_obstacle(x_start,y_start,offset_x)\n\tdef alien_setup(self,rows,cols,x_distance = 60,y_distance = 48,x_offset = 70, y_offset = 100):\n\t\tfor row_index, row in enumerate(range(rows)):\n\t\t\tfor col_index, col in enumerate(range(cols)):",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ty",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\t\t\ty = y_start + row_index * self.block_size\n\t\t\t\t\tblock = obstacle.Block(self.block_size,(241,79,80),x,y)\n\t\t\t\t\tself.blocks.add(block)\n\tdef create_multiple_obstacles(self,*offset,x_start,y_start):\n\t\tfor offset_x in offset:\n\t\t\tself.create_obstacle(x_start,y_start,offset_x)\n\tdef alien_setup(self,rows,cols,x_distance = 60,y_distance = 48,x_offset = 70, y_offset = 100):\n\t\tfor row_index, row in enumerate(range(rows)):\n\t\t\tfor col_index, col in enumerate(range(cols)):\n\t\t\t\tx = col_index * x_distance + x_offset",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tblock",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\t\t\tblock = obstacle.Block(self.block_size,(241,79,80),x,y)\n\t\t\t\t\tself.blocks.add(block)\n\tdef create_multiple_obstacles(self,*offset,x_start,y_start):\n\t\tfor offset_x in offset:\n\t\t\tself.create_obstacle(x_start,y_start,offset_x)\n\tdef alien_setup(self,rows,cols,x_distance = 60,y_distance = 48,x_offset = 70, y_offset = 100):\n\t\tfor row_index, row in enumerate(range(rows)):\n\t\t\tfor col_index, col in enumerate(range(cols)):\n\t\t\t\tx = col_index * x_distance + x_offset\n\t\t\t\ty = row_index * y_distance + y_offset",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tx",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\t\tx = col_index * x_distance + x_offset\n\t\t\t\ty = row_index * y_distance + y_offset\n\t\t\t\tif row_index == 0: alien_sprite = Alien('yellow',x,y)\n\t\t\t\telif 1 <= row_index <= 2: alien_sprite = Alien('green',x,y)\n\t\t\t\telse: alien_sprite = Alien('red',x,y)\n\t\t\t\tself.aliens.add(alien_sprite)\n\tdef alien_position_checker(self):\n\t\tall_aliens = self.aliens.sprites()\n\t\tfor alien in all_aliens:\n\t\t\tif alien.rect.right >= screen_width:",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ty",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\t\ty = row_index * y_distance + y_offset\n\t\t\t\tif row_index == 0: alien_sprite = Alien('yellow',x,y)\n\t\t\t\telif 1 <= row_index <= 2: alien_sprite = Alien('green',x,y)\n\t\t\t\telse: alien_sprite = Alien('red',x,y)\n\t\t\t\tself.aliens.add(alien_sprite)\n\tdef alien_position_checker(self):\n\t\tall_aliens = self.aliens.sprites()\n\t\tfor alien in all_aliens:\n\t\t\tif alien.rect.right >= screen_width:\n\t\t\t\tself.alien_direction = -1",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tall_aliens",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tall_aliens = self.aliens.sprites()\n\t\tfor alien in all_aliens:\n\t\t\tif alien.rect.right >= screen_width:\n\t\t\t\tself.alien_direction = -1\n\t\t\t\tself.alien_move_down(2)\n\t\t\telif alien.rect.left <= 0:\n\t\t\t\tself.alien_direction = 1\n\t\t\t\tself.alien_move_down(2)\n\tdef alien_move_down(self,distance):\n\t\tif self.aliens:",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.alien_direction",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\t\tself.alien_direction = -1\n\t\t\t\tself.alien_move_down(2)\n\t\t\telif alien.rect.left <= 0:\n\t\t\t\tself.alien_direction = 1\n\t\t\t\tself.alien_move_down(2)\n\tdef alien_move_down(self,distance):\n\t\tif self.aliens:\n\t\t\tfor alien in self.aliens.sprites():\n\t\t\t\talien.rect.y += distance\n\tdef alien_shoot(self):",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.alien_direction",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\t\tself.alien_direction = 1\n\t\t\t\tself.alien_move_down(2)\n\tdef alien_move_down(self,distance):\n\t\tif self.aliens:\n\t\t\tfor alien in self.aliens.sprites():\n\t\t\t\talien.rect.y += distance\n\tdef alien_shoot(self):\n\t\tif self.aliens.sprites():\n\t\t\trandom_alien = choice(self.aliens.sprites())\n\t\t\tlaser_sprite = Laser(random_alien.rect.center,6,screen_height)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\trandom_alien",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\trandom_alien = choice(self.aliens.sprites())\n\t\t\tlaser_sprite = Laser(random_alien.rect.center,6,screen_height)\n\t\t\tself.alien_lasers.add(laser_sprite)\n\t\t\tself.laser_sound.play()\n\tdef extra_alien_timer(self):\n\t\tself.extra_spawn_time -= 1\n\t\tif self.extra_spawn_time <= 0:\n\t\t\tself.extra.add(Extra(choice(['right','left']),screen_width))\n\t\t\tself.extra_spawn_time = randint(400,800)\n\tdef collision_checks(self):",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tlaser_sprite",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\tlaser_sprite = Laser(random_alien.rect.center,6,screen_height)\n\t\t\tself.alien_lasers.add(laser_sprite)\n\t\t\tself.laser_sound.play()\n\tdef extra_alien_timer(self):\n\t\tself.extra_spawn_time -= 1\n\t\tif self.extra_spawn_time <= 0:\n\t\t\tself.extra.add(Extra(choice(['right','left']),screen_width))\n\t\t\tself.extra_spawn_time = randint(400,800)\n\tdef collision_checks(self):\n\t\t# player lasers ",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.extra_spawn_time",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\tself.extra_spawn_time = randint(400,800)\n\tdef collision_checks(self):\n\t\t# player lasers \n\t\tif self.player.sprite.lasers:\n\t\t\tfor laser in self.player.sprite.lasers:\n\t\t\t\t# obstacle collisions\n\t\t\t\tif pygame.sprite.spritecollide(laser,self.blocks,True):\n\t\t\t\t\tlaser.kill()\n\t\t\t\t# alien collisions\n\t\t\t\taliens_hit = pygame.sprite.spritecollide(laser,self.aliens,True)",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\t\taliens_hit",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\t\taliens_hit = pygame.sprite.spritecollide(laser,self.aliens,True)\n\t\t\t\tif aliens_hit:\n\t\t\t\t\tfor alien in aliens_hit:\n\t\t\t\t\t\tself.score += alien.value\n\t\t\t\t\tlaser.kill()\n\t\t\t\t\tself.explosion_sound.play()\n\t\t\t\t# extra collision\n\t\t\t\tif pygame.sprite.spritecollide(laser,self.extra,True):\n\t\t\t\t\tself.score += 500\n\t\t\t\t\tlaser.kill()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tx",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\tx = self.live_x_start_pos + (live * (self.live_surf.get_size()[0] + 10))\n\t\t\tscreen.blit(self.live_surf,(x,8))\n\tdef display_score(self):\n\t\tscore_surf = self.font.render(f'score: {self.score}',False,'white')\n\t\tscore_rect = score_surf.get_rect(topleft = (10,-10))\n\t\tscreen.blit(score_surf,score_rect)\n\tdef victory_message(self):\n\t\tif not self.aliens.sprites():\n\t\t\tvictory_surf = self.font.render('You won',False,'white')\n\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tscore_surf",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tscore_surf = self.font.render(f'score: {self.score}',False,'white')\n\t\tscore_rect = score_surf.get_rect(topleft = (10,-10))\n\t\tscreen.blit(score_surf,score_rect)\n\tdef victory_message(self):\n\t\tif not self.aliens.sprites():\n\t\t\tvictory_surf = self.font.render('You won',False,'white')\n\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))\n\t\t\tscreen.blit(victory_surf,victory_rect)\n\tdef run(self):\n\t\tself.player.update()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tscore_rect",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tscore_rect = score_surf.get_rect(topleft = (10,-10))\n\t\tscreen.blit(score_surf,score_rect)\n\tdef victory_message(self):\n\t\tif not self.aliens.sprites():\n\t\t\tvictory_surf = self.font.render('You won',False,'white')\n\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))\n\t\t\tscreen.blit(victory_surf,victory_rect)\n\tdef run(self):\n\t\tself.player.update()\n\t\tself.alien_lasers.update()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tvictory_surf",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\tvictory_surf = self.font.render('You won',False,'white')\n\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))\n\t\t\tscreen.blit(victory_surf,victory_rect)\n\tdef run(self):\n\t\tself.player.update()\n\t\tself.alien_lasers.update()\n\t\tself.extra.update()\n\t\tself.aliens.update(self.alien_direction)\n\t\tself.alien_position_checker()\n\t\tself.extra_alien_timer()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\tvictory_rect",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\tvictory_rect = victory_surf.get_rect(center = (screen_width / 2, screen_height / 2))\n\t\t\tscreen.blit(victory_surf,victory_rect)\n\tdef run(self):\n\t\tself.player.update()\n\t\tself.alien_lasers.update()\n\t\tself.extra.update()\n\t\tself.aliens.update(self.alien_direction)\n\t\tself.alien_position_checker()\n\t\tself.extra_alien_timer()\n\t\tself.collision_checks()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.tv",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.tv = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/tv.png').convert_alpha()\n\t\tself.tv = pygame.transform.scale(self.tv,(screen_width,screen_height))\n\tdef create_crt_lines(self):\n\t\tline_height = 3\n\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tself.tv",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tself.tv = pygame.transform.scale(self.tv,(screen_width,screen_height))\n\tdef create_crt_lines(self):\n\t\tline_height = 3\n\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))\n\t\tself.create_crt_lines()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tline_height",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tline_height = 3\n\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))\n\t\tself.create_crt_lines()\n\t\tscreen.blit(self.tv,(0,0))\nif __name__ == '__main__':",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\tline_amount",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\tline_amount = int(screen_height / line_height)\n\t\tfor line in range(line_amount):\n\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))\n\t\tself.create_crt_lines()\n\t\tscreen.blit(self.tv,(0,0))\nif __name__ == '__main__':\n\tpygame.init()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\t\t\ty_pos",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\t\t\ty_pos = line * line_height\n\t\t\tpygame.draw.line(self.tv,'black',(0,y_pos),(screen_width,y_pos),1)\n\tdef draw(self):\n\t\tself.tv.set_alpha(randint(75,90))\n\t\tself.create_crt_lines()\n\t\tscreen.blit(self.tv,(0,0))\nif __name__ == '__main__':\n\tpygame.init()\n\tscreen_width = 600\n\tscreen_height = 600",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\tscreen_width",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\tscreen_width = 600\n\tscreen_height = 600\n\tscreen = pygame.display.set_mode((screen_width,screen_height))\n\tclock = pygame.time.Clock()\n\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\tscreen_height",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\tscreen_height = 600\n\tscreen = pygame.display.set_mode((screen_width,screen_height))\n\tclock = pygame.time.Clock()\n\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\tscreen",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\tscreen = pygame.display.set_mode((screen_width,screen_height))\n\tclock = pygame.time.Clock()\n\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\tclock",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\tclock = pygame.time.Clock()\n\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()\n\t\t\t\tsys.exit()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\tgame",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\tgame = Game()\n\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()\n\t\t\t\tsys.exit()\n\t\t\tif event.type == ALIENLASER:",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\tcrt",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\tcrt = CRT()\n\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()\n\t\t\t\tsys.exit()\n\t\t\tif event.type == ALIENLASER:\n\t\t\t\tgame.alien_shoot()",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "\tALIENLASER",
        "kind": 5,
        "importPath": "6_Space_Invaders.index",
        "description": "6_Space_Invaders.index",
        "peekOfCode": "\tALIENLASER = pygame.USEREVENT + 1\n\tpygame.time.set_timer(ALIENLASER,800)\n\twhile True:\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tpygame.quit()\n\t\t\t\tsys.exit()\n\t\t\tif event.type == ALIENLASER:\n\t\t\t\tgame.alien_shoot()\n\t\tscreen.fill((30,30,30))",
        "detail": "6_Space_Invaders.index",
        "documentation": {}
    },
    {
        "label": "Laser",
        "kind": 6,
        "importPath": "6_Space_Invaders.laser",
        "description": "6_Space_Invaders.laser",
        "peekOfCode": "class Laser(pygame.sprite.Sprite):\n\tdef __init__(self,pos,speed,screen_height):\n\t\tsuper().__init__()\n\t\tself.image = pygame.Surface((4,20))\n\t\tself.image.fill('white')\n\t\tself.rect = self.image.get_rect(center = pos)\n\t\tself.speed = speed\n\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:",
        "detail": "6_Space_Invaders.laser",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "6_Space_Invaders.laser",
        "description": "6_Space_Invaders.laser",
        "peekOfCode": "\t\tself.image = pygame.Surface((4,20))\n\t\tself.image.fill('white')\n\t\tself.rect = self.image.get_rect(center = pos)\n\t\tself.speed = speed\n\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:\n\t\t\tself.kill()\n\tdef update(self):\n\t\tself.rect.y += self.speed",
        "detail": "6_Space_Invaders.laser",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "6_Space_Invaders.laser",
        "description": "6_Space_Invaders.laser",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(center = pos)\n\t\tself.speed = speed\n\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:\n\t\t\tself.kill()\n\tdef update(self):\n\t\tself.rect.y += self.speed\n\t\tself.destroy()",
        "detail": "6_Space_Invaders.laser",
        "documentation": {}
    },
    {
        "label": "\t\tself.speed",
        "kind": 5,
        "importPath": "6_Space_Invaders.laser",
        "description": "6_Space_Invaders.laser",
        "peekOfCode": "\t\tself.speed = speed\n\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:\n\t\t\tself.kill()\n\tdef update(self):\n\t\tself.rect.y += self.speed\n\t\tself.destroy()",
        "detail": "6_Space_Invaders.laser",
        "documentation": {}
    },
    {
        "label": "\t\tself.height_y_constraint",
        "kind": 5,
        "importPath": "6_Space_Invaders.laser",
        "description": "6_Space_Invaders.laser",
        "peekOfCode": "\t\tself.height_y_constraint = screen_height\n\tdef destroy(self):\n\t\tif self.rect.y <= -50 or self.rect.y >= self.height_y_constraint + 50:\n\t\t\tself.kill()\n\tdef update(self):\n\t\tself.rect.y += self.speed\n\t\tself.destroy()",
        "detail": "6_Space_Invaders.laser",
        "documentation": {}
    },
    {
        "label": "Block",
        "kind": 6,
        "importPath": "6_Space_Invaders.obstacle",
        "description": "6_Space_Invaders.obstacle",
        "peekOfCode": "class Block(pygame.sprite.Sprite):\n\tdef __init__(self,size,color,x,y):\n\t\tsuper().__init__()\n\t\tself.image = pygame.Surface((size,size))\n\t\tself.image.fill(color)\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\nshape = [\n'  xxxxxxx',\n' xxxxxxxxx',\n'xxxxxxxxxxx',",
        "detail": "6_Space_Invaders.obstacle",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "6_Space_Invaders.obstacle",
        "description": "6_Space_Invaders.obstacle",
        "peekOfCode": "\t\tself.image = pygame.Surface((size,size))\n\t\tself.image.fill(color)\n\t\tself.rect = self.image.get_rect(topleft = (x,y))\nshape = [\n'  xxxxxxx',\n' xxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxx     xxx',",
        "detail": "6_Space_Invaders.obstacle",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "6_Space_Invaders.obstacle",
        "description": "6_Space_Invaders.obstacle",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(topleft = (x,y))\nshape = [\n'  xxxxxxx',\n' xxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxx     xxx',\n'xx       xx']",
        "detail": "6_Space_Invaders.obstacle",
        "documentation": {}
    },
    {
        "label": "shape",
        "kind": 5,
        "importPath": "6_Space_Invaders.obstacle",
        "description": "6_Space_Invaders.obstacle",
        "peekOfCode": "shape = [\n'  xxxxxxx',\n' xxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxxxxxxxxxx',\n'xxx     xxx',\n'xx       xx']",
        "detail": "6_Space_Invaders.obstacle",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "class Player(pygame.sprite.Sprite):\n\tdef __init__(self,pos,constraint,speed):\n\t\tsuper().__init__()\n\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.rect = self.image.get_rect(midbottom = pos)\n\t\tself.speed = speed\n\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.image",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.image = pygame.image.load('C://Users/Softex/Desktop/Space-invaders-main/graphics/player.png').convert_alpha()\n\t\tself.rect = self.image.get_rect(midbottom = pos)\n\t\tself.speed = speed\n\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.rect = self.image.get_rect(midbottom = pos)\n\t\tself.speed = speed\n\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.speed",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.speed = speed\n\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.max_x_constraint",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.max_x_constraint = constraint\n\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.ready",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.ready = True\n\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.laser_time",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.laser_time = 0\n\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.laser_cooldown",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.laser_cooldown = 600\n\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:\n\t\t\tself.rect.x -= self.speed",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.lasers",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.lasers = pygame.sprite.Group()\n\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:\n\t\t\tself.rect.x -= self.speed\n\t\tif keys[pygame.K_SPACE] and self.ready:",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tself.laser_sound",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tself.laser_sound = pygame.mixer.Sound('C://Users/Softex/Desktop/Space-invaders-main/audio/laser.wav')\n\t\tself.laser_sound.set_volume(0.5)\n\tdef get_input(self):\n\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:\n\t\t\tself.rect.x -= self.speed\n\t\tif keys[pygame.K_SPACE] and self.ready:\n\t\t\tself.shoot_laser()",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\tkeys",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\tkeys = pygame.key.get_pressed()\n\t\tif keys[pygame.K_RIGHT]:\n\t\t\tself.rect.x += self.speed\n\t\telif keys[pygame.K_LEFT]:\n\t\t\tself.rect.x -= self.speed\n\t\tif keys[pygame.K_SPACE] and self.ready:\n\t\t\tself.shoot_laser()\n\t\t\tself.ready = False\n\t\t\tself.laser_time = pygame.time.get_ticks()\n\t\t\tself.laser_sound.play()",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.ready",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\t\tself.ready = False\n\t\t\tself.laser_time = pygame.time.get_ticks()\n\t\t\tself.laser_sound.play()\n\tdef recharge(self):\n\t\tif not self.ready:\n\t\t\tcurrent_time = pygame.time.get_ticks()\n\t\t\tif current_time - self.laser_time >= self.laser_cooldown:\n\t\t\t\tself.ready = True\n\tdef constraint(self):\n\t\tif self.rect.left <= 0:",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.laser_time",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\t\tself.laser_time = pygame.time.get_ticks()\n\t\t\tself.laser_sound.play()\n\tdef recharge(self):\n\t\tif not self.ready:\n\t\t\tcurrent_time = pygame.time.get_ticks()\n\t\t\tif current_time - self.laser_time >= self.laser_cooldown:\n\t\t\t\tself.ready = True\n\tdef constraint(self):\n\t\tif self.rect.left <= 0:\n\t\t\tself.rect.left = 0",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tcurrent_time",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\t\tcurrent_time = pygame.time.get_ticks()\n\t\t\tif current_time - self.laser_time >= self.laser_cooldown:\n\t\t\t\tself.ready = True\n\tdef constraint(self):\n\t\tif self.rect.left <= 0:\n\t\t\tself.rect.left = 0\n\t\tif self.rect.right >= self.max_x_constraint:\n\t\t\tself.rect.right = self.max_x_constraint\n\tdef shoot_laser(self):\n\t\tself.lasers.add(Laser(self.rect.center,-8,self.rect.bottom))",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.ready",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\t\t\tself.ready = True\n\tdef constraint(self):\n\t\tif self.rect.left <= 0:\n\t\t\tself.rect.left = 0\n\t\tif self.rect.right >= self.max_x_constraint:\n\t\t\tself.rect.right = self.max_x_constraint\n\tdef shoot_laser(self):\n\t\tself.lasers.add(Laser(self.rect.center,-8,self.rect.bottom))\n\tdef update(self):\n\t\tself.get_input()",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.rect.left",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\t\tself.rect.left = 0\n\t\tif self.rect.right >= self.max_x_constraint:\n\t\t\tself.rect.right = self.max_x_constraint\n\tdef shoot_laser(self):\n\t\tself.lasers.add(Laser(self.rect.center,-8,self.rect.bottom))\n\tdef update(self):\n\t\tself.get_input()\n\t\tself.constraint()\n\t\tself.recharge()\n\t\tself.lasers.update()",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.rect.right",
        "kind": 5,
        "importPath": "6_Space_Invaders.player",
        "description": "6_Space_Invaders.player",
        "peekOfCode": "\t\t\tself.rect.right = self.max_x_constraint\n\tdef shoot_laser(self):\n\t\tself.lasers.add(Laser(self.rect.center,-8,self.rect.bottom))\n\tdef update(self):\n\t\tself.get_input()\n\t\tself.constraint()\n\t\tself.recharge()\n\t\tself.lasers.update()",
        "detail": "6_Space_Invaders.player",
        "documentation": {}
    },
    {
        "label": "Spaceship",
        "kind": 6,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "class Spaceship(pygame.sprite.Sprite):\n    def __init__(self, x, y, health):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"7_Milky_Way_Defense/assests/image/player.png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n        self.last_shot = pygame.time.get_ticks()\n        self.health_start = health\n        self.health_remaining = health\n    def update(self):",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "Bullets",
        "kind": 6,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "class Bullets(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bullet.png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n    def update(self):\n        self.rect.y -= 5\n        if self.rect.bottom < 0:\n            self.kill()",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "Aliens",
        "kind": 6,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "class Aliens(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"7_Milky_Way_Defense/assests/image/alien\" +\n                                       str(random.randint(1, 4)) + \".png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n        self.move_counter = 0\n        self.move_direction = 1\n    def update(self):",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "Alien_Bullets",
        "kind": 6,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "class Alien_Bullets(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"7_Milky_Way_Defense/assests/image/alien_bullet.png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n    def update(self):\n        self.rect.y += 2\n        if self.rect.top > screen_height:\n            self.kill()",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "Explosion",
        "kind": 6,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "class Explosion(pygame.sprite.Sprite):\n    def __init__(self, x, y, size):\n        pygame.sprite.Sprite.__init__(self)\n        self.images = []\n        for numero in range(1, 6):\n            img = pygame.image.load(f\"7_Milky_Way_Defense/assests/image/exp{numero}.png\")\n            if size == 1:\n                img = pygame.transform.scale(img, (20, 20))\n            if size == 2:\n                img = pygame.transform.scale(img, (40, 40))",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "draw_backGround",
        "kind": 2,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "def draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))\nclass Spaceship(pygame.sprite.Sprite):\n    def __init__(self, x, y, health):\n        pygame.sprite.Sprite.__init__(self)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "draw_text",
        "kind": 2,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "def draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))\nclass Spaceship(pygame.sprite.Sprite):\n    def __init__(self, x, y, health):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"7_Milky_Way_Defense/assests/image/player.png\")\n        self.rect = self.image.get_rect()\n        self.rect.center = [x, y]\n        self.last_shot = pygame.time.get_ticks()",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "show_story",
        "kind": 2,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "def show_story():\n    story_text = [\n        \"MILKY WAY DEFENSE\",\n        \"\",\n        \"No ano de 2525...\",\n        \"A Via Láctea está sob ataque.\",\n        \"\",\n        \"Forças inimigas desconhecidas estão avançando rumo à Terra,\",\n        \"destruindo colônias humanas por todo o sistema galáctico.\",\n        \"\",",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "create_aliens",
        "kind": 2,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "def create_aliens():\n    for row in range(rows):\n        for item in range(cols):\n            alien = Aliens(200 + item * 100, 90 + row * 70)\n            alien_group.add(alien)\nspaceship = Spaceship((screen_width//2), screen_height - 40, 3)\nspaceship_group.add(spaceship)\ncreate_aliens()\nrun = True\nshow_story()",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "clock = pygame.time.Clock()\nfps = 60\nscreen_width = 800\nscreen_height = 600\nexplosion_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "fps",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "fps = 60\nscreen_width = 800\nscreen_height = 600\nexplosion_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "screen_width",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "screen_width = 800\nscreen_height = 600\nexplosion_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "screen_height",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "screen_height = 600\nexplosion_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5\nalien_cooldown = 800",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "explosion_fx",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "explosion_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion.wav\")\nexplosion_fx.set_volume(0.25)\nexplosion2_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "explosion2_fx",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "explosion2_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/explosion2.wav\")\nexplosion2_fx.set_volume(0.25)\nlaser_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "laser_fx",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "laser_fx = pygame.mixer.Sound(\"7_Milky_Way_Defense/assests/audio/laser.wav\")\nlaser_fx.set_volume(0.25)\nrows = 5\ncols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "rows = 5\ncols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "cols",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "cols = 5\nalien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "alien_cooldown",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "alien_cooldown = 800\nlast_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "last_alien_shot",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "last_alien_shot = pygame.time.get_ticks()\ncountdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "countdown = 3\nlast_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "last_count",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "last_count = pygame.time.get_ticks()\ngame_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "game_over = 0\nscore = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "score = rows * cols\nquantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "quantity_alien",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "quantity_alien = rows * cols\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "RED = (255, 0, 0)\nGREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")\nterra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "GREEN = (0, 255, 0)\nWHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")\nterra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")\nlua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "WHITE = (255, 255, 255)\nscreen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")\nterra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")\nlua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")\ndef draw_backGround():",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "screen = pygame.display.set_mode((screen_width, screen_height), 0)\npygame.display.set_caption('Milky Way Defense')\nfonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")\nterra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")\nlua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "fonte1",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "fonte1 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 20)\nfonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")\nterra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")\nlua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "fonte2",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "fonte2 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 15)\nfonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")\nterra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")\nlua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "fonte3",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "fonte3 = pygame.font.Font(\"7_Milky_Way_Defense/assests/fonte/Pixeled.ttf\", 30)\nbackGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")\nterra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")\nlua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "backGround",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "backGround = pygame.image.load(\"7_Milky_Way_Defense/assests/image/bg.png\")\nterra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")\nlua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "terra",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "terra = pygame.image.load(\"7_Milky_Way_Defense/assests/image/terra.png\")\nlua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))\nclass Spaceship(pygame.sprite.Sprite):",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "lua",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "lua = pygame.image.load(\"7_Milky_Way_Defense/assests/image/lua.png\")\ndef draw_backGround():\n    screen.blit(backGround, (0, 0))\n    screen.blit(terra, (100, 350))\n    screen.blit(lua, (500, 100))\ndef draw_text(text, font, text_col, x, y):\n    img = font.render(text, True, text_col)\n    screen.blit(img, (x, y))\nclass Spaceship(pygame.sprite.Sprite):\n    def __init__(self, x, y, health):",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "spaceship_group",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "spaceship_group = pygame.sprite.Group()\nbullet_group = pygame.sprite.Group()\nalien_group = pygame.sprite.Group()\nalien_bullet_group = pygame.sprite.Group()\nexplosion_group = pygame.sprite.Group()\ndef show_story():\n    story_text = [\n        \"MILKY WAY DEFENSE\",\n        \"\",\n        \"No ano de 2525...\",",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "bullet_group",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "bullet_group = pygame.sprite.Group()\nalien_group = pygame.sprite.Group()\nalien_bullet_group = pygame.sprite.Group()\nexplosion_group = pygame.sprite.Group()\ndef show_story():\n    story_text = [\n        \"MILKY WAY DEFENSE\",\n        \"\",\n        \"No ano de 2525...\",\n        \"A Via Láctea está sob ataque.\",",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "alien_group",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "alien_group = pygame.sprite.Group()\nalien_bullet_group = pygame.sprite.Group()\nexplosion_group = pygame.sprite.Group()\ndef show_story():\n    story_text = [\n        \"MILKY WAY DEFENSE\",\n        \"\",\n        \"No ano de 2525...\",\n        \"A Via Láctea está sob ataque.\",\n        \"\",",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "alien_bullet_group",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "alien_bullet_group = pygame.sprite.Group()\nexplosion_group = pygame.sprite.Group()\ndef show_story():\n    story_text = [\n        \"MILKY WAY DEFENSE\",\n        \"\",\n        \"No ano de 2525...\",\n        \"A Via Láctea está sob ataque.\",\n        \"\",\n        \"Forças inimigas desconhecidas estão avançando rumo à Terra,\",",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "explosion_group",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "explosion_group = pygame.sprite.Group()\ndef show_story():\n    story_text = [\n        \"MILKY WAY DEFENSE\",\n        \"\",\n        \"No ano de 2525...\",\n        \"A Via Láctea está sob ataque.\",\n        \"\",\n        \"Forças inimigas desconhecidas estão avançando rumo à Terra,\",\n        \"destruindo colônias humanas por todo o sistema galáctico.\",",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "spaceship",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "spaceship = Spaceship((screen_width//2), screen_height - 40, 3)\nspaceship_group.add(spaceship)\ncreate_aliens()\nrun = True\nshow_story()\nwhile run:\n    clock.tick(fps)\n    draw_backGround()\n    if countdown == 0:\n        draw_text(f'NAVES INIMIGAS RESTANTES: {score}', fonte1, WHITE, 10, 0)",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 5,
        "importPath": "7_Milky_Way_Defense.index",
        "description": "7_Milky_Way_Defense.index",
        "peekOfCode": "run = True\nshow_story()\nwhile run:\n    clock.tick(fps)\n    draw_backGround()\n    if countdown == 0:\n        draw_text(f'NAVES INIMIGAS RESTANTES: {score}', fonte1, WHITE, 10, 0)\n        draw_text('FASE 1', fonte1, WHITE, (screen_width//2 + 150), 0)\n        if len(alien_group) < quantity_alien:\n            score -= (quantity_alien - len(alien_group))",
        "detail": "7_Milky_Way_Defense.index",
        "documentation": {}
    }
]